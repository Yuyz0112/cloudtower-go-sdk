// Code generated by go-swagger; DO NOT EDIT.

package iscsi_target

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new iscsi target API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for iscsi target API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateIscsiTarget(params *CreateIscsiTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIscsiTargetOK, error)

	DeleteIscsiTarget(params *DeleteIscsiTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIscsiTargetOK, error)

	GetIscsiTargets(params *GetIscsiTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIscsiTargetsOK, error)

	GetIscsiTargetsConnection(params *GetIscsiTargetsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIscsiTargetsConnectionOK, error)

	UpdateIscsiTarget(params *UpdateIscsiTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIscsiTargetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateIscsiTarget create iscsi target API
*/
func (a *Client) CreateIscsiTarget(params *CreateIscsiTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIscsiTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIscsiTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIscsiTarget",
		Method:             "POST",
		PathPattern:        "/create-iscsi-target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateIscsiTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIscsiTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIscsiTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIscsiTarget delete iscsi target API
*/
func (a *Client) DeleteIscsiTarget(params *DeleteIscsiTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIscsiTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIscsiTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIscsiTarget",
		Method:             "POST",
		PathPattern:        "/delete-iscsi-target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIscsiTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIscsiTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIscsiTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiTargets get iscsi targets API
*/
func (a *Client) GetIscsiTargets(params *GetIscsiTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIscsiTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiTargets",
		Method:             "POST",
		PathPattern:        "/get-iscsi-targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiTargetsConnection get iscsi targets connection API
*/
func (a *Client) GetIscsiTargetsConnection(params *GetIscsiTargetsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIscsiTargetsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiTargetsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiTargetsConnection",
		Method:             "POST",
		PathPattern:        "/get-iscsi-targets-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiTargetsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiTargetsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiTargetsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIscsiTarget update iscsi target API
*/
func (a *Client) UpdateIscsiTarget(params *UpdateIscsiTargetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIscsiTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIscsiTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIscsiTarget",
		Method:             "POST",
		PathPattern:        "/update-iscsi-target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIscsiTargetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIscsiTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateIscsiTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
