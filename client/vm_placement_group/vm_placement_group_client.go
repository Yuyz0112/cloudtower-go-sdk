// Code generated by go-swagger; DO NOT EDIT.

package vm_placement_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vm placement group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vm placement group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVMPlacementGroup(params *CreateVMPlacementGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMPlacementGroupOK, error)

	DeleteVMPlacementGroup(params *DeleteVMPlacementGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMPlacementGroupOK, error)

	GetVMPlacementGroups(params *GetVMPlacementGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMPlacementGroupsOK, error)

	GetVMPlacementGroupsConnection(params *GetVMPlacementGroupsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMPlacementGroupsConnectionOK, error)

	UpdateVMPlacementGroup(params *UpdateVMPlacementGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMPlacementGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVMPlacementGroup create Vm placement group API
*/
func (a *Client) CreateVMPlacementGroup(params *CreateVMPlacementGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMPlacementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMPlacementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmPlacementGroup",
		Method:             "POST",
		PathPattern:        "/create-vm-placement-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMPlacementGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMPlacementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmPlacementGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMPlacementGroup delete Vm placement group API
*/
func (a *Client) DeleteVMPlacementGroup(params *DeleteVMPlacementGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMPlacementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMPlacementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmPlacementGroup",
		Method:             "POST",
		PathPattern:        "/delete-vm-placement-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMPlacementGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMPlacementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmPlacementGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMPlacementGroups get Vm placement groups API
*/
func (a *Client) GetVMPlacementGroups(params *GetVMPlacementGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMPlacementGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMPlacementGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmPlacementGroups",
		Method:             "POST",
		PathPattern:        "/get-vm-placement-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMPlacementGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMPlacementGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmPlacementGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMPlacementGroupsConnection get Vm placement groups connection API
*/
func (a *Client) GetVMPlacementGroupsConnection(params *GetVMPlacementGroupsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMPlacementGroupsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMPlacementGroupsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmPlacementGroupsConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-placement-groups-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMPlacementGroupsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMPlacementGroupsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmPlacementGroupsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMPlacementGroup update Vm placement group API
*/
func (a *Client) UpdateVMPlacementGroup(params *UpdateVMPlacementGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMPlacementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMPlacementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmPlacementGroup",
		Method:             "POST",
		PathPattern:        "/update-vm-placement-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMPlacementGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMPlacementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmPlacementGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
