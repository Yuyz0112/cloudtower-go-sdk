// Code generated by go-swagger; DO NOT EDIT.

package nfs_export

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nfs export API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nfs export API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNfsExport(params *CreateNfsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNfsExportOK, error)

	DeleteNfsExport(params *DeleteNfsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNfsExportOK, error)

	GetNfsExports(params *GetNfsExportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsExportsOK, error)

	GetNfsExportsConnection(params *GetNfsExportsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsExportsConnectionOK, error)

	UpdateNfsExport(params *UpdateNfsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNfsExportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNfsExport create nfs export API
*/
func (a *Client) CreateNfsExport(params *CreateNfsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNfsExport",
		Method:             "POST",
		PathPattern:        "/create-nfs-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNfsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNfsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNfsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNfsExport delete nfs export API
*/
func (a *Client) DeleteNfsExport(params *DeleteNfsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNfsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNfsExport",
		Method:             "POST",
		PathPattern:        "/delete-nfs-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNfsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNfsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNfsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNfsExports get nfs exports API
*/
func (a *Client) GetNfsExports(params *GetNfsExportsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsExportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsExportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsExports",
		Method:             "POST",
		PathPattern:        "/get-nfs-exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsExportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsExportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsExports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNfsExportsConnection get nfs exports connection API
*/
func (a *Client) GetNfsExportsConnection(params *GetNfsExportsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNfsExportsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsExportsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsExportsConnection",
		Method:             "POST",
		PathPattern:        "/get-nfs-exports-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsExportsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsExportsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsExportsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNfsExport update nfs export API
*/
func (a *Client) UpdateNfsExport(params *UpdateNfsExportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNfsExport",
		Method:             "POST",
		PathPattern:        "/update-nfs-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNfsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNfsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNfsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
