// Code generated by go-swagger; DO NOT EDIT.

package vm_folder

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vm folder API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vm folder API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVMFolder(params *CreateVMFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMFolderOK, error)

	DeleteVMFolder(params *DeleteVMFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMFolderOK, error)

	GetVMFolders(params *GetVMFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMFoldersOK, error)

	GetVMFoldersConnection(params *GetVMFoldersConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMFoldersConnectionOK, error)

	UpdateVMFolder(params *UpdateVMFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMFolderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVMFolder create Vm folder API
*/
func (a *Client) CreateVMFolder(params *CreateVMFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmFolder",
		Method:             "POST",
		PathPattern:        "/create-vm-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMFolder delete Vm folder API
*/
func (a *Client) DeleteVMFolder(params *DeleteVMFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmFolder",
		Method:             "POST",
		PathPattern:        "/delete-vm-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMFolders get Vm folders API
*/
func (a *Client) GetVMFolders(params *GetVMFoldersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmFolders",
		Method:             "POST",
		PathPattern:        "/get-vm-folders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMFoldersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMFoldersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmFolders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMFoldersConnection get Vm folders connection API
*/
func (a *Client) GetVMFoldersConnection(params *GetVMFoldersConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMFoldersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMFoldersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmFoldersConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-folders-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMFoldersConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMFoldersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmFoldersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMFolder update Vm folder API
*/
func (a *Client) UpdateVMFolder(params *UpdateVMFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmFolder",
		Method:             "POST",
		PathPattern:        "/update-vm-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
