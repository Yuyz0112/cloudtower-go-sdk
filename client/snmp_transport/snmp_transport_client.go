// Code generated by go-swagger; DO NOT EDIT.

package snmp_transport

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new snmp transport API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snmp transport API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSnmpTransport(params *CreateSnmpTransportParams, opts ...ClientOption) (*CreateSnmpTransportOK, error)

	DeleteSnmpTransport(params *DeleteSnmpTransportParams, opts ...ClientOption) (*DeleteSnmpTransportOK, error)

	GetSnmpTransports(params *GetSnmpTransportsParams, opts ...ClientOption) (*GetSnmpTransportsOK, error)

	GetSnmpTransportsConnection(params *GetSnmpTransportsConnectionParams, opts ...ClientOption) (*GetSnmpTransportsConnectionOK, error)

	UpdateSnmpTransport(params *UpdateSnmpTransportParams, opts ...ClientOption) (*UpdateSnmpTransportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSnmpTransport create snmp transport API
*/
func (a *Client) CreateSnmpTransport(params *CreateSnmpTransportParams, opts ...ClientOption) (*CreateSnmpTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnmpTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSnmpTransport",
		Method:             "POST",
		PathPattern:        "/create-snmp-transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSnmpTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSnmpTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSnmpTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnmpTransport delete snmp transport API
*/
func (a *Client) DeleteSnmpTransport(params *DeleteSnmpTransportParams, opts ...ClientOption) (*DeleteSnmpTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnmpTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSnmpTransport",
		Method:             "POST",
		PathPattern:        "/delete-snmp-transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSnmpTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnmpTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnmpTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTransports get snmp transports API
*/
func (a *Client) GetSnmpTransports(params *GetSnmpTransportsParams, opts ...ClientOption) (*GetSnmpTransportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTransportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTransports",
		Method:             "POST",
		PathPattern:        "/get-snmp-transports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTransportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTransportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTransports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTransportsConnection get snmp transports connection API
*/
func (a *Client) GetSnmpTransportsConnection(params *GetSnmpTransportsConnectionParams, opts ...ClientOption) (*GetSnmpTransportsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTransportsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTransportsConnection",
		Method:             "POST",
		PathPattern:        "/get-snmp-transports-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTransportsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTransportsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTransportsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSnmpTransport update snmp transport API
*/
func (a *Client) UpdateSnmpTransport(params *UpdateSnmpTransportParams, opts ...ClientOption) (*UpdateSnmpTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnmpTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSnmpTransport",
		Method:             "POST",
		PathPattern:        "/update-snmp-transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSnmpTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSnmpTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSnmpTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
