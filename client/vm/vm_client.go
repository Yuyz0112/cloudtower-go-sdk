// Code generated by go-swagger; DO NOT EDIT.

package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddVMCdRom(params *AddVMCdRomParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMCdRomOK, error)

	AddVMDisk(params *AddVMDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMDiskOK, error)

	AddVMNic(params *AddVMNicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMNicOK, error)

	AddVMToFolder(params *AddVMToFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMToFolderOK, error)

	CloneVM(params *CloneVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneVMOK, error)

	ConvertVMTemplateToVM(params *ConvertVMTemplateToVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConvertVMTemplateToVMOK, error)

	CreateVM(params *CreateVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMOK, error)

	CreateVMFromTemplate(params *CreateVMFromTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMFromTemplateOK, error)

	DeleteVM(params *DeleteVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMOK, error)

	ForceRestartVM(params *ForceRestartVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForceRestartVMOK, error)

	ForceShutDownVM(params *ForceShutDownVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForceShutDownVMOK, error)

	GetVms(params *GetVmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmsOK, error)

	GetVmsConnection(params *GetVmsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmsConnectionOK, error)

	InstallVmtools(params *InstallVmtoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallVmtoolsOK, error)

	MigRateVM(params *MigRateVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigRateVMOK, error)

	MoveVMToRecycleBin(params *MoveVMToRecycleBinParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveVMToRecycleBinOK, error)

	RebuildVM(params *RebuildVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebuildVMOK, error)

	RecoverVMFromRecycleBin(params *RecoverVMFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecoverVMFromRecycleBinOK, error)

	RemoveVMCdRom(params *RemoveVMCdRomParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMCdRomOK, error)

	RemoveVMDisk(params *RemoveVMDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMDiskOK, error)

	RemoveVMNic(params *RemoveVMNicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMNicOK, error)

	RemoveVMToFolder(params *RemoveVMToFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMToFolderOK, error)

	RestartVM(params *RestartVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartVMOK, error)

	ResumeVM(params *ResumeVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeVMOK, error)

	RollbackVM(params *RollbackVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollbackVMOK, error)

	ShutDownVM(params *ShutDownVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShutDownVMOK, error)

	StartVM(params *StartVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartVMOK, error)

	SuspendVM(params *SuspendVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuspendVMOK, error)

	UpdateVM(params *UpdateVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMOK, error)

	UpdateVMDisk(params *UpdateVMDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMDiskOK, error)

	UpdateVMNic(params *UpdateVMNicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMNicOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddVMCdRom add Vm cd rom API
*/
func (a *Client) AddVMCdRom(params *AddVMCdRomParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMCdRomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMCdRomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmCdRom",
		Method:             "POST",
		PathPattern:        "/add-vm-cd-rom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMCdRomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMCdRomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmCdRom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVMDisk add Vm disk API
*/
func (a *Client) AddVMDisk(params *AddVMDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmDisk",
		Method:             "POST",
		PathPattern:        "/add-vm-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMDiskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVMNic add Vm nic API
*/
func (a *Client) AddVMNic(params *AddVMNicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMNicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmNic",
		Method:             "POST",
		PathPattern:        "/add-vm-nic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVMToFolder add Vm to folder API
*/
func (a *Client) AddVMToFolder(params *AddVMToFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVMToFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMToFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmToFolder",
		Method:             "POST",
		PathPattern:        "/add-vm-to-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMToFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMToFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmToFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneVM clone Vm API
*/
func (a *Client) CloneVM(params *CloneVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneVm",
		Method:             "POST",
		PathPattern:        "/clone-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConvertVMTemplateToVM convert Vm template to Vm API
*/
func (a *Client) ConvertVMTemplateToVM(params *ConvertVMTemplateToVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConvertVMTemplateToVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConvertVMTemplateToVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConvertVmTemplateToVm",
		Method:             "POST",
		PathPattern:        "/convert-vm-template-to-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConvertVMTemplateToVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConvertVMTemplateToVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConvertVmTemplateToVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVM create Vm API
*/
func (a *Client) CreateVM(params *CreateVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVm",
		Method:             "POST",
		PathPattern:        "/create-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVMFromTemplate create Vm from template API
*/
func (a *Client) CreateVMFromTemplate(params *CreateVMFromTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMFromTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMFromTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmFromTemplate",
		Method:             "POST",
		PathPattern:        "/create-vm-from-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMFromTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMFromTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmFromTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVM delete Vm API
*/
func (a *Client) DeleteVM(params *DeleteVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVm",
		Method:             "POST",
		PathPattern:        "/delete-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForceRestartVM force restart Vm API
*/
func (a *Client) ForceRestartVM(params *ForceRestartVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForceRestartVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceRestartVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForceRestartVm",
		Method:             "POST",
		PathPattern:        "/force-restart-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceRestartVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForceRestartVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ForceRestartVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForceShutDownVM force shut down Vm API
*/
func (a *Client) ForceShutDownVM(params *ForceShutDownVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ForceShutDownVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceShutDownVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForceShutDownVm",
		Method:             "POST",
		PathPattern:        "/poweroff-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceShutDownVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForceShutDownVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ForceShutDownVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVms get vms API
*/
func (a *Client) GetVms(params *GetVmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVms",
		Method:             "POST",
		PathPattern:        "/get-vms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVmsConnection get vms connection API
*/
func (a *Client) GetVmsConnection(params *GetVmsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmsConnection",
		Method:             "POST",
		PathPattern:        "/get-vms-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVmsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstallVmtools install vmtools API
*/
func (a *Client) InstallVmtools(params *InstallVmtoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallVmtoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallVmtoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallVmtools",
		Method:             "POST",
		PathPattern:        "/install-vmtools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallVmtoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallVmtoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InstallVmtools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MigRateVM mig rate Vm API
*/
func (a *Client) MigRateVM(params *MigRateVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MigRateVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigRateVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MigRateVm",
		Method:             "POST",
		PathPattern:        "/migrate-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MigRateVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MigRateVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MigRateVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveVMToRecycleBin move Vm to recycle bin API
*/
func (a *Client) MoveVMToRecycleBin(params *MoveVMToRecycleBinParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*MoveVMToRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveVMToRecycleBinParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MoveVmToRecycleBin",
		Method:             "POST",
		PathPattern:        "/move-vm-to-recycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveVMToRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveVMToRecycleBinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MoveVmToRecycleBin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RebuildVM rebuild Vm API
*/
func (a *Client) RebuildVM(params *RebuildVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RebuildVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RebuildVm",
		Method:             "POST",
		PathPattern:        "/rebuild-vm-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebuildVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebuildVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RebuildVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecoverVMFromRecycleBin recover Vm from recycle bin API
*/
func (a *Client) RecoverVMFromRecycleBin(params *RecoverVMFromRecycleBinParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RecoverVMFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecoverVMFromRecycleBinParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RecoverVmFromRecycleBin",
		Method:             "POST",
		PathPattern:        "/recover-vm-from-recycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RecoverVMFromRecycleBinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecoverVMFromRecycleBinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RecoverVmFromRecycleBin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMCdRom remove Vm cd rom API
*/
func (a *Client) RemoveVMCdRom(params *RemoveVMCdRomParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMCdRomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMCdRomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmCdRom",
		Method:             "POST",
		PathPattern:        "/remove-vm-cd-rom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMCdRomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMCdRomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmCdRom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMDisk remove Vm disk API
*/
func (a *Client) RemoveVMDisk(params *RemoveVMDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmDisk",
		Method:             "POST",
		PathPattern:        "/remove-vm-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMDiskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMNic remove Vm nic API
*/
func (a *Client) RemoveVMNic(params *RemoveVMNicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMNicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmNic",
		Method:             "POST",
		PathPattern:        "/remove-vm-nic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMToFolder remove Vm to folder API
*/
func (a *Client) RemoveVMToFolder(params *RemoveVMToFolderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveVMToFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMToFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmToFolder",
		Method:             "POST",
		PathPattern:        "/remove-vm-from-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMToFolderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMToFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmToFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartVM restart Vm API
*/
func (a *Client) RestartVM(params *RestartVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RestartVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestartVm",
		Method:             "POST",
		PathPattern:        "/restart-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestartVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestartVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeVM resume Vm API
*/
func (a *Client) ResumeVM(params *ResumeVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResumeVm",
		Method:             "POST",
		PathPattern:        "/resume-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResumeVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackVM rollback Vm API
*/
func (a *Client) RollbackVM(params *RollbackVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollbackVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RollbackVm",
		Method:             "POST",
		PathPattern:        "/rollback-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollbackVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RollbackVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutDownVM shut down Vm API
*/
func (a *Client) ShutDownVM(params *ShutDownVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ShutDownVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutDownVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShutDownVm",
		Method:             "POST",
		PathPattern:        "/shutdown-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShutDownVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutDownVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShutDownVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartVM start Vm API
*/
func (a *Client) StartVM(params *StartVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StartVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartVm",
		Method:             "POST",
		PathPattern:        "/start-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuspendVM suspend Vm API
*/
func (a *Client) SuspendVM(params *SuspendVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuspendVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuspendVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SuspendVm",
		Method:             "POST",
		PathPattern:        "/suspend-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuspendVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuspendVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SuspendVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVM update Vm API
*/
func (a *Client) UpdateVM(params *UpdateVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVm",
		Method:             "POST",
		PathPattern:        "/update-vm-basic-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMDisk update Vm disk API
*/
func (a *Client) UpdateVMDisk(params *UpdateVMDiskParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmDisk",
		Method:             "POST",
		PathPattern:        "/update-vm-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMDiskReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMNic update Vm nic API
*/
func (a *Client) UpdateVMNic(params *UpdateVMNicParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVMNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMNicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmNic",
		Method:             "POST",
		PathPattern:        "/update-vm-nic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMNicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
