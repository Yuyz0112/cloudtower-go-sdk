// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddLabelsToResources(params *AddLabelsToResourcesParams, opts ...ClientOption) (*AddLabelsToResourcesOK, error)

	AddVMCdRom(params *AddVMCdRomParams, opts ...ClientOption) (*AddVMCdRomOK, error)

	AddVMDisk(params *AddVMDiskParams, opts ...ClientOption) (*AddVMDiskOK, error)

	AddVMNic(params *AddVMNicParams, opts ...ClientOption) (*AddVMNicOK, error)

	AddVMToFolder(params *AddVMToFolderParams, opts ...ClientOption) (*AddVMToFolderOK, error)

	CloneIscsiLunFromSnapshot(params *CloneIscsiLunFromSnapshotParams, opts ...ClientOption) (*CloneIscsiLunFromSnapshotOK, error)

	CloneNvmfNamespaceFromSnapshot(params *CloneNvmfNamespaceFromSnapshotParams, opts ...ClientOption) (*CloneNvmfNamespaceFromSnapshotOK, error)

	CloneSnapshotGroup(params *CloneSnapshotGroupParams, opts ...ClientOption) (*CloneSnapshotGroupOK, error)

	CloneVM(params *CloneVMParams, opts ...ClientOption) (*CloneVMOK, error)

	CloneVMTemplateFromVM(params *CloneVMTemplateFromVMParams, opts ...ClientOption) (*CloneVMTemplateFromVMOK, error)

	ConnectCluster(params *ConnectClusterParams, opts ...ClientOption) (*ConnectClusterOK, error)

	ConvertVMTemplateFromVM(params *ConvertVMTemplateFromVMParams, opts ...ClientOption) (*ConvertVMTemplateFromVMOK, error)

	ConvertVMTemplateToVM(params *ConvertVMTemplateToVMParams, opts ...ClientOption) (*ConvertVMTemplateToVMOK, error)

	CreateBrickTopo(params *CreateBrickTopoParams, opts ...ClientOption) (*CreateBrickTopoOK, error)

	CreateClusterRecycleBinSetting(params *CreateClusterRecycleBinSettingParams, opts ...ClientOption) (*CreateClusterRecycleBinSettingOK, error)

	CreateConsistencyGroup(params *CreateConsistencyGroupParams, opts ...ClientOption) (*CreateConsistencyGroupOK, error)

	CreateConsistencyGroupSnapshot(params *CreateConsistencyGroupSnapshotParams, opts ...ClientOption) (*CreateConsistencyGroupSnapshotOK, error)

	CreateDatacenter(params *CreateDatacenterParams, opts ...ClientOption) (*CreateDatacenterOK, error)

	CreateEntityFilter(params *CreateEntityFilterParams, opts ...ClientOption) (*CreateEntityFilterOK, error)

	CreateGraph(params *CreateGraphParams, opts ...ClientOption) (*CreateGraphOK, error)

	CreateHost(params *CreateHostParams, opts ...ClientOption) (*CreateHostOK, error)

	CreateIscsiLun(params *CreateIscsiLunParams, opts ...ClientOption) (*CreateIscsiLunOK, error)

	CreateIscsiLunSnapshot(params *CreateIscsiLunSnapshotParams, opts ...ClientOption) (*CreateIscsiLunSnapshotOK, error)

	CreateIscsiTarget(params *CreateIscsiTargetParams, opts ...ClientOption) (*CreateIscsiTargetOK, error)

	CreateLabel(params *CreateLabelParams, opts ...ClientOption) (*CreateLabelOK, error)

	CreateNamespaceGroup(params *CreateNamespaceGroupParams, opts ...ClientOption) (*CreateNamespaceGroupOK, error)

	CreateNfsExport(params *CreateNfsExportParams, opts ...ClientOption) (*CreateNfsExportOK, error)

	CreateNvmfNamespace(params *CreateNvmfNamespaceParams, opts ...ClientOption) (*CreateNvmfNamespaceOK, error)

	CreateNvmfNamespaceSnapshot(params *CreateNvmfNamespaceSnapshotParams, opts ...ClientOption) (*CreateNvmfNamespaceSnapshotOK, error)

	CreateNvmfSubsystem(params *CreateNvmfSubsystemParams, opts ...ClientOption) (*CreateNvmfSubsystemOK, error)

	CreateOrganization(params *CreateOrganizationParams, opts ...ClientOption) (*CreateOrganizationOK, error)

	CreateRackTopo(params *CreateRackTopoParams, opts ...ClientOption) (*CreateRackTopoOK, error)

	CreateReportTemplate(params *CreateReportTemplateParams, opts ...ClientOption) (*CreateReportTemplateOK, error)

	CreateRole(params *CreateRoleParams, opts ...ClientOption) (*CreateRoleOK, error)

	CreateSnapshotPlan(params *CreateSnapshotPlanParams, opts ...ClientOption) (*CreateSnapshotPlanOK, error)

	CreateSnmpTransport(params *CreateSnmpTransportParams, opts ...ClientOption) (*CreateSnmpTransportOK, error)

	CreateSnmpTrapReceiver(params *CreateSnmpTrapReceiverParams, opts ...ClientOption) (*CreateSnmpTrapReceiverOK, error)

	CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserOK, error)

	CreateVds(params *CreateVdsParams, opts ...ClientOption) (*CreateVdsOK, error)

	CreateView(params *CreateViewParams, opts ...ClientOption) (*CreateViewOK, error)

	CreateVM(params *CreateVMParams, opts ...ClientOption) (*CreateVMOK, error)

	CreateVMFolder(params *CreateVMFolderParams, opts ...ClientOption) (*CreateVMFolderOK, error)

	CreateVMFromTemplate(params *CreateVMFromTemplateParams, opts ...ClientOption) (*CreateVMFromTemplateOK, error)

	CreateVMPlacementGroup(params *CreateVMPlacementGroupParams, opts ...ClientOption) (*CreateVMPlacementGroupOK, error)

	CreateVMSnapshot(params *CreateVMSnapshotParams, opts ...ClientOption) (*CreateVMSnapshotOK, error)

	CreateVMVlan(params *CreateVMVlanParams, opts ...ClientOption) (*CreateVMVlanOK, error)

	CreateVMVolume(params *CreateVMVolumeParams, opts ...ClientOption) (*CreateVMVolumeOK, error)

	DeleteBrickTopo(params *DeleteBrickTopoParams, opts ...ClientOption) (*DeleteBrickTopoOK, error)

	DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, error)

	DeleteClusterRecycleBinSetting(params *DeleteClusterRecycleBinSettingParams, opts ...ClientOption) (*DeleteClusterRecycleBinSettingOK, error)

	DeleteConsistencyGroup(params *DeleteConsistencyGroupParams, opts ...ClientOption) (*DeleteConsistencyGroupOK, error)

	DeleteConsistencyGroupSnapshot(params *DeleteConsistencyGroupSnapshotParams, opts ...ClientOption) (*DeleteConsistencyGroupSnapshotOK, error)

	DeleteDatacenter(params *DeleteDatacenterParams, opts ...ClientOption) (*DeleteDatacenterOK, error)

	DeleteElfImage(params *DeleteElfImageParams, opts ...ClientOption) (*DeleteElfImageOK, error)

	DeleteEntityFilter(params *DeleteEntityFilterParams, opts ...ClientOption) (*DeleteEntityFilterOK, error)

	DeleteGraph(params *DeleteGraphParams, opts ...ClientOption) (*DeleteGraphOK, error)

	DeleteIscsiLun(params *DeleteIscsiLunParams, opts ...ClientOption) (*DeleteIscsiLunOK, error)

	DeleteIscsiLunSnapshot(params *DeleteIscsiLunSnapshotParams, opts ...ClientOption) (*DeleteIscsiLunSnapshotOK, error)

	DeleteIscsiTarget(params *DeleteIscsiTargetParams, opts ...ClientOption) (*DeleteIscsiTargetOK, error)

	DeleteLabel(params *DeleteLabelParams, opts ...ClientOption) (*DeleteLabelOK, error)

	DeleteNamespaceGroup(params *DeleteNamespaceGroupParams, opts ...ClientOption) (*DeleteNamespaceGroupOK, error)

	DeleteNfsExport(params *DeleteNfsExportParams, opts ...ClientOption) (*DeleteNfsExportOK, error)

	DeleteNvmfNamespace(params *DeleteNvmfNamespaceParams, opts ...ClientOption) (*DeleteNvmfNamespaceOK, error)

	DeleteNvmfNamespaceSnapshot(params *DeleteNvmfNamespaceSnapshotParams, opts ...ClientOption) (*DeleteNvmfNamespaceSnapshotOK, error)

	DeleteNvmfSubsystem(params *DeleteNvmfSubsystemParams, opts ...ClientOption) (*DeleteNvmfSubsystemOK, error)

	DeleteOrganization(params *DeleteOrganizationParams, opts ...ClientOption) (*DeleteOrganizationOK, error)

	DeleteRackTopo(params *DeleteRackTopoParams, opts ...ClientOption) (*DeleteRackTopoOK, error)

	DeleteReportTemplate(params *DeleteReportTemplateParams, opts ...ClientOption) (*DeleteReportTemplateOK, error)

	DeleteRole(params *DeleteRoleParams, opts ...ClientOption) (*DeleteRoleOK, error)

	DeleteSnapshotGroup(params *DeleteSnapshotGroupParams, opts ...ClientOption) (*DeleteSnapshotGroupOK, error)

	DeleteSnapshotPlan(params *DeleteSnapshotPlanParams, opts ...ClientOption) (*DeleteSnapshotPlanOK, error)

	DeleteSnmpTransport(params *DeleteSnmpTransportParams, opts ...ClientOption) (*DeleteSnmpTransportOK, error)

	DeleteSnmpTrapReceiver(params *DeleteSnmpTrapReceiverParams, opts ...ClientOption) (*DeleteSnmpTrapReceiverOK, error)

	DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error)

	DeleteVds(params *DeleteVdsParams, opts ...ClientOption) (*DeleteVdsOK, error)

	DeleteView(params *DeleteViewParams, opts ...ClientOption) (*DeleteViewOK, error)

	DeleteVlan(params *DeleteVlanParams, opts ...ClientOption) (*DeleteVlanOK, error)

	DeleteVM(params *DeleteVMParams, opts ...ClientOption) (*DeleteVMOK, error)

	DeleteVMFolder(params *DeleteVMFolderParams, opts ...ClientOption) (*DeleteVMFolderOK, error)

	DeleteVMPlacementGroup(params *DeleteVMPlacementGroupParams, opts ...ClientOption) (*DeleteVMPlacementGroupOK, error)

	DeleteVMSnapshot(params *DeleteVMSnapshotParams, opts ...ClientOption) (*DeleteVMSnapshotOK, error)

	DeleteVMTemplateFromVM(params *DeleteVMTemplateFromVMParams, opts ...ClientOption) (*DeleteVMTemplateFromVMOK, error)

	DeleteVMVolumeFromVM(params *DeleteVMVolumeFromVMParams, opts ...ClientOption) (*DeleteVMVolumeFromVMOK, error)

	ExecuteSnapshotPlan(params *ExecuteSnapshotPlanParams, opts ...ClientOption) (*ExecuteSnapshotPlanOK, error)

	ForceRestartVM(params *ForceRestartVMParams, opts ...ClientOption) (*ForceRestartVMOK, error)

	ForceShutDownVM(params *ForceShutDownVMParams, opts ...ClientOption) (*ForceShutDownVMOK, error)

	GenerateFromReportTemplate(params *GenerateFromReportTemplateParams, opts ...ClientOption) (*GenerateFromReportTemplateOK, error)

	GetAlertNotifiers(params *GetAlertNotifiersParams, opts ...ClientOption) (*GetAlertNotifiersOK, error)

	GetAlertNotifiersConnection(params *GetAlertNotifiersConnectionParams, opts ...ClientOption) (*GetAlertNotifiersConnectionOK, error)

	GetAlertRules(params *GetAlertRulesParams, opts ...ClientOption) (*GetAlertRulesOK, error)

	GetAlertRulesConnection(params *GetAlertRulesConnectionParams, opts ...ClientOption) (*GetAlertRulesConnectionOK, error)

	GetAlerts(params *GetAlertsParams, opts ...ClientOption) (*GetAlertsOK, error)

	GetAlertsConnection(params *GetAlertsConnectionParams, opts ...ClientOption) (*GetAlertsConnectionOK, error)

	GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error)

	GetApplicationsConnection(params *GetApplicationsConnectionParams, opts ...ClientOption) (*GetApplicationsConnectionOK, error)

	GetBrickTopoes(params *GetBrickTopoesParams, opts ...ClientOption) (*GetBrickTopoesOK, error)

	GetBrickTopoesConnection(params *GetBrickTopoesConnectionParams, opts ...ClientOption) (*GetBrickTopoesConnectionOK, error)

	GetClusterImages(params *GetClusterImagesParams, opts ...ClientOption) (*GetClusterImagesOK, error)

	GetClusterImagesConnection(params *GetClusterImagesConnectionParams, opts ...ClientOption) (*GetClusterImagesConnectionOK, error)

	GetClusterSettingses(params *GetClusterSettingsesParams, opts ...ClientOption) (*GetClusterSettingsesOK, error)

	GetClusterSettingsesConnection(params *GetClusterSettingsesConnectionParams, opts ...ClientOption) (*GetClusterSettingsesConnectionOK, error)

	GetClusterTopoes(params *GetClusterTopoesParams, opts ...ClientOption) (*GetClusterTopoesOK, error)

	GetClusterTopoesConnection(params *GetClusterTopoesConnectionParams, opts ...ClientOption) (*GetClusterTopoesConnectionOK, error)

	GetClusterUpgradeHistories(params *GetClusterUpgradeHistoriesParams, opts ...ClientOption) (*GetClusterUpgradeHistoriesOK, error)

	GetClusterUpgradeHistoriesConnection(params *GetClusterUpgradeHistoriesConnectionParams, opts ...ClientOption) (*GetClusterUpgradeHistoriesConnectionOK, error)

	GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error)

	GetClustersConnection(params *GetClustersConnectionParams, opts ...ClientOption) (*GetClustersConnectionOK, error)

	GetConsistencyGroupSnapshots(params *GetConsistencyGroupSnapshotsParams, opts ...ClientOption) (*GetConsistencyGroupSnapshotsOK, error)

	GetConsistencyGroupSnapshotsConnection(params *GetConsistencyGroupSnapshotsConnectionParams, opts ...ClientOption) (*GetConsistencyGroupSnapshotsConnectionOK, error)

	GetConsistencyGroups(params *GetConsistencyGroupsParams, opts ...ClientOption) (*GetConsistencyGroupsOK, error)

	GetConsistencyGroupsConnection(params *GetConsistencyGroupsConnectionParams, opts ...ClientOption) (*GetConsistencyGroupsConnectionOK, error)

	GetDatacenters(params *GetDatacentersParams, opts ...ClientOption) (*GetDatacentersOK, error)

	GetDatacentersConnection(params *GetDatacentersConnectionParams, opts ...ClientOption) (*GetDatacentersConnectionOK, error)

	GetDeploys(params *GetDeploysParams, opts ...ClientOption) (*GetDeploysOK, error)

	GetDeploysConnection(params *GetDeploysConnectionParams, opts ...ClientOption) (*GetDeploysConnectionOK, error)

	GetDiscoverHosts(params *GetDiscoverHostsParams, opts ...ClientOption) (*GetDiscoverHostsOK, error)

	GetDisks(params *GetDisksParams, opts ...ClientOption) (*GetDisksOK, error)

	GetDisksConnection(params *GetDisksConnectionParams, opts ...ClientOption) (*GetDisksConnectionOK, error)

	GetElfDataStores(params *GetElfDataStoresParams, opts ...ClientOption) (*GetElfDataStoresOK, error)

	GetElfDataStoresConnection(params *GetElfDataStoresConnectionParams, opts ...ClientOption) (*GetElfDataStoresConnectionOK, error)

	GetElfImages(params *GetElfImagesParams, opts ...ClientOption) (*GetElfImagesOK, error)

	GetElfImagesConnection(params *GetElfImagesConnectionParams, opts ...ClientOption) (*GetElfImagesConnectionOK, error)

	GetElfStoragePolicies(params *GetElfStoragePoliciesParams, opts ...ClientOption) (*GetElfStoragePoliciesOK, error)

	GetElfStoragePoliciesConnection(params *GetElfStoragePoliciesConnectionParams, opts ...ClientOption) (*GetElfStoragePoliciesConnectionOK, error)

	GetEntityFilters(params *GetEntityFiltersParams, opts ...ClientOption) (*GetEntityFiltersOK, error)

	GetEntityFiltersConnection(params *GetEntityFiltersConnectionParams, opts ...ClientOption) (*GetEntityFiltersConnectionOK, error)

	GetGlobalAlertRules(params *GetGlobalAlertRulesParams, opts ...ClientOption) (*GetGlobalAlertRulesOK, error)

	GetGlobalAlertRulesConnection(params *GetGlobalAlertRulesConnectionParams, opts ...ClientOption) (*GetGlobalAlertRulesConnectionOK, error)

	GetGlobalSettingses(params *GetGlobalSettingsesParams, opts ...ClientOption) (*GetGlobalSettingsesOK, error)

	GetGlobalSettingsesConnection(params *GetGlobalSettingsesConnectionParams, opts ...ClientOption) (*GetGlobalSettingsesConnectionOK, error)

	GetGraphs(params *GetGraphsParams, opts ...ClientOption) (*GetGraphsOK, error)

	GetGraphsConnection(params *GetGraphsConnectionParams, opts ...ClientOption) (*GetGraphsConnectionOK, error)

	GetHosts(params *GetHostsParams, opts ...ClientOption) (*GetHostsOK, error)

	GetHostsConnection(params *GetHostsConnectionParams, opts ...ClientOption) (*GetHostsConnectionOK, error)

	GetImagesConnector(params *GetImagesConnectorParams, opts ...ClientOption) (*GetImagesConnectorOK, error)

	GetIpmis(params *GetIpmisParams, opts ...ClientOption) (*GetIpmisOK, error)

	GetIscsiConnections(params *GetIscsiConnectionsParams, opts ...ClientOption) (*GetIscsiConnectionsOK, error)

	GetIscsiConnectionsConnection(params *GetIscsiConnectionsConnectionParams, opts ...ClientOption) (*GetIscsiConnectionsConnectionOK, error)

	GetIscsiLunSnapshots(params *GetIscsiLunSnapshotsParams, opts ...ClientOption) (*GetIscsiLunSnapshotsOK, error)

	GetIscsiLunSnapshotsConnection(params *GetIscsiLunSnapshotsConnectionParams, opts ...ClientOption) (*GetIscsiLunSnapshotsConnectionOK, error)

	GetIscsiLuns(params *GetIscsiLunsParams, opts ...ClientOption) (*GetIscsiLunsOK, error)

	GetIscsiLunsConnection(params *GetIscsiLunsConnectionParams, opts ...ClientOption) (*GetIscsiLunsConnectionOK, error)

	GetIscsiTargets(params *GetIscsiTargetsParams, opts ...ClientOption) (*GetIscsiTargetsOK, error)

	GetIscsiTargetsConnection(params *GetIscsiTargetsConnectionParams, opts ...ClientOption) (*GetIscsiTargetsConnectionOK, error)

	GetLabels(params *GetLabelsParams, opts ...ClientOption) (*GetLabelsOK, error)

	GetLabelsConnection(params *GetLabelsConnectionParams, opts ...ClientOption) (*GetLabelsConnectionOK, error)

	GetLicenses(params *GetLicensesParams, opts ...ClientOption) (*GetLicensesOK, error)

	GetLicensesConnection(params *GetLicensesConnectionParams, opts ...ClientOption) (*GetLicensesConnectionOK, error)

	GetLogCollections(params *GetLogCollectionsParams, opts ...ClientOption) (*GetLogCollectionsOK, error)

	GetLogCollectionsConnection(params *GetLogCollectionsConnectionParams, opts ...ClientOption) (*GetLogCollectionsConnectionOK, error)

	GetMigrateTransmitters(params *GetMigrateTransmittersParams, opts ...ClientOption) (*GetMigrateTransmittersOK, error)

	GetMigrateTransmittersConnection(params *GetMigrateTransmittersConnectionParams, opts ...ClientOption) (*GetMigrateTransmittersConnectionOK, error)

	GetNamespaceGroups(params *GetNamespaceGroupsParams, opts ...ClientOption) (*GetNamespaceGroupsOK, error)

	GetNamespaceGroupsConnection(params *GetNamespaceGroupsConnectionParams, opts ...ClientOption) (*GetNamespaceGroupsConnectionOK, error)

	GetNfsExports(params *GetNfsExportsParams, opts ...ClientOption) (*GetNfsExportsOK, error)

	GetNfsExportsConnection(params *GetNfsExportsConnectionParams, opts ...ClientOption) (*GetNfsExportsConnectionOK, error)

	GetNfsInodes(params *GetNfsInodesParams, opts ...ClientOption) (*GetNfsInodesOK, error)

	GetNfsInodesConnection(params *GetNfsInodesConnectionParams, opts ...ClientOption) (*GetNfsInodesConnectionOK, error)

	GetNics(params *GetNicsParams, opts ...ClientOption) (*GetNicsOK, error)

	GetNicsConnection(params *GetNicsConnectionParams, opts ...ClientOption) (*GetNicsConnectionOK, error)

	GetNodeTopoes(params *GetNodeTopoesParams, opts ...ClientOption) (*GetNodeTopoesOK, error)

	GetNodeTopoesConnection(params *GetNodeTopoesConnectionParams, opts ...ClientOption) (*GetNodeTopoesConnectionOK, error)

	GetNvmfNamespaceSnapshots(params *GetNvmfNamespaceSnapshotsParams, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsOK, error)

	GetNvmfNamespaceSnapshotsConnection(params *GetNvmfNamespaceSnapshotsConnectionParams, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsConnectionOK, error)

	GetNvmfNamespaces(params *GetNvmfNamespacesParams, opts ...ClientOption) (*GetNvmfNamespacesOK, error)

	GetNvmfNamespacesConnection(params *GetNvmfNamespacesConnectionParams, opts ...ClientOption) (*GetNvmfNamespacesConnectionOK, error)

	GetNvmfSubsystems(params *GetNvmfSubsystemsParams, opts ...ClientOption) (*GetNvmfSubsystemsOK, error)

	GetNvmfSubsystemsConnection(params *GetNvmfSubsystemsConnectionParams, opts ...ClientOption) (*GetNvmfSubsystemsConnectionOK, error)

	GetOrganizations(params *GetOrganizationsParams, opts ...ClientOption) (*GetOrganizationsOK, error)

	GetOrganizationsConnection(params *GetOrganizationsConnectionParams, opts ...ClientOption) (*GetOrganizationsConnectionOK, error)

	GetPmemDimms(params *GetPmemDimmsParams, opts ...ClientOption) (*GetPmemDimmsOK, error)

	GetPmemDimmsConnection(params *GetPmemDimmsConnectionParams, opts ...ClientOption) (*GetPmemDimmsConnectionOK, error)

	GetRackTopoes(params *GetRackTopoesParams, opts ...ClientOption) (*GetRackTopoesOK, error)

	GetRackTopoesConnection(params *GetRackTopoesConnectionParams, opts ...ClientOption) (*GetRackTopoesConnectionOK, error)

	GetReportTasks(params *GetReportTasksParams, opts ...ClientOption) (*GetReportTasksOK, error)

	GetReportTasksConnection(params *GetReportTasksConnectionParams, opts ...ClientOption) (*GetReportTasksConnectionOK, error)

	GetReportTemplates(params *GetReportTemplatesParams, opts ...ClientOption) (*GetReportTemplatesOK, error)

	GetReportTemplatesConnection(params *GetReportTemplatesConnectionParams, opts ...ClientOption) (*GetReportTemplatesConnectionOK, error)

	GetSnapshotGroups(params *GetSnapshotGroupsParams, opts ...ClientOption) (*GetSnapshotGroupsOK, error)

	GetSnapshotGroupsConnection(params *GetSnapshotGroupsConnectionParams, opts ...ClientOption) (*GetSnapshotGroupsConnectionOK, error)

	GetSnapshotPlanTasks(params *GetSnapshotPlanTasksParams, opts ...ClientOption) (*GetSnapshotPlanTasksOK, error)

	GetSnapshotPlanTasksConnection(params *GetSnapshotPlanTasksConnectionParams, opts ...ClientOption) (*GetSnapshotPlanTasksConnectionOK, error)

	GetSnapshotPlans(params *GetSnapshotPlansParams, opts ...ClientOption) (*GetSnapshotPlansOK, error)

	GetSnapshotPlansConnection(params *GetSnapshotPlansConnectionParams, opts ...ClientOption) (*GetSnapshotPlansConnectionOK, error)

	GetSnmpTransports(params *GetSnmpTransportsParams, opts ...ClientOption) (*GetSnmpTransportsOK, error)

	GetSnmpTransportsConnection(params *GetSnmpTransportsConnectionParams, opts ...ClientOption) (*GetSnmpTransportsConnectionOK, error)

	GetSnmpTrapReceivers(params *GetSnmpTrapReceiversParams, opts ...ClientOption) (*GetSnmpTrapReceiversOK, error)

	GetSnmpTrapReceiversConnection(params *GetSnmpTrapReceiversConnectionParams, opts ...ClientOption) (*GetSnmpTrapReceiversConnectionOK, error)

	GetStoragePoliciesConnector(params *GetStoragePoliciesConnectorParams, opts ...ClientOption) (*GetStoragePoliciesConnectorOK, error)

	GetSvtImages(params *GetSvtImagesParams, opts ...ClientOption) (*GetSvtImagesOK, error)

	GetSvtImagesConnection(params *GetSvtImagesConnectionParams, opts ...ClientOption) (*GetSvtImagesConnectionOK, error)

	GetSystemAuditLogs(params *GetSystemAuditLogsParams, opts ...ClientOption) (*GetSystemAuditLogsOK, error)

	GetSystemAuditLogsConnection(params *GetSystemAuditLogsConnectionParams, opts ...ClientOption) (*GetSystemAuditLogsConnectionOK, error)

	GetTasks(params *GetTasksParams, opts ...ClientOption) (*GetTasksOK, error)

	GetTasksConnection(params *GetTasksConnectionParams, opts ...ClientOption) (*GetTasksConnectionOK, error)

	GetUploadTasks(params *GetUploadTasksParams, opts ...ClientOption) (*GetUploadTasksOK, error)

	GetUploadTasksConnection(params *GetUploadTasksConnectionParams, opts ...ClientOption) (*GetUploadTasksConnectionOK, error)

	GetUsbDevices(params *GetUsbDevicesParams, opts ...ClientOption) (*GetUsbDevicesOK, error)

	GetUsbDevicesConnection(params *GetUsbDevicesConnectionParams, opts ...ClientOption) (*GetUsbDevicesConnectionOK, error)

	GetUserAuditLogs(params *GetUserAuditLogsParams, opts ...ClientOption) (*GetUserAuditLogsOK, error)

	GetUserAuditLogsConnection(params *GetUserAuditLogsConnectionParams, opts ...ClientOption) (*GetUserAuditLogsConnectionOK, error)

	GetUserRoleNexts(params *GetUserRoleNextsParams, opts ...ClientOption) (*GetUserRoleNextsOK, error)

	GetUserRoleNextsConnection(params *GetUserRoleNextsConnectionParams, opts ...ClientOption) (*GetUserRoleNextsConnectionOK, error)

	GetUsers(params *GetUsersParams, opts ...ClientOption) (*GetUsersOK, error)

	GetUsersConnection(params *GetUsersConnectionParams, opts ...ClientOption) (*GetUsersConnectionOK, error)

	GetVcenterAccounts(params *GetVcenterAccountsParams, opts ...ClientOption) (*GetVcenterAccountsOK, error)

	GetVcenterAccountsConnection(params *GetVcenterAccountsConnectionParams, opts ...ClientOption) (*GetVcenterAccountsConnectionOK, error)

	GetVdses(params *GetVdsesParams, opts ...ClientOption) (*GetVdsesOK, error)

	GetVdsesConnection(params *GetVdsesConnectionParams, opts ...ClientOption) (*GetVdsesConnectionOK, error)

	GetViews(params *GetViewsParams, opts ...ClientOption) (*GetViewsOK, error)

	GetViewsConnection(params *GetViewsConnectionParams, opts ...ClientOption) (*GetViewsConnectionOK, error)

	GetVlans(params *GetVlansParams, opts ...ClientOption) (*GetVlansOK, error)

	GetVlansConnection(params *GetVlansConnectionParams, opts ...ClientOption) (*GetVlansConnectionOK, error)

	GetVMDisks(params *GetVMDisksParams, opts ...ClientOption) (*GetVMDisksOK, error)

	GetVMDisksConnection(params *GetVMDisksConnectionParams, opts ...ClientOption) (*GetVMDisksConnectionOK, error)

	GetVMEntityFilterResults(params *GetVMEntityFilterResultsParams, opts ...ClientOption) (*GetVMEntityFilterResultsOK, error)

	GetVMEntityFilterResultsConnection(params *GetVMEntityFilterResultsConnectionParams, opts ...ClientOption) (*GetVMEntityFilterResultsConnectionOK, error)

	GetVMFolders(params *GetVMFoldersParams, opts ...ClientOption) (*GetVMFoldersOK, error)

	GetVMFoldersConnection(params *GetVMFoldersConnectionParams, opts ...ClientOption) (*GetVMFoldersConnectionOK, error)

	GetVMNics(params *GetVMNicsParams, opts ...ClientOption) (*GetVMNicsOK, error)

	GetVMNicsConnection(params *GetVMNicsConnectionParams, opts ...ClientOption) (*GetVMNicsConnectionOK, error)

	GetVMPlacementGroups(params *GetVMPlacementGroupsParams, opts ...ClientOption) (*GetVMPlacementGroupsOK, error)

	GetVMPlacementGroupsConnection(params *GetVMPlacementGroupsConnectionParams, opts ...ClientOption) (*GetVMPlacementGroupsConnectionOK, error)

	GetVMSnapshots(params *GetVMSnapshotsParams, opts ...ClientOption) (*GetVMSnapshotsOK, error)

	GetVMSnapshotsConnection(params *GetVMSnapshotsConnectionParams, opts ...ClientOption) (*GetVMSnapshotsConnectionOK, error)

	GetVMTemplates(params *GetVMTemplatesParams, opts ...ClientOption) (*GetVMTemplatesOK, error)

	GetVMTemplatesConnection(params *GetVMTemplatesConnectionParams, opts ...ClientOption) (*GetVMTemplatesConnectionOK, error)

	GetVMVolumes(params *GetVMVolumesParams, opts ...ClientOption) (*GetVMVolumesOK, error)

	GetVMVolumesConnection(params *GetVMVolumesConnectionParams, opts ...ClientOption) (*GetVMVolumesConnectionOK, error)

	GetVms(params *GetVmsParams, opts ...ClientOption) (*GetVmsOK, error)

	GetVmsConnection(params *GetVmsConnectionParams, opts ...ClientOption) (*GetVmsConnectionOK, error)

	GetVsphereEsxiAccounts(params *GetVsphereEsxiAccountsParams, opts ...ClientOption) (*GetVsphereEsxiAccountsOK, error)

	GetVsphereEsxiAccountsConnection(params *GetVsphereEsxiAccountsConnectionParams, opts ...ClientOption) (*GetVsphereEsxiAccountsConnectionOK, error)

	GetWitnesses(params *GetWitnessesParams, opts ...ClientOption) (*GetWitnessesOK, error)

	GetWitnessesConnection(params *GetWitnessesConnectionParams, opts ...ClientOption) (*GetWitnessesConnectionOK, error)

	GetZoneTopoes(params *GetZoneTopoesParams, opts ...ClientOption) (*GetZoneTopoesOK, error)

	GetZoneTopoesConnection(params *GetZoneTopoesConnectionParams, opts ...ClientOption) (*GetZoneTopoesConnectionOK, error)

	GetZones(params *GetZonesParams, opts ...ClientOption) (*GetZonesOK, error)

	GetZonesConnection(params *GetZonesConnectionParams, opts ...ClientOption) (*GetZonesConnectionOK, error)

	InstallVmtools(params *InstallVmtoolsParams, opts ...ClientOption) (*InstallVmtoolsOK, error)

	KeepSnapshotGroup(params *KeepSnapshotGroupParams, opts ...ClientOption) (*KeepSnapshotGroupOK, error)

	Login(params *LoginParams, opts ...ClientOption) (*LoginOK, error)

	MigRateVM(params *MigRateVMParams, opts ...ClientOption) (*MigRateVMOK, error)

	MountDisk(params *MountDiskParams, opts ...ClientOption) (*MountDiskOK, error)

	MoveBrickTopo(params *MoveBrickTopoParams, opts ...ClientOption) (*MoveBrickTopoOK, error)

	MoveVMToRecycleBin(params *MoveVMToRecycleBinParams, opts ...ClientOption) (*MoveVMToRecycleBinOK, error)

	RebuildVM(params *RebuildVMParams, opts ...ClientOption) (*RebuildVMOK, error)

	RecoverVMFromRecycleBin(params *RecoverVMFromRecycleBinParams, opts ...ClientOption) (*RecoverVMFromRecycleBinOK, error)

	RemoveLabelsFromResources(params *RemoveLabelsFromResourcesParams, opts ...ClientOption) (*RemoveLabelsFromResourcesOK, error)

	RemoveVMCdRom(params *RemoveVMCdRomParams, opts ...ClientOption) (*RemoveVMCdRomOK, error)

	RemoveVMDisk(params *RemoveVMDiskParams, opts ...ClientOption) (*RemoveVMDiskOK, error)

	RemoveVMNic(params *RemoveVMNicParams, opts ...ClientOption) (*RemoveVMNicOK, error)

	RemoveVMToFolder(params *RemoveVMToFolderParams, opts ...ClientOption) (*RemoveVMToFolderOK, error)

	ResolveAlert(params *ResolveAlertParams, opts ...ClientOption) (*ResolveAlertOK, error)

	RestartVM(params *RestartVMParams, opts ...ClientOption) (*RestartVMOK, error)

	ResumeSnapshotPlan(params *ResumeSnapshotPlanParams, opts ...ClientOption) (*ResumeSnapshotPlanOK, error)

	ResumeVM(params *ResumeVMParams, opts ...ClientOption) (*ResumeVMOK, error)

	RollbackIscsiLunFromSnapshot(params *RollbackIscsiLunFromSnapshotParams, opts ...ClientOption) (*RollbackIscsiLunFromSnapshotOK, error)

	RollbackNvmfNamespaceFromSnapshot(params *RollbackNvmfNamespaceFromSnapshotParams, opts ...ClientOption) (*RollbackNvmfNamespaceFromSnapshotOK, error)

	RollbackSnapshotGroup(params *RollbackSnapshotGroupParams, opts ...ClientOption) (*RollbackSnapshotGroupOK, error)

	RollbackVM(params *RollbackVMParams, opts ...ClientOption) (*RollbackVMOK, error)

	ShutDownVM(params *ShutDownVMParams, opts ...ClientOption) (*ShutDownVMOK, error)

	StartVM(params *StartVMParams, opts ...ClientOption) (*StartVMOK, error)

	SuspendSnapshotPlan(params *SuspendSnapshotPlanParams, opts ...ClientOption) (*SuspendSnapshotPlanOK, error)

	SuspendVM(params *SuspendVMParams, opts ...ClientOption) (*SuspendVMOK, error)

	TriggerDiskBlink(params *TriggerDiskBlinkParams, opts ...ClientOption) (*TriggerDiskBlinkOK, error)

	UnmountDisk(params *UnmountDiskParams, opts ...ClientOption) (*UnmountDiskOK, error)

	UnmountUsbDevice(params *UnmountUsbDeviceParams, opts ...ClientOption) (*UnmountUsbDeviceOK, error)

	UpdateBrickTopo(params *UpdateBrickTopoParams, opts ...ClientOption) (*UpdateBrickTopoOK, error)

	UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, error)

	UpdateClusterLicense(params *UpdateClusterLicenseParams, opts ...ClientOption) (*UpdateClusterLicenseOK, error)

	UpdateClusterRecycleBinSetting(params *UpdateClusterRecycleBinSettingParams, opts ...ClientOption) (*UpdateClusterRecycleBinSettingOK, error)

	UpdateConsistencyGroup(params *UpdateConsistencyGroupParams, opts ...ClientOption) (*UpdateConsistencyGroupOK, error)

	UpdateConsistencyGroupSnapshot(params *UpdateConsistencyGroupSnapshotParams, opts ...ClientOption) (*UpdateConsistencyGroupSnapshotOK, error)

	UpdateCustomizeAlertRule(params *UpdateCustomizeAlertRuleParams, opts ...ClientOption) (*UpdateCustomizeAlertRuleOK, error)

	UpdateDatacenter(params *UpdateDatacenterParams, opts ...ClientOption) (*UpdateDatacenterOK, error)

	UpdateDeploy(params *UpdateDeployParams, opts ...ClientOption) (*UpdateDeployOK, error)

	UpdateElfImage(params *UpdateElfImageParams, opts ...ClientOption) (*UpdateElfImageOK, error)

	UpdateEntityFilter(params *UpdateEntityFilterParams, opts ...ClientOption) (*UpdateEntityFilterOK, error)

	UpdateGlobalAlertRule(params *UpdateGlobalAlertRuleParams, opts ...ClientOption) (*UpdateGlobalAlertRuleOK, error)

	UpdateGlobalRecycleBinSetting(params *UpdateGlobalRecycleBinSettingParams, opts ...ClientOption) (*UpdateGlobalRecycleBinSettingOK, error)

	UpdateGraph(params *UpdateGraphParams, opts ...ClientOption) (*UpdateGraphOK, error)

	UpdateHost(params *UpdateHostParams, opts ...ClientOption) (*UpdateHostOK, error)

	UpdateIscsiLun(params *UpdateIscsiLunParams, opts ...ClientOption) (*UpdateIscsiLunOK, error)

	UpdateIscsiTarget(params *UpdateIscsiTargetParams, opts ...ClientOption) (*UpdateIscsiTargetOK, error)

	UpdateLabel(params *UpdateLabelParams, opts ...ClientOption) (*UpdateLabelOK, error)

	UpdateManagementVlan(params *UpdateManagementVlanParams, opts ...ClientOption) (*UpdateManagementVlanOK, error)

	UpdateMigrationVlan(params *UpdateMigrationVlanParams, opts ...ClientOption) (*UpdateMigrationVlanOK, error)

	UpdateNamespaceGroup(params *UpdateNamespaceGroupParams, opts ...ClientOption) (*UpdateNamespaceGroupOK, error)

	UpdateNfsExport(params *UpdateNfsExportParams, opts ...ClientOption) (*UpdateNfsExportOK, error)

	UpdateNic(params *UpdateNicParams, opts ...ClientOption) (*UpdateNicOK, error)

	UpdateNodeTopo(params *UpdateNodeTopoParams, opts ...ClientOption) (*UpdateNodeTopoOK, error)

	UpdateNvmfNamespace(params *UpdateNvmfNamespaceParams, opts ...ClientOption) (*UpdateNvmfNamespaceOK, error)

	UpdateNvmfSubsystem(params *UpdateNvmfSubsystemParams, opts ...ClientOption) (*UpdateNvmfSubsystemOK, error)

	UpdateOrganization(params *UpdateOrganizationParams, opts ...ClientOption) (*UpdateOrganizationOK, error)

	UpdateRackTopo(params *UpdateRackTopoParams, opts ...ClientOption) (*UpdateRackTopoOK, error)

	UpdateReportTemplate(params *UpdateReportTemplateParams, opts ...ClientOption) (*UpdateReportTemplateOK, error)

	UpdateRole(params *UpdateRoleParams, opts ...ClientOption) (*UpdateRoleOK, error)

	UpdateSnapshotPlan(params *UpdateSnapshotPlanParams, opts ...ClientOption) (*UpdateSnapshotPlanOK, error)

	UpdateSnmpTransport(params *UpdateSnmpTransportParams, opts ...ClientOption) (*UpdateSnmpTransportOK, error)

	UpdateSnmpTrapReceiver(params *UpdateSnmpTrapReceiverParams, opts ...ClientOption) (*UpdateSnmpTrapReceiverOK, error)

	UpdateUsbDevice(params *UpdateUsbDeviceParams, opts ...ClientOption) (*UpdateUsbDeviceOK, error)

	UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserOK, error)

	UpdateVds(params *UpdateVdsParams, opts ...ClientOption) (*UpdateVdsOK, error)

	UpdateView(params *UpdateViewParams, opts ...ClientOption) (*UpdateViewOK, error)

	UpdateVlan(params *UpdateVlanParams, opts ...ClientOption) (*UpdateVlanOK, error)

	UpdateVM(params *UpdateVMParams, opts ...ClientOption) (*UpdateVMOK, error)

	UpdateVMDisk(params *UpdateVMDiskParams, opts ...ClientOption) (*UpdateVMDiskOK, error)

	UpdateVMFolder(params *UpdateVMFolderParams, opts ...ClientOption) (*UpdateVMFolderOK, error)

	UpdateVMNic(params *UpdateVMNicParams, opts ...ClientOption) (*UpdateVMNicOK, error)

	UpdateVMPlacementGroup(params *UpdateVMPlacementGroupParams, opts ...ClientOption) (*UpdateVMPlacementGroupOK, error)

	UpdateVMTemplateFromVM(params *UpdateVMTemplateFromVMParams, opts ...ClientOption) (*UpdateVMTemplateFromVMOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddLabelsToResources add labels to resources API
*/
func (a *Client) AddLabelsToResources(params *AddLabelsToResourcesParams, opts ...ClientOption) (*AddLabelsToResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLabelsToResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddLabelsToResources",
		Method:             "POST",
		PathPattern:        "/add-labels-to-resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddLabelsToResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLabelsToResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddLabelsToResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVMCdRom add Vm cd rom API
*/
func (a *Client) AddVMCdRom(params *AddVMCdRomParams, opts ...ClientOption) (*AddVMCdRomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMCdRomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmCdRom",
		Method:             "POST",
		PathPattern:        "/add-vm-cd-rom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMCdRomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMCdRomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmCdRom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVMDisk add Vm disk API
*/
func (a *Client) AddVMDisk(params *AddVMDiskParams, opts ...ClientOption) (*AddVMDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmDisk",
		Method:             "POST",
		PathPattern:        "/add-vm-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVMNic add Vm nic API
*/
func (a *Client) AddVMNic(params *AddVMNicParams, opts ...ClientOption) (*AddVMNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMNicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmNic",
		Method:             "POST",
		PathPattern:        "/add-vm-nic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMNicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVMToFolder add Vm to folder API
*/
func (a *Client) AddVMToFolder(params *AddVMToFolderParams, opts ...ClientOption) (*AddVMToFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVMToFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddVmToFolder",
		Method:             "POST",
		PathPattern:        "/add-vm-to-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVMToFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVMToFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddVmToFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneIscsiLunFromSnapshot clone iscsi lun from snapshot API
*/
func (a *Client) CloneIscsiLunFromSnapshot(params *CloneIscsiLunFromSnapshotParams, opts ...ClientOption) (*CloneIscsiLunFromSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneIscsiLunFromSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneIscsiLunFromSnapshot",
		Method:             "POST",
		PathPattern:        "/clone-iscsi-lun-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneIscsiLunFromSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneIscsiLunFromSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneIscsiLunFromSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneNvmfNamespaceFromSnapshot clone nvmf namespace from snapshot API
*/
func (a *Client) CloneNvmfNamespaceFromSnapshot(params *CloneNvmfNamespaceFromSnapshotParams, opts ...ClientOption) (*CloneNvmfNamespaceFromSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneNvmfNamespaceFromSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneNvmfNamespaceFromSnapshot",
		Method:             "POST",
		PathPattern:        "/clone-nvmf-namespace-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneNvmfNamespaceFromSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneNvmfNamespaceFromSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneNvmfNamespaceFromSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneSnapshotGroup clone snapshot group API
*/
func (a *Client) CloneSnapshotGroup(params *CloneSnapshotGroupParams, opts ...ClientOption) (*CloneSnapshotGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneSnapshotGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneSnapshotGroup",
		Method:             "POST",
		PathPattern:        "/clone-snapshot-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneSnapshotGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneSnapshotGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneSnapshotGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneVM clone Vm API
*/
func (a *Client) CloneVM(params *CloneVMParams, opts ...ClientOption) (*CloneVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneVm",
		Method:             "POST",
		PathPattern:        "/clone-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CloneVMTemplateFromVM clone Vm template from Vm API
*/
func (a *Client) CloneVMTemplateFromVM(params *CloneVMTemplateFromVMParams, opts ...ClientOption) (*CloneVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/clone-vm-template-from-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConnectCluster connect cluster API
*/
func (a *Client) ConnectCluster(params *ConnectClusterParams, opts ...ClientOption) (*ConnectClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectCluster",
		Method:             "POST",
		PathPattern:        "/connect-cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConnectClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConnectCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConvertVMTemplateFromVM convert Vm template from Vm API
*/
func (a *Client) ConvertVMTemplateFromVM(params *ConvertVMTemplateFromVMParams, opts ...ClientOption) (*ConvertVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConvertVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConvertVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/convert-vm-template-from-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConvertVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConvertVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConvertVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConvertVMTemplateToVM convert Vm template to Vm API
*/
func (a *Client) ConvertVMTemplateToVM(params *ConvertVMTemplateToVMParams, opts ...ClientOption) (*ConvertVMTemplateToVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConvertVMTemplateToVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConvertVmTemplateToVm",
		Method:             "POST",
		PathPattern:        "/convert-vm-template-to-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConvertVMTemplateToVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConvertVMTemplateToVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConvertVmTemplateToVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBrickTopo create brick topo API
*/
func (a *Client) CreateBrickTopo(params *CreateBrickTopoParams, opts ...ClientOption) (*CreateBrickTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBrickTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateBrickTopo",
		Method:             "POST",
		PathPattern:        "/create-brick-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBrickTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBrickTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBrickTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateClusterRecycleBinSetting create cluster recycle bin setting API
*/
func (a *Client) CreateClusterRecycleBinSetting(params *CreateClusterRecycleBinSettingParams, opts ...ClientOption) (*CreateClusterRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateClusterRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/create-cluster-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterRecycleBinSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateClusterRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateConsistencyGroup create consistency group API
*/
func (a *Client) CreateConsistencyGroup(params *CreateConsistencyGroupParams, opts ...ClientOption) (*CreateConsistencyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConsistencyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateConsistencyGroup",
		Method:             "POST",
		PathPattern:        "/create-consistency-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConsistencyGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConsistencyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateConsistencyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateConsistencyGroupSnapshot create consistency group snapshot API
*/
func (a *Client) CreateConsistencyGroupSnapshot(params *CreateConsistencyGroupSnapshotParams, opts ...ClientOption) (*CreateConsistencyGroupSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConsistencyGroupSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateConsistencyGroupSnapshot",
		Method:             "POST",
		PathPattern:        "/create-consistency-snapshot-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConsistencyGroupSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConsistencyGroupSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateConsistencyGroupSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDatacenter create datacenter API
*/
func (a *Client) CreateDatacenter(params *CreateDatacenterParams, opts ...ClientOption) (*CreateDatacenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatacenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDatacenter",
		Method:             "POST",
		PathPattern:        "/create-datacenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDatacenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDatacenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDatacenter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateEntityFilter create entity filter API
*/
func (a *Client) CreateEntityFilter(params *CreateEntityFilterParams, opts ...ClientOption) (*CreateEntityFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEntityFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEntityFilter",
		Method:             "POST",
		PathPattern:        "/create-entity-filter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEntityFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEntityFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateEntityFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGraph create graph API
*/
func (a *Client) CreateGraph(params *CreateGraphParams, opts ...ClientOption) (*CreateGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGraphParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateGraph",
		Method:             "POST",
		PathPattern:        "/create-graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGraphReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGraphOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateGraph: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateHost create host API
*/
func (a *Client) CreateHost(params *CreateHostParams, opts ...ClientOption) (*CreateHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateHost",
		Method:             "POST",
		PathPattern:        "/create-host",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateIscsiLun create iscsi lun API
*/
func (a *Client) CreateIscsiLun(params *CreateIscsiLunParams, opts ...ClientOption) (*CreateIscsiLunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIscsiLunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIscsiLun",
		Method:             "POST",
		PathPattern:        "/create-iscsi-lun",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateIscsiLunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIscsiLunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIscsiLun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateIscsiLunSnapshot create iscsi lun snapshot API
*/
func (a *Client) CreateIscsiLunSnapshot(params *CreateIscsiLunSnapshotParams, opts ...ClientOption) (*CreateIscsiLunSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIscsiLunSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIscsiLunSnapshot",
		Method:             "POST",
		PathPattern:        "/create-iscsi-lun-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateIscsiLunSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIscsiLunSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIscsiLunSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateIscsiTarget create iscsi target API
*/
func (a *Client) CreateIscsiTarget(params *CreateIscsiTargetParams, opts ...ClientOption) (*CreateIscsiTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIscsiTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateIscsiTarget",
		Method:             "POST",
		PathPattern:        "/create-iscsi-target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateIscsiTargetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIscsiTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateIscsiTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateLabel create label API
*/
func (a *Client) CreateLabel(params *CreateLabelParams, opts ...ClientOption) (*CreateLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateLabel",
		Method:             "POST",
		PathPattern:        "/create-label",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNamespaceGroup create namespace group API
*/
func (a *Client) CreateNamespaceGroup(params *CreateNamespaceGroupParams, opts ...ClientOption) (*CreateNamespaceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNamespaceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNamespaceGroup",
		Method:             "POST",
		PathPattern:        "/create-namespace-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNamespaceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNamespaceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNamespaceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNfsExport create nfs export API
*/
func (a *Client) CreateNfsExport(params *CreateNfsExportParams, opts ...ClientOption) (*CreateNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNfsExport",
		Method:             "POST",
		PathPattern:        "/create-nfs-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNfsExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNfsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNfsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNvmfNamespace create nvmf namespace API
*/
func (a *Client) CreateNvmfNamespace(params *CreateNvmfNamespaceParams, opts ...ClientOption) (*CreateNvmfNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNvmfNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNvmfNamespace",
		Method:             "POST",
		PathPattern:        "/create-nvmf-namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNvmfNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNvmfNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNvmfNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNvmfNamespaceSnapshot create nvmf namespace snapshot API
*/
func (a *Client) CreateNvmfNamespaceSnapshot(params *CreateNvmfNamespaceSnapshotParams, opts ...ClientOption) (*CreateNvmfNamespaceSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNvmfNamespaceSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNvmfNamespaceSnapshot",
		Method:             "POST",
		PathPattern:        "/create-nvmf-namespace-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNvmfNamespaceSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNvmfNamespaceSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNvmfNamespaceSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNvmfSubsystem create nvmf subsystem API
*/
func (a *Client) CreateNvmfSubsystem(params *CreateNvmfSubsystemParams, opts ...ClientOption) (*CreateNvmfSubsystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNvmfSubsystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNvmfSubsystem",
		Method:             "POST",
		PathPattern:        "/create-nvmf-subsystem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNvmfSubsystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNvmfSubsystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNvmfSubsystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateOrganization create organization API
*/
func (a *Client) CreateOrganization(params *CreateOrganizationParams, opts ...ClientOption) (*CreateOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateOrganization",
		Method:             "POST",
		PathPattern:        "/create-organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRackTopo create rack topo API
*/
func (a *Client) CreateRackTopo(params *CreateRackTopoParams, opts ...ClientOption) (*CreateRackTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRackTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRackTopo",
		Method:             "POST",
		PathPattern:        "/create-rack-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRackTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRackTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRackTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateReportTemplate create report template API
*/
func (a *Client) CreateReportTemplate(params *CreateReportTemplateParams, opts ...ClientOption) (*CreateReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateReportTemplate",
		Method:             "POST",
		PathPattern:        "/create-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRole create role API
*/
func (a *Client) CreateRole(params *CreateRoleParams, opts ...ClientOption) (*CreateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRole",
		Method:             "POST",
		PathPattern:        "/create-role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSnapshotPlan create snapshot plan API
*/
func (a *Client) CreateSnapshotPlan(params *CreateSnapshotPlanParams, opts ...ClientOption) (*CreateSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/create-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSnapshotPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSnmpTransport create snmp transport API
*/
func (a *Client) CreateSnmpTransport(params *CreateSnmpTransportParams, opts ...ClientOption) (*CreateSnmpTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnmpTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSnmpTransport",
		Method:             "POST",
		PathPattern:        "/create-snmp-transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSnmpTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSnmpTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSnmpTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSnmpTrapReceiver create snmp trap receiver API
*/
func (a *Client) CreateSnmpTrapReceiver(params *CreateSnmpTrapReceiverParams, opts ...ClientOption) (*CreateSnmpTrapReceiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnmpTrapReceiverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSnmpTrapReceiver",
		Method:             "POST",
		PathPattern:        "/create-snmp-trap-receiver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSnmpTrapReceiverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSnmpTrapReceiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSnmpTrapReceiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateUser create user API
*/
func (a *Client) CreateUser(params *CreateUserParams, opts ...ClientOption) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateUser",
		Method:             "POST",
		PathPattern:        "/create-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVds create vds API
*/
func (a *Client) CreateVds(params *CreateVdsParams, opts ...ClientOption) (*CreateVdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVds",
		Method:             "POST",
		PathPattern:        "/create-vds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateView create view API
*/
func (a *Client) CreateView(params *CreateViewParams, opts ...ClientOption) (*CreateViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateView",
		Method:             "POST",
		PathPattern:        "/create-view",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVM create Vm API
*/
func (a *Client) CreateVM(params *CreateVMParams, opts ...ClientOption) (*CreateVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVm",
		Method:             "POST",
		PathPattern:        "/create-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVMFolder create Vm folder API
*/
func (a *Client) CreateVMFolder(params *CreateVMFolderParams, opts ...ClientOption) (*CreateVMFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmFolder",
		Method:             "POST",
		PathPattern:        "/create-vm-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVMFromTemplate create Vm from template API
*/
func (a *Client) CreateVMFromTemplate(params *CreateVMFromTemplateParams, opts ...ClientOption) (*CreateVMFromTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMFromTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmFromTemplate",
		Method:             "POST",
		PathPattern:        "/create-vm-from-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMFromTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMFromTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmFromTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVMPlacementGroup create Vm placement group API
*/
func (a *Client) CreateVMPlacementGroup(params *CreateVMPlacementGroupParams, opts ...ClientOption) (*CreateVMPlacementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMPlacementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmPlacementGroup",
		Method:             "POST",
		PathPattern:        "/create-vm-placement-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMPlacementGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMPlacementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmPlacementGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVMSnapshot create Vm snapshot API
*/
func (a *Client) CreateVMSnapshot(params *CreateVMSnapshotParams, opts ...ClientOption) (*CreateVMSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmSnapshot",
		Method:             "POST",
		PathPattern:        "/create-vm-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVMVlan create Vm vlan API
*/
func (a *Client) CreateVMVlan(params *CreateVMVlanParams, opts ...ClientOption) (*CreateVMVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmVlan",
		Method:             "POST",
		PathPattern:        "/create-vm-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMVlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateVMVolume create Vm volume API
*/
func (a *Client) CreateVMVolume(params *CreateVMVolumeParams, opts ...ClientOption) (*CreateVMVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmVolume",
		Method:             "POST",
		PathPattern:        "/create-vm-volume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBrickTopo delete brick topo API
*/
func (a *Client) DeleteBrickTopo(params *DeleteBrickTopoParams, opts ...ClientOption) (*DeleteBrickTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBrickTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteBrickTopo",
		Method:             "POST",
		PathPattern:        "/delete-brick-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBrickTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBrickTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBrickTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCluster delete cluster API
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams, opts ...ClientOption) (*DeleteClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCluster",
		Method:             "POST",
		PathPattern:        "/delete-cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteClusterRecycleBinSetting delete cluster recycle bin setting API
*/
func (a *Client) DeleteClusterRecycleBinSetting(params *DeleteClusterRecycleBinSettingParams, opts ...ClientOption) (*DeleteClusterRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClusterRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/delete-cluster-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterRecycleBinSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteClusterRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConsistencyGroup delete consistency group API
*/
func (a *Client) DeleteConsistencyGroup(params *DeleteConsistencyGroupParams, opts ...ClientOption) (*DeleteConsistencyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsistencyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteConsistencyGroup",
		Method:             "POST",
		PathPattern:        "/delete-consistency-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsistencyGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConsistencyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteConsistencyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConsistencyGroupSnapshot delete consistency group snapshot API
*/
func (a *Client) DeleteConsistencyGroupSnapshot(params *DeleteConsistencyGroupSnapshotParams, opts ...ClientOption) (*DeleteConsistencyGroupSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsistencyGroupSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteConsistencyGroupSnapshot",
		Method:             "POST",
		PathPattern:        "/delete-consistency-snapshot-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsistencyGroupSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConsistencyGroupSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteConsistencyGroupSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDatacenter delete datacenter API
*/
func (a *Client) DeleteDatacenter(params *DeleteDatacenterParams, opts ...ClientOption) (*DeleteDatacenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatacenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDatacenter",
		Method:             "POST",
		PathPattern:        "/delete-datacenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDatacenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatacenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDatacenter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteElfImage delete elf image API
*/
func (a *Client) DeleteElfImage(params *DeleteElfImageParams, opts ...ClientOption) (*DeleteElfImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteElfImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteElfImage",
		Method:             "POST",
		PathPattern:        "/delete-elf-image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteElfImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteElfImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteElfImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEntityFilter delete entity filter API
*/
func (a *Client) DeleteEntityFilter(params *DeleteEntityFilterParams, opts ...ClientOption) (*DeleteEntityFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEntityFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEntityFilter",
		Method:             "POST",
		PathPattern:        "/delete-entity-filter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEntityFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEntityFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEntityFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGraph delete graph API
*/
func (a *Client) DeleteGraph(params *DeleteGraphParams, opts ...ClientOption) (*DeleteGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGraphParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteGraph",
		Method:             "POST",
		PathPattern:        "/delete-graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGraphReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGraphOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteGraph: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIscsiLun delete iscsi lun API
*/
func (a *Client) DeleteIscsiLun(params *DeleteIscsiLunParams, opts ...ClientOption) (*DeleteIscsiLunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIscsiLunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIscsiLun",
		Method:             "POST",
		PathPattern:        "/delete-iscsi-lun",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIscsiLunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIscsiLunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIscsiLun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIscsiLunSnapshot delete iscsi lun snapshot API
*/
func (a *Client) DeleteIscsiLunSnapshot(params *DeleteIscsiLunSnapshotParams, opts ...ClientOption) (*DeleteIscsiLunSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIscsiLunSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIscsiLunSnapshot",
		Method:             "POST",
		PathPattern:        "/delete-iscsi-lun-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIscsiLunSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIscsiLunSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIscsiLunSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteIscsiTarget delete iscsi target API
*/
func (a *Client) DeleteIscsiTarget(params *DeleteIscsiTargetParams, opts ...ClientOption) (*DeleteIscsiTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIscsiTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteIscsiTarget",
		Method:             "POST",
		PathPattern:        "/delete-iscsi-target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIscsiTargetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIscsiTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteIscsiTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteLabel delete label API
*/
func (a *Client) DeleteLabel(params *DeleteLabelParams, opts ...ClientOption) (*DeleteLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteLabel",
		Method:             "POST",
		PathPattern:        "/delete-label",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNamespaceGroup delete namespace group API
*/
func (a *Client) DeleteNamespaceGroup(params *DeleteNamespaceGroupParams, opts ...ClientOption) (*DeleteNamespaceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNamespaceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNamespaceGroup",
		Method:             "POST",
		PathPattern:        "/delete-namespace-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNamespaceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNamespaceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNamespaceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNfsExport delete nfs export API
*/
func (a *Client) DeleteNfsExport(params *DeleteNfsExportParams, opts ...ClientOption) (*DeleteNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNfsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNfsExport",
		Method:             "POST",
		PathPattern:        "/delete-nfs-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNfsExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNfsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNfsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNvmfNamespace delete nvmf namespace API
*/
func (a *Client) DeleteNvmfNamespace(params *DeleteNvmfNamespaceParams, opts ...ClientOption) (*DeleteNvmfNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNvmfNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNvmfNamespace",
		Method:             "POST",
		PathPattern:        "/delete-nvmf-namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNvmfNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNvmfNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNvmfNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNvmfNamespaceSnapshot delete nvmf namespace snapshot API
*/
func (a *Client) DeleteNvmfNamespaceSnapshot(params *DeleteNvmfNamespaceSnapshotParams, opts ...ClientOption) (*DeleteNvmfNamespaceSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNvmfNamespaceSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNvmfNamespaceSnapshot",
		Method:             "POST",
		PathPattern:        "/delete-nvmf-namespace-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNvmfNamespaceSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNvmfNamespaceSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNvmfNamespaceSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNvmfSubsystem delete nvmf subsystem API
*/
func (a *Client) DeleteNvmfSubsystem(params *DeleteNvmfSubsystemParams, opts ...ClientOption) (*DeleteNvmfSubsystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNvmfSubsystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNvmfSubsystem",
		Method:             "POST",
		PathPattern:        "/delete-nvmf-subsystem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNvmfSubsystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNvmfSubsystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNvmfSubsystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteOrganization delete organization API
*/
func (a *Client) DeleteOrganization(params *DeleteOrganizationParams, opts ...ClientOption) (*DeleteOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteOrganization",
		Method:             "POST",
		PathPattern:        "/delete-organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRackTopo delete rack topo API
*/
func (a *Client) DeleteRackTopo(params *DeleteRackTopoParams, opts ...ClientOption) (*DeleteRackTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRackTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRackTopo",
		Method:             "POST",
		PathPattern:        "/delete-rack-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRackTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRackTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRackTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteReportTemplate delete report template API
*/
func (a *Client) DeleteReportTemplate(params *DeleteReportTemplateParams, opts ...ClientOption) (*DeleteReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteReportTemplate",
		Method:             "POST",
		PathPattern:        "/delete-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRole delete role API
*/
func (a *Client) DeleteRole(params *DeleteRoleParams, opts ...ClientOption) (*DeleteRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRole",
		Method:             "POST",
		PathPattern:        "/delete-role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnapshotGroup delete snapshot group API
*/
func (a *Client) DeleteSnapshotGroup(params *DeleteSnapshotGroupParams, opts ...ClientOption) (*DeleteSnapshotGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSnapshotGroup",
		Method:             "POST",
		PathPattern:        "/delete-snapshot-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSnapshotGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnapshotGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnapshotGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnapshotPlan delete snapshot plan API
*/
func (a *Client) DeleteSnapshotPlan(params *DeleteSnapshotPlanParams, opts ...ClientOption) (*DeleteSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/delete-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSnapshotPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnmpTransport delete snmp transport API
*/
func (a *Client) DeleteSnmpTransport(params *DeleteSnmpTransportParams, opts ...ClientOption) (*DeleteSnmpTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnmpTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSnmpTransport",
		Method:             "POST",
		PathPattern:        "/delete-snmp-transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSnmpTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnmpTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnmpTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnmpTrapReceiver delete snmp trap receiver API
*/
func (a *Client) DeleteSnmpTrapReceiver(params *DeleteSnmpTrapReceiverParams, opts ...ClientOption) (*DeleteSnmpTrapReceiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnmpTrapReceiverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSnmpTrapReceiver",
		Method:             "POST",
		PathPattern:        "/delete-snmp-trap-receiver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSnmpTrapReceiverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnmpTrapReceiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnmpTrapReceiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUser delete user API
*/
func (a *Client) DeleteUser(params *DeleteUserParams, opts ...ClientOption) (*DeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteUser",
		Method:             "POST",
		PathPattern:        "/delete-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVds delete vds API
*/
func (a *Client) DeleteVds(params *DeleteVdsParams, opts ...ClientOption) (*DeleteVdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVds",
		Method:             "POST",
		PathPattern:        "/delete-vds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteView delete view API
*/
func (a *Client) DeleteView(params *DeleteViewParams, opts ...ClientOption) (*DeleteViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteView",
		Method:             "POST",
		PathPattern:        "/delete-view",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVlan delete vlan API
*/
func (a *Client) DeleteVlan(params *DeleteVlanParams, opts ...ClientOption) (*DeleteVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVlan",
		Method:             "POST",
		PathPattern:        "/delete-vm-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVM delete Vm API
*/
func (a *Client) DeleteVM(params *DeleteVMParams, opts ...ClientOption) (*DeleteVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVm",
		Method:             "POST",
		PathPattern:        "/delete-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMFolder delete Vm folder API
*/
func (a *Client) DeleteVMFolder(params *DeleteVMFolderParams, opts ...ClientOption) (*DeleteVMFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmFolder",
		Method:             "POST",
		PathPattern:        "/delete-vm-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMPlacementGroup delete Vm placement group API
*/
func (a *Client) DeleteVMPlacementGroup(params *DeleteVMPlacementGroupParams, opts ...ClientOption) (*DeleteVMPlacementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMPlacementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmPlacementGroup",
		Method:             "POST",
		PathPattern:        "/delete-vm-placement-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMPlacementGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMPlacementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmPlacementGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMSnapshot delete Vm snapshot API
*/
func (a *Client) DeleteVMSnapshot(params *DeleteVMSnapshotParams, opts ...ClientOption) (*DeleteVMSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmSnapshot",
		Method:             "POST",
		PathPattern:        "/delete-vm-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMTemplateFromVM delete Vm template from Vm API
*/
func (a *Client) DeleteVMTemplateFromVM(params *DeleteVMTemplateFromVMParams, opts ...ClientOption) (*DeleteVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/delete-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMVolumeFromVM delete Vm volume from Vm API
*/
func (a *Client) DeleteVMVolumeFromVM(params *DeleteVMVolumeFromVMParams, opts ...ClientOption) (*DeleteVMVolumeFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMVolumeFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmVolumeFromVm",
		Method:             "POST",
		PathPattern:        "/delete-vm-volume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMVolumeFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMVolumeFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmVolumeFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteSnapshotPlan execute snapshot plan API
*/
func (a *Client) ExecuteSnapshotPlan(params *ExecuteSnapshotPlanParams, opts ...ClientOption) (*ExecuteSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/execute-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExecuteSnapshotPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForceRestartVM force restart Vm API
*/
func (a *Client) ForceRestartVM(params *ForceRestartVMParams, opts ...ClientOption) (*ForceRestartVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceRestartVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForceRestartVm",
		Method:             "POST",
		PathPattern:        "/force/restart-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceRestartVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForceRestartVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ForceRestartVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ForceShutDownVM force shut down Vm API
*/
func (a *Client) ForceShutDownVM(params *ForceShutDownVMParams, opts ...ClientOption) (*ForceShutDownVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForceShutDownVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ForceShutDownVm",
		Method:             "POST",
		PathPattern:        "/force/shut-down-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ForceShutDownVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForceShutDownVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ForceShutDownVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateFromReportTemplate generate from report template API
*/
func (a *Client) GenerateFromReportTemplate(params *GenerateFromReportTemplateParams, opts ...ClientOption) (*GenerateFromReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateFromReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateFromReportTemplate",
		Method:             "POST",
		PathPattern:        "/generate-from-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateFromReportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateFromReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GenerateFromReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlertNotifiers get alert notifiers API
*/
func (a *Client) GetAlertNotifiers(params *GetAlertNotifiersParams, opts ...ClientOption) (*GetAlertNotifiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertNotifiersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertNotifiers",
		Method:             "POST",
		PathPattern:        "/get-alert-notifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertNotifiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertNotifiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertNotifiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlertNotifiersConnection get alert notifiers connection API
*/
func (a *Client) GetAlertNotifiersConnection(params *GetAlertNotifiersConnectionParams, opts ...ClientOption) (*GetAlertNotifiersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertNotifiersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertNotifiersConnection",
		Method:             "POST",
		PathPattern:        "/get-alert-notifiers-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertNotifiersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertNotifiersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertNotifiersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlertRules get alert rules API
*/
func (a *Client) GetAlertRules(params *GetAlertRulesParams, opts ...ClientOption) (*GetAlertRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRules",
		Method:             "POST",
		PathPattern:        "/get-alert-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlertRulesConnection get alert rules connection API
*/
func (a *Client) GetAlertRulesConnection(params *GetAlertRulesConnectionParams, opts ...ClientOption) (*GetAlertRulesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRulesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertRulesConnection",
		Method:             "POST",
		PathPattern:        "/get-alert-rules-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertRulesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertRulesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertRulesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlerts get alerts API
*/
func (a *Client) GetAlerts(params *GetAlertsParams, opts ...ClientOption) (*GetAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlerts",
		Method:             "POST",
		PathPattern:        "/get-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAlertsConnection get alerts connection API
*/
func (a *Client) GetAlertsConnection(params *GetAlertsConnectionParams, opts ...ClientOption) (*GetAlertsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAlertsConnection",
		Method:             "POST",
		PathPattern:        "/get-alerts-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAlertsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplications get applications API
*/
func (a *Client) GetApplications(params *GetApplicationsParams, opts ...ClientOption) (*GetApplicationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplications",
		Method:             "POST",
		PathPattern:        "/get-applications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetApplications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetApplicationsConnection get applications connection API
*/
func (a *Client) GetApplicationsConnection(params *GetApplicationsConnectionParams, opts ...ClientOption) (*GetApplicationsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetApplicationsConnection",
		Method:             "POST",
		PathPattern:        "/get-applications-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetApplicationsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetApplicationsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetApplicationsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBrickTopoes get brick topoes API
*/
func (a *Client) GetBrickTopoes(params *GetBrickTopoesParams, opts ...ClientOption) (*GetBrickTopoesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBrickTopoesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBrickTopoes",
		Method:             "POST",
		PathPattern:        "/get-brick-topoes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBrickTopoesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBrickTopoesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBrickTopoes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBrickTopoesConnection get brick topoes connection API
*/
func (a *Client) GetBrickTopoesConnection(params *GetBrickTopoesConnectionParams, opts ...ClientOption) (*GetBrickTopoesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBrickTopoesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBrickTopoesConnection",
		Method:             "POST",
		PathPattern:        "/get-brick-topoes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBrickTopoesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBrickTopoesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBrickTopoesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterImages get cluster images API
*/
func (a *Client) GetClusterImages(params *GetClusterImagesParams, opts ...ClientOption) (*GetClusterImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterImages",
		Method:             "POST",
		PathPattern:        "/get-cluster-images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterImagesConnection get cluster images connection API
*/
func (a *Client) GetClusterImagesConnection(params *GetClusterImagesConnectionParams, opts ...ClientOption) (*GetClusterImagesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterImagesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterImagesConnection",
		Method:             "POST",
		PathPattern:        "/get-cluster-images-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterImagesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterImagesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterImagesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterSettingses get cluster settingses API
*/
func (a *Client) GetClusterSettingses(params *GetClusterSettingsesParams, opts ...ClientOption) (*GetClusterSettingsesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterSettingsesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterSettingses",
		Method:             "POST",
		PathPattern:        "/get-cluster-settingses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterSettingsesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterSettingsesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterSettingses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterSettingsesConnection get cluster settingses connection API
*/
func (a *Client) GetClusterSettingsesConnection(params *GetClusterSettingsesConnectionParams, opts ...ClientOption) (*GetClusterSettingsesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterSettingsesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterSettingsesConnection",
		Method:             "POST",
		PathPattern:        "/get-cluster-settingses-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterSettingsesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterSettingsesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterSettingsesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterTopoes get cluster topoes API
*/
func (a *Client) GetClusterTopoes(params *GetClusterTopoesParams, opts ...ClientOption) (*GetClusterTopoesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterTopoesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterTopoes",
		Method:             "POST",
		PathPattern:        "/get-cluster-topoes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterTopoesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterTopoesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterTopoes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterTopoesConnection get cluster topoes connection API
*/
func (a *Client) GetClusterTopoesConnection(params *GetClusterTopoesConnectionParams, opts ...ClientOption) (*GetClusterTopoesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterTopoesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterTopoesConnection",
		Method:             "POST",
		PathPattern:        "/get-cluster-topoes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterTopoesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterTopoesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterTopoesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterUpgradeHistories get cluster upgrade histories API
*/
func (a *Client) GetClusterUpgradeHistories(params *GetClusterUpgradeHistoriesParams, opts ...ClientOption) (*GetClusterUpgradeHistoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterUpgradeHistoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterUpgradeHistories",
		Method:             "POST",
		PathPattern:        "/get-cluster-upgrade-histories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterUpgradeHistoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterUpgradeHistoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterUpgradeHistories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusterUpgradeHistoriesConnection get cluster upgrade histories connection API
*/
func (a *Client) GetClusterUpgradeHistoriesConnection(params *GetClusterUpgradeHistoriesConnectionParams, opts ...ClientOption) (*GetClusterUpgradeHistoriesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterUpgradeHistoriesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusterUpgradeHistoriesConnection",
		Method:             "POST",
		PathPattern:        "/get-cluster-upgrade-histories-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClusterUpgradeHistoriesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClusterUpgradeHistoriesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusterUpgradeHistoriesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClusters get clusters API
*/
func (a *Client) GetClusters(params *GetClustersParams, opts ...ClientOption) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClusters",
		Method:             "POST",
		PathPattern:        "/get-clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClusters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetClustersConnection get clusters connection API
*/
func (a *Client) GetClustersConnection(params *GetClustersConnectionParams, opts ...ClientOption) (*GetClustersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClustersConnection",
		Method:             "POST",
		PathPattern:        "/get-clusters-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClustersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClustersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetClustersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConsistencyGroupSnapshots get consistency group snapshots API
*/
func (a *Client) GetConsistencyGroupSnapshots(params *GetConsistencyGroupSnapshotsParams, opts ...ClientOption) (*GetConsistencyGroupSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsistencyGroupSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConsistencyGroupSnapshots",
		Method:             "POST",
		PathPattern:        "/get-consistency-group-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsistencyGroupSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsistencyGroupSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsistencyGroupSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConsistencyGroupSnapshotsConnection get consistency group snapshots connection API
*/
func (a *Client) GetConsistencyGroupSnapshotsConnection(params *GetConsistencyGroupSnapshotsConnectionParams, opts ...ClientOption) (*GetConsistencyGroupSnapshotsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsistencyGroupSnapshotsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConsistencyGroupSnapshotsConnection",
		Method:             "POST",
		PathPattern:        "/get-consistency-group-snapshots-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsistencyGroupSnapshotsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsistencyGroupSnapshotsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsistencyGroupSnapshotsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConsistencyGroups get consistency groups API
*/
func (a *Client) GetConsistencyGroups(params *GetConsistencyGroupsParams, opts ...ClientOption) (*GetConsistencyGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsistencyGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConsistencyGroups",
		Method:             "POST",
		PathPattern:        "/get-consistency-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsistencyGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsistencyGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsistencyGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConsistencyGroupsConnection get consistency groups connection API
*/
func (a *Client) GetConsistencyGroupsConnection(params *GetConsistencyGroupsConnectionParams, opts ...ClientOption) (*GetConsistencyGroupsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsistencyGroupsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConsistencyGroupsConnection",
		Method:             "POST",
		PathPattern:        "/get-consistency-groups-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsistencyGroupsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsistencyGroupsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsistencyGroupsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatacenters get datacenters API
*/
func (a *Client) GetDatacenters(params *GetDatacentersParams, opts ...ClientOption) (*GetDatacentersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatacentersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatacenters",
		Method:             "POST",
		PathPattern:        "/get-datacenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatacentersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatacentersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDatacenters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatacentersConnection get datacenters connection API
*/
func (a *Client) GetDatacentersConnection(params *GetDatacentersConnectionParams, opts ...ClientOption) (*GetDatacentersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatacentersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDatacentersConnection",
		Method:             "POST",
		PathPattern:        "/get-datacenters-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDatacentersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatacentersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDatacentersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploys get deploys API
*/
func (a *Client) GetDeploys(params *GetDeploysParams, opts ...ClientOption) (*GetDeploysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeploys",
		Method:             "POST",
		PathPattern:        "/get-deploys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeploys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeploysConnection get deploys connection API
*/
func (a *Client) GetDeploysConnection(params *GetDeploysConnectionParams, opts ...ClientOption) (*GetDeploysConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeploysConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDeploysConnection",
		Method:             "POST",
		PathPattern:        "/get-deploys-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeploysConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeploysConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDeploysConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDiscoverHosts get discover hosts API
*/
func (a *Client) GetDiscoverHosts(params *GetDiscoverHostsParams, opts ...ClientOption) (*GetDiscoverHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoverHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDiscoverHosts",
		Method:             "POST",
		PathPattern:        "/get-discover-hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoverHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDiscoverHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDiscoverHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDisks get disks API
*/
func (a *Client) GetDisks(params *GetDisksParams, opts ...ClientOption) (*GetDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDisks",
		Method:             "POST",
		PathPattern:        "/get-disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDisksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDisks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDisksConnection get disks connection API
*/
func (a *Client) GetDisksConnection(params *GetDisksConnectionParams, opts ...ClientOption) (*GetDisksConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisksConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDisksConnection",
		Method:             "POST",
		PathPattern:        "/get-disks-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDisksConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDisksConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDisksConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetElfDataStores get elf data stores API
*/
func (a *Client) GetElfDataStores(params *GetElfDataStoresParams, opts ...ClientOption) (*GetElfDataStoresOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetElfDataStoresParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetElfDataStores",
		Method:             "POST",
		PathPattern:        "/get-elf-data-stores",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetElfDataStoresReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetElfDataStoresOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetElfDataStores: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetElfDataStoresConnection get elf data stores connection API
*/
func (a *Client) GetElfDataStoresConnection(params *GetElfDataStoresConnectionParams, opts ...ClientOption) (*GetElfDataStoresConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetElfDataStoresConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetElfDataStoresConnection",
		Method:             "POST",
		PathPattern:        "/get-elf-data-stores-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetElfDataStoresConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetElfDataStoresConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetElfDataStoresConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetElfImages get elf images API
*/
func (a *Client) GetElfImages(params *GetElfImagesParams, opts ...ClientOption) (*GetElfImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetElfImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetElfImages",
		Method:             "POST",
		PathPattern:        "/get-elf-images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetElfImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetElfImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetElfImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetElfImagesConnection get elf images connection API
*/
func (a *Client) GetElfImagesConnection(params *GetElfImagesConnectionParams, opts ...ClientOption) (*GetElfImagesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetElfImagesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetElfImagesConnection",
		Method:             "POST",
		PathPattern:        "/get-elf-images-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetElfImagesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetElfImagesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetElfImagesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetElfStoragePolicies get elf storage policies API
*/
func (a *Client) GetElfStoragePolicies(params *GetElfStoragePoliciesParams, opts ...ClientOption) (*GetElfStoragePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetElfStoragePoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetElfStoragePolicies",
		Method:             "POST",
		PathPattern:        "/get-elf-storage-policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetElfStoragePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetElfStoragePoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetElfStoragePolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetElfStoragePoliciesConnection get elf storage policies connection API
*/
func (a *Client) GetElfStoragePoliciesConnection(params *GetElfStoragePoliciesConnectionParams, opts ...ClientOption) (*GetElfStoragePoliciesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetElfStoragePoliciesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetElfStoragePoliciesConnection",
		Method:             "POST",
		PathPattern:        "/get-elf-storage-policies-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetElfStoragePoliciesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetElfStoragePoliciesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetElfStoragePoliciesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEntityFilters get entity filters API
*/
func (a *Client) GetEntityFilters(params *GetEntityFiltersParams, opts ...ClientOption) (*GetEntityFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntityFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEntityFilters",
		Method:             "POST",
		PathPattern:        "/get-entity-filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEntityFiltersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntityFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEntityFilters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEntityFiltersConnection get entity filters connection API
*/
func (a *Client) GetEntityFiltersConnection(params *GetEntityFiltersConnectionParams, opts ...ClientOption) (*GetEntityFiltersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEntityFiltersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEntityFiltersConnection",
		Method:             "POST",
		PathPattern:        "/get-entity-filters-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEntityFiltersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEntityFiltersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEntityFiltersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalAlertRules get global alert rules API
*/
func (a *Client) GetGlobalAlertRules(params *GetGlobalAlertRulesParams, opts ...ClientOption) (*GetGlobalAlertRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalAlertRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalAlertRules",
		Method:             "POST",
		PathPattern:        "/get-global-alert-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalAlertRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalAlertRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalAlertRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalAlertRulesConnection get global alert rules connection API
*/
func (a *Client) GetGlobalAlertRulesConnection(params *GetGlobalAlertRulesConnectionParams, opts ...ClientOption) (*GetGlobalAlertRulesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalAlertRulesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalAlertRulesConnection",
		Method:             "POST",
		PathPattern:        "/get-global-alert-rules-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalAlertRulesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalAlertRulesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalAlertRulesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalSettingses get global settingses API
*/
func (a *Client) GetGlobalSettingses(params *GetGlobalSettingsesParams, opts ...ClientOption) (*GetGlobalSettingsesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalSettingsesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalSettingses",
		Method:             "POST",
		PathPattern:        "/get-global-settingses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalSettingsesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalSettingsesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalSettingses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalSettingsesConnection get global settingses connection API
*/
func (a *Client) GetGlobalSettingsesConnection(params *GetGlobalSettingsesConnectionParams, opts ...ClientOption) (*GetGlobalSettingsesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalSettingsesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalSettingsesConnection",
		Method:             "POST",
		PathPattern:        "/get-global-settingses-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalSettingsesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalSettingsesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalSettingsesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGraphs get graphs API
*/
func (a *Client) GetGraphs(params *GetGraphsParams, opts ...ClientOption) (*GetGraphsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGraphsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGraphs",
		Method:             "POST",
		PathPattern:        "/get-graphs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGraphsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGraphsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGraphs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGraphsConnection get graphs connection API
*/
func (a *Client) GetGraphsConnection(params *GetGraphsConnectionParams, opts ...ClientOption) (*GetGraphsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGraphsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGraphsConnection",
		Method:             "POST",
		PathPattern:        "/get-graphs-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGraphsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGraphsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGraphsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHosts get hosts API
*/
func (a *Client) GetHosts(params *GetHostsParams, opts ...ClientOption) (*GetHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHosts",
		Method:             "POST",
		PathPattern:        "/get-hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHostsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHostsConnection get hosts connection API
*/
func (a *Client) GetHostsConnection(params *GetHostsConnectionParams, opts ...ClientOption) (*GetHostsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHostsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetHostsConnection",
		Method:             "POST",
		PathPattern:        "/get-hosts-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHostsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHostsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHostsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetImagesConnector get images connector API
*/
func (a *Client) GetImagesConnector(params *GetImagesConnectorParams, opts ...ClientOption) (*GetImagesConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetImagesConnector",
		Method:             "POST",
		PathPattern:        "/get-images-connector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImagesConnectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImagesConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetImagesConnector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIpmis get ipmis API
*/
func (a *Client) GetIpmis(params *GetIpmisParams, opts ...ClientOption) (*GetIpmisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIpmisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIpmis",
		Method:             "POST",
		PathPattern:        "/get-ipmis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIpmisReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIpmisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIpmis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiConnections get iscsi connections API
*/
func (a *Client) GetIscsiConnections(params *GetIscsiConnectionsParams, opts ...ClientOption) (*GetIscsiConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiConnections",
		Method:             "POST",
		PathPattern:        "/get-iscsi-connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiConnectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiConnectionsConnection get iscsi connections connection API
*/
func (a *Client) GetIscsiConnectionsConnection(params *GetIscsiConnectionsConnectionParams, opts ...ClientOption) (*GetIscsiConnectionsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiConnectionsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiConnectionsConnection",
		Method:             "POST",
		PathPattern:        "/get-iscsi-connections-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiConnectionsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiConnectionsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiConnectionsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiLunSnapshots get iscsi lun snapshots API
*/
func (a *Client) GetIscsiLunSnapshots(params *GetIscsiLunSnapshotsParams, opts ...ClientOption) (*GetIscsiLunSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiLunSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiLunSnapshots",
		Method:             "POST",
		PathPattern:        "/get-iscsi-lun-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiLunSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiLunSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiLunSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiLunSnapshotsConnection get iscsi lun snapshots connection API
*/
func (a *Client) GetIscsiLunSnapshotsConnection(params *GetIscsiLunSnapshotsConnectionParams, opts ...ClientOption) (*GetIscsiLunSnapshotsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiLunSnapshotsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiLunSnapshotsConnection",
		Method:             "POST",
		PathPattern:        "/get-iscsi-lun-snapshots-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiLunSnapshotsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiLunSnapshotsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiLunSnapshotsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiLuns get iscsi luns API
*/
func (a *Client) GetIscsiLuns(params *GetIscsiLunsParams, opts ...ClientOption) (*GetIscsiLunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiLunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiLuns",
		Method:             "POST",
		PathPattern:        "/get-iscsi-luns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiLunsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiLunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiLuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiLunsConnection get iscsi luns connection API
*/
func (a *Client) GetIscsiLunsConnection(params *GetIscsiLunsConnectionParams, opts ...ClientOption) (*GetIscsiLunsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiLunsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiLunsConnection",
		Method:             "POST",
		PathPattern:        "/get-iscsi-luns-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiLunsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiLunsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiLunsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiTargets get iscsi targets API
*/
func (a *Client) GetIscsiTargets(params *GetIscsiTargetsParams, opts ...ClientOption) (*GetIscsiTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiTargets",
		Method:             "POST",
		PathPattern:        "/get-iscsi-targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiTargetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiTargets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIscsiTargetsConnection get iscsi targets connection API
*/
func (a *Client) GetIscsiTargetsConnection(params *GetIscsiTargetsConnectionParams, opts ...ClientOption) (*GetIscsiTargetsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIscsiTargetsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetIscsiTargetsConnection",
		Method:             "POST",
		PathPattern:        "/get-iscsi-targets-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIscsiTargetsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIscsiTargetsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetIscsiTargetsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLabels get labels API
*/
func (a *Client) GetLabels(params *GetLabelsParams, opts ...ClientOption) (*GetLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLabels",
		Method:             "POST",
		PathPattern:        "/get-labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLabelsConnection get labels connection API
*/
func (a *Client) GetLabelsConnection(params *GetLabelsConnectionParams, opts ...ClientOption) (*GetLabelsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLabelsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLabelsConnection",
		Method:             "POST",
		PathPattern:        "/get-labels-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLabelsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLabelsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLabelsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicenses get licenses API
*/
func (a *Client) GetLicenses(params *GetLicensesParams, opts ...ClientOption) (*GetLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicensesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLicenses",
		Method:             "POST",
		PathPattern:        "/get-licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLicensesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLicensesConnection get licenses connection API
*/
func (a *Client) GetLicensesConnection(params *GetLicensesConnectionParams, opts ...ClientOption) (*GetLicensesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLicensesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLicensesConnection",
		Method:             "POST",
		PathPattern:        "/get-licenses-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLicensesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLicensesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLicensesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLogCollections get log collections API
*/
func (a *Client) GetLogCollections(params *GetLogCollectionsParams, opts ...ClientOption) (*GetLogCollectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogCollectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogCollections",
		Method:             "POST",
		PathPattern:        "/get-log-collections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogCollectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogCollectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLogCollections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLogCollectionsConnection get log collections connection API
*/
func (a *Client) GetLogCollectionsConnection(params *GetLogCollectionsConnectionParams, opts ...ClientOption) (*GetLogCollectionsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogCollectionsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogCollectionsConnection",
		Method:             "POST",
		PathPattern:        "/get-log-collections-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogCollectionsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogCollectionsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLogCollectionsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMigrateTransmitters get migrate transmitters API
*/
func (a *Client) GetMigrateTransmitters(params *GetMigrateTransmittersParams, opts ...ClientOption) (*GetMigrateTransmittersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMigrateTransmittersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMigrateTransmitters",
		Method:             "POST",
		PathPattern:        "/get-migrate-transmitters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMigrateTransmittersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMigrateTransmittersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMigrateTransmitters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMigrateTransmittersConnection get migrate transmitters connection API
*/
func (a *Client) GetMigrateTransmittersConnection(params *GetMigrateTransmittersConnectionParams, opts ...ClientOption) (*GetMigrateTransmittersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMigrateTransmittersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMigrateTransmittersConnection",
		Method:             "POST",
		PathPattern:        "/get-migrate-transmitters-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMigrateTransmittersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMigrateTransmittersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMigrateTransmittersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNamespaceGroups get namespace groups API
*/
func (a *Client) GetNamespaceGroups(params *GetNamespaceGroupsParams, opts ...ClientOption) (*GetNamespaceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNamespaceGroups",
		Method:             "POST",
		PathPattern:        "/get-namespace-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespaceGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNamespaceGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNamespaceGroupsConnection get namespace groups connection API
*/
func (a *Client) GetNamespaceGroupsConnection(params *GetNamespaceGroupsConnectionParams, opts ...ClientOption) (*GetNamespaceGroupsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNamespaceGroupsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNamespaceGroupsConnection",
		Method:             "POST",
		PathPattern:        "/get-namespace-groups-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNamespaceGroupsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNamespaceGroupsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNamespaceGroupsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNfsExports get nfs exports API
*/
func (a *Client) GetNfsExports(params *GetNfsExportsParams, opts ...ClientOption) (*GetNfsExportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsExportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsExports",
		Method:             "POST",
		PathPattern:        "/get-nfs-exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsExportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsExportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsExports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNfsExportsConnection get nfs exports connection API
*/
func (a *Client) GetNfsExportsConnection(params *GetNfsExportsConnectionParams, opts ...ClientOption) (*GetNfsExportsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsExportsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsExportsConnection",
		Method:             "POST",
		PathPattern:        "/get-nfs-exports-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsExportsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsExportsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsExportsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNfsInodes get nfs inodes API
*/
func (a *Client) GetNfsInodes(params *GetNfsInodesParams, opts ...ClientOption) (*GetNfsInodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsInodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsInodes",
		Method:             "POST",
		PathPattern:        "/get-nfs-inodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsInodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsInodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsInodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNfsInodesConnection get nfs inodes connection API
*/
func (a *Client) GetNfsInodesConnection(params *GetNfsInodesConnectionParams, opts ...ClientOption) (*GetNfsInodesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsInodesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNfsInodesConnection",
		Method:             "POST",
		PathPattern:        "/get-nfs-inodes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNfsInodesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNfsInodesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNfsInodesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNics get nics API
*/
func (a *Client) GetNics(params *GetNicsParams, opts ...ClientOption) (*GetNicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNicsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNics",
		Method:             "POST",
		PathPattern:        "/get-nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNicsConnection get nics connection API
*/
func (a *Client) GetNicsConnection(params *GetNicsConnectionParams, opts ...ClientOption) (*GetNicsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNicsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNicsConnection",
		Method:             "POST",
		PathPattern:        "/get-nics-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNicsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNicsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNicsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeTopoes get node topoes API
*/
func (a *Client) GetNodeTopoes(params *GetNodeTopoesParams, opts ...ClientOption) (*GetNodeTopoesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeTopoesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNodeTopoes",
		Method:             "POST",
		PathPattern:        "/get-node-topoes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeTopoesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeTopoesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNodeTopoes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNodeTopoesConnection get node topoes connection API
*/
func (a *Client) GetNodeTopoesConnection(params *GetNodeTopoesConnectionParams, opts ...ClientOption) (*GetNodeTopoesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeTopoesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNodeTopoesConnection",
		Method:             "POST",
		PathPattern:        "/get-node-topoes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeTopoesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeTopoesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNodeTopoesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespaceSnapshots get nvmf namespace snapshots API
*/
func (a *Client) GetNvmfNamespaceSnapshots(params *GetNvmfNamespaceSnapshotsParams, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespaceSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespaceSnapshots",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespace-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespaceSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespaceSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespaceSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespaceSnapshotsConnection get nvmf namespace snapshots connection API
*/
func (a *Client) GetNvmfNamespaceSnapshotsConnection(params *GetNvmfNamespaceSnapshotsConnectionParams, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespaceSnapshotsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespaceSnapshotsConnection",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespace-snapshots-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespaceSnapshotsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespaceSnapshotsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespaceSnapshotsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespaces get nvmf namespaces API
*/
func (a *Client) GetNvmfNamespaces(params *GetNvmfNamespacesParams, opts ...ClientOption) (*GetNvmfNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespaces",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespacesConnection get nvmf namespaces connection API
*/
func (a *Client) GetNvmfNamespacesConnection(params *GetNvmfNamespacesConnectionParams, opts ...ClientOption) (*GetNvmfNamespacesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespacesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespacesConnection",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespaces-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespacesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespacesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespacesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfSubsystems get nvmf subsystems API
*/
func (a *Client) GetNvmfSubsystems(params *GetNvmfSubsystemsParams, opts ...ClientOption) (*GetNvmfSubsystemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfSubsystemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfSubsystems",
		Method:             "POST",
		PathPattern:        "/get-nvmf-subsystems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfSubsystemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfSubsystemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfSubsystems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfSubsystemsConnection get nvmf subsystems connection API
*/
func (a *Client) GetNvmfSubsystemsConnection(params *GetNvmfSubsystemsConnectionParams, opts ...ClientOption) (*GetNvmfSubsystemsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfSubsystemsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfSubsystemsConnection",
		Method:             "POST",
		PathPattern:        "/get-nvmf-subsystems-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfSubsystemsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfSubsystemsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfSubsystemsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizations get organizations API
*/
func (a *Client) GetOrganizations(params *GetOrganizationsParams, opts ...ClientOption) (*GetOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizations",
		Method:             "POST",
		PathPattern:        "/get-organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrganizationsConnection get organizations connection API
*/
func (a *Client) GetOrganizationsConnection(params *GetOrganizationsConnectionParams, opts ...ClientOption) (*GetOrganizationsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrganizationsConnection",
		Method:             "POST",
		PathPattern:        "/get-organizations-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrganizationsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPmemDimms get pmem dimms API
*/
func (a *Client) GetPmemDimms(params *GetPmemDimmsParams, opts ...ClientOption) (*GetPmemDimmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPmemDimmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPmemDimms",
		Method:             "POST",
		PathPattern:        "/get-pmem-dimms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPmemDimmsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPmemDimmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPmemDimms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPmemDimmsConnection get pmem dimms connection API
*/
func (a *Client) GetPmemDimmsConnection(params *GetPmemDimmsConnectionParams, opts ...ClientOption) (*GetPmemDimmsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPmemDimmsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPmemDimmsConnection",
		Method:             "POST",
		PathPattern:        "/get-pmem-dimms-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPmemDimmsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPmemDimmsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPmemDimmsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRackTopoes get rack topoes API
*/
func (a *Client) GetRackTopoes(params *GetRackTopoesParams, opts ...ClientOption) (*GetRackTopoesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRackTopoesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRackTopoes",
		Method:             "POST",
		PathPattern:        "/get-rack-topoes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRackTopoesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRackTopoesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRackTopoes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRackTopoesConnection get rack topoes connection API
*/
func (a *Client) GetRackTopoesConnection(params *GetRackTopoesConnectionParams, opts ...ClientOption) (*GetRackTopoesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRackTopoesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRackTopoesConnection",
		Method:             "POST",
		PathPattern:        "/get-rack-topoes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRackTopoesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRackTopoesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRackTopoesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportTasks get report tasks API
*/
func (a *Client) GetReportTasks(params *GetReportTasksParams, opts ...ClientOption) (*GetReportTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReportTasks",
		Method:             "POST",
		PathPattern:        "/get-report-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReportTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportTasksConnection get report tasks connection API
*/
func (a *Client) GetReportTasksConnection(params *GetReportTasksConnectionParams, opts ...ClientOption) (*GetReportTasksConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportTasksConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReportTasksConnection",
		Method:             "POST",
		PathPattern:        "/get-report-tasks-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportTasksConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportTasksConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReportTasksConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportTemplates get report templates API
*/
func (a *Client) GetReportTemplates(params *GetReportTemplatesParams, opts ...ClientOption) (*GetReportTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReportTemplates",
		Method:             "POST",
		PathPattern:        "/get-report-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReportTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportTemplatesConnection get report templates connection API
*/
func (a *Client) GetReportTemplatesConnection(params *GetReportTemplatesConnectionParams, opts ...ClientOption) (*GetReportTemplatesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportTemplatesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReportTemplatesConnection",
		Method:             "POST",
		PathPattern:        "/get-report-templates-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportTemplatesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportTemplatesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReportTemplatesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotGroups get snapshot groups API
*/
func (a *Client) GetSnapshotGroups(params *GetSnapshotGroupsParams, opts ...ClientOption) (*GetSnapshotGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotGroups",
		Method:             "POST",
		PathPattern:        "/get-snapshot-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotGroupsConnection get snapshot groups connection API
*/
func (a *Client) GetSnapshotGroupsConnection(params *GetSnapshotGroupsConnectionParams, opts ...ClientOption) (*GetSnapshotGroupsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotGroupsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotGroupsConnection",
		Method:             "POST",
		PathPattern:        "/get-snapshot-groups-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotGroupsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotGroupsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotGroupsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotPlanTasks get snapshot plan tasks API
*/
func (a *Client) GetSnapshotPlanTasks(params *GetSnapshotPlanTasksParams, opts ...ClientOption) (*GetSnapshotPlanTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotPlanTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotPlanTasks",
		Method:             "POST",
		PathPattern:        "/get-snapshot-plan-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotPlanTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotPlanTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotPlanTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotPlanTasksConnection get snapshot plan tasks connection API
*/
func (a *Client) GetSnapshotPlanTasksConnection(params *GetSnapshotPlanTasksConnectionParams, opts ...ClientOption) (*GetSnapshotPlanTasksConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotPlanTasksConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotPlanTasksConnection",
		Method:             "POST",
		PathPattern:        "/get-snapshot-plan-tasks-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotPlanTasksConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotPlanTasksConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotPlanTasksConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotPlans get snapshot plans API
*/
func (a *Client) GetSnapshotPlans(params *GetSnapshotPlansParams, opts ...ClientOption) (*GetSnapshotPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotPlans",
		Method:             "POST",
		PathPattern:        "/get-snapshot-plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotPlansConnection get snapshot plans connection API
*/
func (a *Client) GetSnapshotPlansConnection(params *GetSnapshotPlansConnectionParams, opts ...ClientOption) (*GetSnapshotPlansConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotPlansConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotPlansConnection",
		Method:             "POST",
		PathPattern:        "/get-snapshot-plans-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotPlansConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotPlansConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotPlansConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTransports get snmp transports API
*/
func (a *Client) GetSnmpTransports(params *GetSnmpTransportsParams, opts ...ClientOption) (*GetSnmpTransportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTransportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTransports",
		Method:             "POST",
		PathPattern:        "/get-snmp-transports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTransportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTransportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTransports: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTransportsConnection get snmp transports connection API
*/
func (a *Client) GetSnmpTransportsConnection(params *GetSnmpTransportsConnectionParams, opts ...ClientOption) (*GetSnmpTransportsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTransportsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTransportsConnection",
		Method:             "POST",
		PathPattern:        "/get-snmp-transports-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTransportsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTransportsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTransportsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTrapReceivers get snmp trap receivers API
*/
func (a *Client) GetSnmpTrapReceivers(params *GetSnmpTrapReceiversParams, opts ...ClientOption) (*GetSnmpTrapReceiversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTrapReceiversParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTrapReceivers",
		Method:             "POST",
		PathPattern:        "/get-snmp-trap-receivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTrapReceiversReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTrapReceiversOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTrapReceivers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTrapReceiversConnection get snmp trap receivers connection API
*/
func (a *Client) GetSnmpTrapReceiversConnection(params *GetSnmpTrapReceiversConnectionParams, opts ...ClientOption) (*GetSnmpTrapReceiversConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTrapReceiversConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTrapReceiversConnection",
		Method:             "POST",
		PathPattern:        "/get-snmp-trap-receivers-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTrapReceiversConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTrapReceiversConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTrapReceiversConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetStoragePoliciesConnector get storage policies connector API
*/
func (a *Client) GetStoragePoliciesConnector(params *GetStoragePoliciesConnectorParams, opts ...ClientOption) (*GetStoragePoliciesConnectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragePoliciesConnectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStoragePoliciesConnector",
		Method:             "POST",
		PathPattern:        "/get-storage-policies-connector",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStoragePoliciesConnectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStoragePoliciesConnectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStoragePoliciesConnector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSvtImages get svt images API
*/
func (a *Client) GetSvtImages(params *GetSvtImagesParams, opts ...ClientOption) (*GetSvtImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSvtImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSvtImages",
		Method:             "POST",
		PathPattern:        "/get-svt-images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSvtImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSvtImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSvtImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSvtImagesConnection get svt images connection API
*/
func (a *Client) GetSvtImagesConnection(params *GetSvtImagesConnectionParams, opts ...ClientOption) (*GetSvtImagesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSvtImagesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSvtImagesConnection",
		Method:             "POST",
		PathPattern:        "/get-svt-images-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSvtImagesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSvtImagesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSvtImagesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemAuditLogs get system audit logs API
*/
func (a *Client) GetSystemAuditLogs(params *GetSystemAuditLogsParams, opts ...ClientOption) (*GetSystemAuditLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemAuditLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSystemAuditLogs",
		Method:             "POST",
		PathPattern:        "/get-system-audit-logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemAuditLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemAuditLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSystemAuditLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSystemAuditLogsConnection get system audit logs connection API
*/
func (a *Client) GetSystemAuditLogsConnection(params *GetSystemAuditLogsConnectionParams, opts ...ClientOption) (*GetSystemAuditLogsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemAuditLogsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSystemAuditLogsConnection",
		Method:             "POST",
		PathPattern:        "/get-system-audit-logs-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemAuditLogsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemAuditLogsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSystemAuditLogsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTasks get tasks API
*/
func (a *Client) GetTasks(params *GetTasksParams, opts ...ClientOption) (*GetTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTasks",
		Method:             "POST",
		PathPattern:        "/get-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTasksConnection get tasks connection API
*/
func (a *Client) GetTasksConnection(params *GetTasksConnectionParams, opts ...ClientOption) (*GetTasksConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTasksConnection",
		Method:             "POST",
		PathPattern:        "/get-tasks-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTasksConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetTasksConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUploadTasks get upload tasks API
*/
func (a *Client) GetUploadTasks(params *GetUploadTasksParams, opts ...ClientOption) (*GetUploadTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUploadTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUploadTasks",
		Method:             "POST",
		PathPattern:        "/get-upload-tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUploadTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUploadTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUploadTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUploadTasksConnection get upload tasks connection API
*/
func (a *Client) GetUploadTasksConnection(params *GetUploadTasksConnectionParams, opts ...ClientOption) (*GetUploadTasksConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUploadTasksConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUploadTasksConnection",
		Method:             "POST",
		PathPattern:        "/get-upload-tasks-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUploadTasksConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUploadTasksConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUploadTasksConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsbDevices get usb devices API
*/
func (a *Client) GetUsbDevices(params *GetUsbDevicesParams, opts ...ClientOption) (*GetUsbDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsbDevicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsbDevices",
		Method:             "POST",
		PathPattern:        "/get-usb-devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsbDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsbDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsbDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsbDevicesConnection get usb devices connection API
*/
func (a *Client) GetUsbDevicesConnection(params *GetUsbDevicesConnectionParams, opts ...ClientOption) (*GetUsbDevicesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsbDevicesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsbDevicesConnection",
		Method:             "POST",
		PathPattern:        "/get-usb-devices-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsbDevicesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsbDevicesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsbDevicesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserAuditLogs get user audit logs API
*/
func (a *Client) GetUserAuditLogs(params *GetUserAuditLogsParams, opts ...ClientOption) (*GetUserAuditLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAuditLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserAuditLogs",
		Method:             "POST",
		PathPattern:        "/get-user-audit-logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserAuditLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAuditLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserAuditLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserAuditLogsConnection get user audit logs connection API
*/
func (a *Client) GetUserAuditLogsConnection(params *GetUserAuditLogsConnectionParams, opts ...ClientOption) (*GetUserAuditLogsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAuditLogsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserAuditLogsConnection",
		Method:             "POST",
		PathPattern:        "/get-user-audit-logs-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserAuditLogsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAuditLogsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserAuditLogsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRoleNexts get user role nexts API
*/
func (a *Client) GetUserRoleNexts(params *GetUserRoleNextsParams, opts ...ClientOption) (*GetUserRoleNextsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRoleNextsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserRoleNexts",
		Method:             "POST",
		PathPattern:        "/get-user-role-nexts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRoleNextsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRoleNextsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserRoleNexts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRoleNextsConnection get user role nexts connection API
*/
func (a *Client) GetUserRoleNextsConnection(params *GetUserRoleNextsConnectionParams, opts ...ClientOption) (*GetUserRoleNextsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRoleNextsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUserRoleNextsConnection",
		Method:             "POST",
		PathPattern:        "/get-user-role-nexts-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRoleNextsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRoleNextsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUserRoleNextsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsers get users API
*/
func (a *Client) GetUsers(params *GetUsersParams, opts ...ClientOption) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "POST",
		PathPattern:        "/get-users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsersConnection get users connection API
*/
func (a *Client) GetUsersConnection(params *GetUsersConnectionParams, opts ...ClientOption) (*GetUsersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetUsersConnection",
		Method:             "POST",
		PathPattern:        "/get-users-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcenterAccounts get vcenter accounts API
*/
func (a *Client) GetVcenterAccounts(params *GetVcenterAccountsParams, opts ...ClientOption) (*GetVcenterAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcenterAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVcenterAccounts",
		Method:             "POST",
		PathPattern:        "/get-vcenter-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVcenterAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcenterAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVcenterAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcenterAccountsConnection get vcenter accounts connection API
*/
func (a *Client) GetVcenterAccountsConnection(params *GetVcenterAccountsConnectionParams, opts ...ClientOption) (*GetVcenterAccountsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcenterAccountsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVcenterAccountsConnection",
		Method:             "POST",
		PathPattern:        "/get-vcenter-accounts-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVcenterAccountsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcenterAccountsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVcenterAccountsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVdses get vdses API
*/
func (a *Client) GetVdses(params *GetVdsesParams, opts ...ClientOption) (*GetVdsesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVdsesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVdses",
		Method:             "POST",
		PathPattern:        "/get-vdses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVdsesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVdsesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVdses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVdsesConnection get vdses connection API
*/
func (a *Client) GetVdsesConnection(params *GetVdsesConnectionParams, opts ...ClientOption) (*GetVdsesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVdsesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVdsesConnection",
		Method:             "POST",
		PathPattern:        "/get-vdses-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVdsesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVdsesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVdsesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetViews get views API
*/
func (a *Client) GetViews(params *GetViewsParams, opts ...ClientOption) (*GetViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViews",
		Method:             "POST",
		PathPattern:        "/get-views",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetViewsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetViews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetViewsConnection get views connection API
*/
func (a *Client) GetViewsConnection(params *GetViewsConnectionParams, opts ...ClientOption) (*GetViewsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetViewsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetViewsConnection",
		Method:             "POST",
		PathPattern:        "/get-views-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetViewsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetViewsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetViewsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVlans get vlans API
*/
func (a *Client) GetVlans(params *GetVlansParams, opts ...ClientOption) (*GetVlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVlans",
		Method:             "POST",
		PathPattern:        "/get-vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVlansConnection get vlans connection API
*/
func (a *Client) GetVlansConnection(params *GetVlansConnectionParams, opts ...ClientOption) (*GetVlansConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVlansConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVlansConnection",
		Method:             "POST",
		PathPattern:        "/get-vlans-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVlansConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVlansConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVlansConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMDisks get Vm disks API
*/
func (a *Client) GetVMDisks(params *GetVMDisksParams, opts ...ClientOption) (*GetVMDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmDisks",
		Method:             "POST",
		PathPattern:        "/get-vm-disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMDisksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmDisks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMDisksConnection get Vm disks connection API
*/
func (a *Client) GetVMDisksConnection(params *GetVMDisksConnectionParams, opts ...ClientOption) (*GetVMDisksConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMDisksConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmDisksConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-disks-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMDisksConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMDisksConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmDisksConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMEntityFilterResults get Vm entity filter results API
*/
func (a *Client) GetVMEntityFilterResults(params *GetVMEntityFilterResultsParams, opts ...ClientOption) (*GetVMEntityFilterResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMEntityFilterResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmEntityFilterResults",
		Method:             "POST",
		PathPattern:        "/get-vm-entity-filter-results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMEntityFilterResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMEntityFilterResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmEntityFilterResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMEntityFilterResultsConnection get Vm entity filter results connection API
*/
func (a *Client) GetVMEntityFilterResultsConnection(params *GetVMEntityFilterResultsConnectionParams, opts ...ClientOption) (*GetVMEntityFilterResultsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMEntityFilterResultsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmEntityFilterResultsConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-entity-filter-results-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMEntityFilterResultsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMEntityFilterResultsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmEntityFilterResultsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMFolders get Vm folders API
*/
func (a *Client) GetVMFolders(params *GetVMFoldersParams, opts ...ClientOption) (*GetVMFoldersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMFoldersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmFolders",
		Method:             "POST",
		PathPattern:        "/get-vm-folders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMFoldersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMFoldersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmFolders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMFoldersConnection get Vm folders connection API
*/
func (a *Client) GetVMFoldersConnection(params *GetVMFoldersConnectionParams, opts ...ClientOption) (*GetVMFoldersConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMFoldersConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmFoldersConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-folders-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMFoldersConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMFoldersConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmFoldersConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMNics get Vm nics API
*/
func (a *Client) GetVMNics(params *GetVMNicsParams, opts ...ClientOption) (*GetVMNicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMNicsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmNics",
		Method:             "POST",
		PathPattern:        "/get-vm-nics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMNicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMNicsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmNics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMNicsConnection get Vm nics connection API
*/
func (a *Client) GetVMNicsConnection(params *GetVMNicsConnectionParams, opts ...ClientOption) (*GetVMNicsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMNicsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmNicsConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-nics-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMNicsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMNicsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmNicsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMPlacementGroups get Vm placement groups API
*/
func (a *Client) GetVMPlacementGroups(params *GetVMPlacementGroupsParams, opts ...ClientOption) (*GetVMPlacementGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMPlacementGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmPlacementGroups",
		Method:             "POST",
		PathPattern:        "/get-vm-placement-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMPlacementGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMPlacementGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmPlacementGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMPlacementGroupsConnection get Vm placement groups connection API
*/
func (a *Client) GetVMPlacementGroupsConnection(params *GetVMPlacementGroupsConnectionParams, opts ...ClientOption) (*GetVMPlacementGroupsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMPlacementGroupsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmPlacementGroupsConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-placement-groups-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMPlacementGroupsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMPlacementGroupsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmPlacementGroupsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMSnapshots get Vm snapshots API
*/
func (a *Client) GetVMSnapshots(params *GetVMSnapshotsParams, opts ...ClientOption) (*GetVMSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmSnapshots",
		Method:             "POST",
		PathPattern:        "/get-vm-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMSnapshotsConnection get Vm snapshots connection API
*/
func (a *Client) GetVMSnapshotsConnection(params *GetVMSnapshotsConnectionParams, opts ...ClientOption) (*GetVMSnapshotsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMSnapshotsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmSnapshotsConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-snapshots-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMSnapshotsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMSnapshotsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmSnapshotsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMTemplates get Vm templates API
*/
func (a *Client) GetVMTemplates(params *GetVMTemplatesParams, opts ...ClientOption) (*GetVMTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmTemplates",
		Method:             "POST",
		PathPattern:        "/get-vm-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMTemplatesConnection get Vm templates connection API
*/
func (a *Client) GetVMTemplatesConnection(params *GetVMTemplatesConnectionParams, opts ...ClientOption) (*GetVMTemplatesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMTemplatesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmTemplatesConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-templates-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMTemplatesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMTemplatesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmTemplatesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMVolumes get Vm volumes API
*/
func (a *Client) GetVMVolumes(params *GetVMVolumesParams, opts ...ClientOption) (*GetVMVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMVolumesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmVolumes",
		Method:             "POST",
		PathPattern:        "/get-vm-volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMVolumesConnection get Vm volumes connection API
*/
func (a *Client) GetVMVolumesConnection(params *GetVMVolumesConnectionParams, opts ...ClientOption) (*GetVMVolumesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMVolumesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmVolumesConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-volumes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMVolumesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMVolumesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmVolumesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVms get vms API
*/
func (a *Client) GetVms(params *GetVmsParams, opts ...ClientOption) (*GetVmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVms",
		Method:             "POST",
		PathPattern:        "/get-vms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVmsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVmsConnection get vms connection API
*/
func (a *Client) GetVmsConnection(params *GetVmsConnectionParams, opts ...ClientOption) (*GetVmsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmsConnection",
		Method:             "POST",
		PathPattern:        "/get-vms-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVmsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVsphereEsxiAccounts get vsphere esxi accounts API
*/
func (a *Client) GetVsphereEsxiAccounts(params *GetVsphereEsxiAccountsParams, opts ...ClientOption) (*GetVsphereEsxiAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVsphereEsxiAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVsphereEsxiAccounts",
		Method:             "POST",
		PathPattern:        "/get-vsphere-esxi-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVsphereEsxiAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVsphereEsxiAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVsphereEsxiAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVsphereEsxiAccountsConnection get vsphere esxi accounts connection API
*/
func (a *Client) GetVsphereEsxiAccountsConnection(params *GetVsphereEsxiAccountsConnectionParams, opts ...ClientOption) (*GetVsphereEsxiAccountsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVsphereEsxiAccountsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVsphereEsxiAccountsConnection",
		Method:             "POST",
		PathPattern:        "/get-vsphere-esxi-accounts-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVsphereEsxiAccountsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVsphereEsxiAccountsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVsphereEsxiAccountsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWitnesses get witnesses API
*/
func (a *Client) GetWitnesses(params *GetWitnessesParams, opts ...ClientOption) (*GetWitnessesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWitnessesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWitnesses",
		Method:             "POST",
		PathPattern:        "/get-witnesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWitnessesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWitnessesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWitnesses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetWitnessesConnection get witnesses connection API
*/
func (a *Client) GetWitnessesConnection(params *GetWitnessesConnectionParams, opts ...ClientOption) (*GetWitnessesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWitnessesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetWitnessesConnection",
		Method:             "POST",
		PathPattern:        "/get-witnesses-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWitnessesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWitnessesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetWitnessesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZoneTopoes get zone topoes API
*/
func (a *Client) GetZoneTopoes(params *GetZoneTopoesParams, opts ...ClientOption) (*GetZoneTopoesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneTopoesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZoneTopoes",
		Method:             "POST",
		PathPattern:        "/get-zone-topoes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZoneTopoesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneTopoesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZoneTopoes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZoneTopoesConnection get zone topoes connection API
*/
func (a *Client) GetZoneTopoesConnection(params *GetZoneTopoesConnectionParams, opts ...ClientOption) (*GetZoneTopoesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZoneTopoesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZoneTopoesConnection",
		Method:             "POST",
		PathPattern:        "/get-zone-topoes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZoneTopoesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZoneTopoesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZoneTopoesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZones get zones API
*/
func (a *Client) GetZones(params *GetZonesParams, opts ...ClientOption) (*GetZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZones",
		Method:             "POST",
		PathPattern:        "/get-zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZones: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZonesConnection get zones connection API
*/
func (a *Client) GetZonesConnection(params *GetZonesConnectionParams, opts ...ClientOption) (*GetZonesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZonesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetZonesConnection",
		Method:             "POST",
		PathPattern:        "/get-zones-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetZonesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetZonesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetZonesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstallVmtools install vmtools API
*/
func (a *Client) InstallVmtools(params *InstallVmtoolsParams, opts ...ClientOption) (*InstallVmtoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallVmtoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallVmtools",
		Method:             "POST",
		PathPattern:        "/install-vmtools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallVmtoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallVmtoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InstallVmtools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KeepSnapshotGroup keep snapshot group API
*/
func (a *Client) KeepSnapshotGroup(params *KeepSnapshotGroupParams, opts ...ClientOption) (*KeepSnapshotGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeepSnapshotGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KeepSnapshotGroup",
		Method:             "POST",
		PathPattern:        "/keep-snapshot-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &KeepSnapshotGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeepSnapshotGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for KeepSnapshotGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Login login API
*/
func (a *Client) Login(params *LoginParams, opts ...ClientOption) (*LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Login",
		Method:             "POST",
		PathPattern:        "/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Login: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MigRateVM mig rate Vm API
*/
func (a *Client) MigRateVM(params *MigRateVMParams, opts ...ClientOption) (*MigRateVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMigRateVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MigRateVm",
		Method:             "POST",
		PathPattern:        "/migrate-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MigRateVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MigRateVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MigRateVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MountDisk mount disk API
*/
func (a *Client) MountDisk(params *MountDiskParams, opts ...ClientOption) (*MountDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMountDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MountDisk",
		Method:             "POST",
		PathPattern:        "/mount-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MountDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MountDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MountDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveBrickTopo move brick topo API
*/
func (a *Client) MoveBrickTopo(params *MoveBrickTopoParams, opts ...ClientOption) (*MoveBrickTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveBrickTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MoveBrickTopo",
		Method:             "POST",
		PathPattern:        "/move-brick-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveBrickTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveBrickTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MoveBrickTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MoveVMToRecycleBin move Vm to recycle bin API
*/
func (a *Client) MoveVMToRecycleBin(params *MoveVMToRecycleBinParams, opts ...ClientOption) (*MoveVMToRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveVMToRecycleBinParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "MoveVmToRecycleBin",
		Method:             "POST",
		PathPattern:        "/move-vm-to-recycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveVMToRecycleBinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveVMToRecycleBinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MoveVmToRecycleBin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RebuildVM rebuild Vm API
*/
func (a *Client) RebuildVM(params *RebuildVMParams, opts ...ClientOption) (*RebuildVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRebuildVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RebuildVm",
		Method:             "POST",
		PathPattern:        "/rebuild-vm-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RebuildVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RebuildVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RebuildVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RecoverVMFromRecycleBin recover Vm from recycle bin API
*/
func (a *Client) RecoverVMFromRecycleBin(params *RecoverVMFromRecycleBinParams, opts ...ClientOption) (*RecoverVMFromRecycleBinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecoverVMFromRecycleBinParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RecoverVmFromRecycleBin",
		Method:             "POST",
		PathPattern:        "/recover-vm-from-recycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RecoverVMFromRecycleBinReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RecoverVMFromRecycleBinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RecoverVmFromRecycleBin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveLabelsFromResources remove labels from resources API
*/
func (a *Client) RemoveLabelsFromResources(params *RemoveLabelsFromResourcesParams, opts ...ClientOption) (*RemoveLabelsFromResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveLabelsFromResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveLabelsFromResources",
		Method:             "POST",
		PathPattern:        "/remove-labels-from-resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveLabelsFromResourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveLabelsFromResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveLabelsFromResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMCdRom remove Vm cd rom API
*/
func (a *Client) RemoveVMCdRom(params *RemoveVMCdRomParams, opts ...ClientOption) (*RemoveVMCdRomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMCdRomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmCdRom",
		Method:             "POST",
		PathPattern:        "/remove-vm-cd-rom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMCdRomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMCdRomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmCdRom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMDisk remove Vm disk API
*/
func (a *Client) RemoveVMDisk(params *RemoveVMDiskParams, opts ...ClientOption) (*RemoveVMDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmDisk",
		Method:             "POST",
		PathPattern:        "/remove-vm-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMNic remove Vm nic API
*/
func (a *Client) RemoveVMNic(params *RemoveVMNicParams, opts ...ClientOption) (*RemoveVMNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMNicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmNic",
		Method:             "POST",
		PathPattern:        "/remove-vm-nic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMNicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveVMToFolder remove Vm to folder API
*/
func (a *Client) RemoveVMToFolder(params *RemoveVMToFolderParams, opts ...ClientOption) (*RemoveVMToFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveVMToFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveVmToFolder",
		Method:             "POST",
		PathPattern:        "/remove-vm-from-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveVMToFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveVMToFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveVmToFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResolveAlert resolve alert API
*/
func (a *Client) ResolveAlert(params *ResolveAlertParams, opts ...ClientOption) (*ResolveAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResolveAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResolveAlert",
		Method:             "POST",
		PathPattern:        "/resolve-alert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResolveAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResolveAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResolveAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartVM restart Vm API
*/
func (a *Client) RestartVM(params *RestartVMParams, opts ...ClientOption) (*RestartVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RestartVm",
		Method:             "POST",
		PathPattern:        "/restart-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestartVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestartVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeSnapshotPlan resume snapshot plan API
*/
func (a *Client) ResumeSnapshotPlan(params *ResumeSnapshotPlanParams, opts ...ClientOption) (*ResumeSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResumeSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/resume-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeSnapshotPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResumeSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeVM resume Vm API
*/
func (a *Client) ResumeVM(params *ResumeVMParams, opts ...ClientOption) (*ResumeVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResumeVm",
		Method:             "POST",
		PathPattern:        "/resume-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResumeVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackIscsiLunFromSnapshot rollback iscsi lun from snapshot API
*/
func (a *Client) RollbackIscsiLunFromSnapshot(params *RollbackIscsiLunFromSnapshotParams, opts ...ClientOption) (*RollbackIscsiLunFromSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackIscsiLunFromSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RollbackIscsiLunFromSnapshot",
		Method:             "POST",
		PathPattern:        "/rollback-iscsi-lun-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollbackIscsiLunFromSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackIscsiLunFromSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RollbackIscsiLunFromSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackNvmfNamespaceFromSnapshot rollback nvmf namespace from snapshot API
*/
func (a *Client) RollbackNvmfNamespaceFromSnapshot(params *RollbackNvmfNamespaceFromSnapshotParams, opts ...ClientOption) (*RollbackNvmfNamespaceFromSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackNvmfNamespaceFromSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RollbackNvmfNamespaceFromSnapshot",
		Method:             "POST",
		PathPattern:        "/rollback-nvmf-namespace-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollbackNvmfNamespaceFromSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackNvmfNamespaceFromSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RollbackNvmfNamespaceFromSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackSnapshotGroup rollback snapshot group API
*/
func (a *Client) RollbackSnapshotGroup(params *RollbackSnapshotGroupParams, opts ...ClientOption) (*RollbackSnapshotGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackSnapshotGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RollbackSnapshotGroup",
		Method:             "POST",
		PathPattern:        "/rollback-snapshot-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollbackSnapshotGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackSnapshotGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RollbackSnapshotGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackVM rollback Vm API
*/
func (a *Client) RollbackVM(params *RollbackVMParams, opts ...ClientOption) (*RollbackVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RollbackVm",
		Method:             "POST",
		PathPattern:        "/rollback-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollbackVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RollbackVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShutDownVM shut down Vm API
*/
func (a *Client) ShutDownVM(params *ShutDownVMParams, opts ...ClientOption) (*ShutDownVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutDownVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ShutDownVm",
		Method:             "POST",
		PathPattern:        "/shut-down-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShutDownVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutDownVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ShutDownVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartVM start Vm API
*/
func (a *Client) StartVM(params *StartVMParams, opts ...ClientOption) (*StartVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartVm",
		Method:             "POST",
		PathPattern:        "/start-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuspendSnapshotPlan suspend snapshot plan API
*/
func (a *Client) SuspendSnapshotPlan(params *SuspendSnapshotPlanParams, opts ...ClientOption) (*SuspendSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuspendSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SuspendSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/suspend-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuspendSnapshotPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuspendSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SuspendSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuspendVM suspend Vm API
*/
func (a *Client) SuspendVM(params *SuspendVMParams, opts ...ClientOption) (*SuspendVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuspendVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SuspendVm",
		Method:             "POST",
		PathPattern:        "/suspend-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuspendVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuspendVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SuspendVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TriggerDiskBlink trigger disk blink API
*/
func (a *Client) TriggerDiskBlink(params *TriggerDiskBlinkParams, opts ...ClientOption) (*TriggerDiskBlinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerDiskBlinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriggerDiskBlink",
		Method:             "POST",
		PathPattern:        "/trigger-disk-blink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerDiskBlinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerDiskBlinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TriggerDiskBlink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnmountDisk unmount disk API
*/
func (a *Client) UnmountDisk(params *UnmountDiskParams, opts ...ClientOption) (*UnmountDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnmountDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnmountDisk",
		Method:             "POST",
		PathPattern:        "/unmount-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnmountDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnmountDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnmountDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnmountUsbDevice unmount usb device API
*/
func (a *Client) UnmountUsbDevice(params *UnmountUsbDeviceParams, opts ...ClientOption) (*UnmountUsbDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnmountUsbDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UnmountUsbDevice",
		Method:             "POST",
		PathPattern:        "/unmount-usb-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnmountUsbDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnmountUsbDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnmountUsbDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBrickTopo update brick topo API
*/
func (a *Client) UpdateBrickTopo(params *UpdateBrickTopoParams, opts ...ClientOption) (*UpdateBrickTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBrickTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateBrickTopo",
		Method:             "POST",
		PathPattern:        "/update-brick-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBrickTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBrickTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateBrickTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCluster update cluster API
*/
func (a *Client) UpdateCluster(params *UpdateClusterParams, opts ...ClientOption) (*UpdateClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCluster",
		Method:             "POST",
		PathPattern:        "/update-cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCluster: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterLicense update cluster license API
*/
func (a *Client) UpdateClusterLicense(params *UpdateClusterLicenseParams, opts ...ClientOption) (*UpdateClusterLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterLicense",
		Method:             "POST",
		PathPattern:        "/update-cluster-license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterLicenseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterRecycleBinSetting update cluster recycle bin setting API
*/
func (a *Client) UpdateClusterRecycleBinSetting(params *UpdateClusterRecycleBinSettingParams, opts ...ClientOption) (*UpdateClusterRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/update-cluster-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterRecycleBinSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConsistencyGroup update consistency group API
*/
func (a *Client) UpdateConsistencyGroup(params *UpdateConsistencyGroupParams, opts ...ClientOption) (*UpdateConsistencyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConsistencyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConsistencyGroup",
		Method:             "POST",
		PathPattern:        "/update-consistency-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConsistencyGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConsistencyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateConsistencyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConsistencyGroupSnapshot update consistency group snapshot API
*/
func (a *Client) UpdateConsistencyGroupSnapshot(params *UpdateConsistencyGroupSnapshotParams, opts ...ClientOption) (*UpdateConsistencyGroupSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConsistencyGroupSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConsistencyGroupSnapshot",
		Method:             "POST",
		PathPattern:        "/rollback-consistency-snapshot-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConsistencyGroupSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConsistencyGroupSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateConsistencyGroupSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomizeAlertRule update customize alert rule API
*/
func (a *Client) UpdateCustomizeAlertRule(params *UpdateCustomizeAlertRuleParams, opts ...ClientOption) (*UpdateCustomizeAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomizeAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCustomizeAlertRule",
		Method:             "POST",
		PathPattern:        "/update-customize-alert-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomizeAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomizeAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCustomizeAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDatacenter update datacenter API
*/
func (a *Client) UpdateDatacenter(params *UpdateDatacenterParams, opts ...ClientOption) (*UpdateDatacenterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDatacenterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDatacenter",
		Method:             "POST",
		PathPattern:        "/update-datacenter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDatacenterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDatacenterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDatacenter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDeploy update deploy API
*/
func (a *Client) UpdateDeploy(params *UpdateDeployParams, opts ...ClientOption) (*UpdateDeployOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeployParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateDeploy",
		Method:             "POST",
		PathPattern:        "/update-license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeployReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDeployOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDeploy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateElfImage update elf image API
*/
func (a *Client) UpdateElfImage(params *UpdateElfImageParams, opts ...ClientOption) (*UpdateElfImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateElfImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateElfImage",
		Method:             "POST",
		PathPattern:        "/update-elf-image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateElfImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateElfImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateElfImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEntityFilter update entity filter API
*/
func (a *Client) UpdateEntityFilter(params *UpdateEntityFilterParams, opts ...ClientOption) (*UpdateEntityFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEntityFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateEntityFilter",
		Method:             "POST",
		PathPattern:        "/update-entity-filter",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEntityFilterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEntityFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateEntityFilter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGlobalAlertRule update global alert rule API
*/
func (a *Client) UpdateGlobalAlertRule(params *UpdateGlobalAlertRuleParams, opts ...ClientOption) (*UpdateGlobalAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGlobalAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGlobalAlertRule",
		Method:             "POST",
		PathPattern:        "/update-global-alert-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGlobalAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGlobalAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGlobalAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGlobalRecycleBinSetting update global recycle bin setting API
*/
func (a *Client) UpdateGlobalRecycleBinSetting(params *UpdateGlobalRecycleBinSettingParams, opts ...ClientOption) (*UpdateGlobalRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGlobalRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGlobalRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/update-global-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGlobalRecycleBinSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGlobalRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGlobalRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGraph update graph API
*/
func (a *Client) UpdateGraph(params *UpdateGraphParams, opts ...ClientOption) (*UpdateGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGraphParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGraph",
		Method:             "POST",
		PathPattern:        "/update-graph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGraphReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGraphOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGraph: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateHost update host API
*/
func (a *Client) UpdateHost(params *UpdateHostParams, opts ...ClientOption) (*UpdateHostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateHost",
		Method:             "POST",
		PathPattern:        "/update-host",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateHost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIscsiLun update iscsi lun API
*/
func (a *Client) UpdateIscsiLun(params *UpdateIscsiLunParams, opts ...ClientOption) (*UpdateIscsiLunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIscsiLunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIscsiLun",
		Method:             "POST",
		PathPattern:        "/update-iscsi-lun",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIscsiLunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIscsiLunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateIscsiLun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateIscsiTarget update iscsi target API
*/
func (a *Client) UpdateIscsiTarget(params *UpdateIscsiTargetParams, opts ...ClientOption) (*UpdateIscsiTargetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIscsiTargetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateIscsiTarget",
		Method:             "POST",
		PathPattern:        "/update-iscsi-target",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIscsiTargetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIscsiTargetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateIscsiTarget: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateLabel update label API
*/
func (a *Client) UpdateLabel(params *UpdateLabelParams, opts ...ClientOption) (*UpdateLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateLabel",
		Method:             "POST",
		PathPattern:        "/update-label",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateManagementVlan update management vlan API
*/
func (a *Client) UpdateManagementVlan(params *UpdateManagementVlanParams, opts ...ClientOption) (*UpdateManagementVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateManagementVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateManagementVlan",
		Method:             "POST",
		PathPattern:        "/update-management-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateManagementVlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateManagementVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateManagementVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMigrationVlan update migration vlan API
*/
func (a *Client) UpdateMigrationVlan(params *UpdateMigrationVlanParams, opts ...ClientOption) (*UpdateMigrationVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMigrationVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMigrationVlan",
		Method:             "POST",
		PathPattern:        "/update-migration-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMigrationVlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMigrationVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateMigrationVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNamespaceGroup update namespace group API
*/
func (a *Client) UpdateNamespaceGroup(params *UpdateNamespaceGroupParams, opts ...ClientOption) (*UpdateNamespaceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNamespaceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNamespaceGroup",
		Method:             "POST",
		PathPattern:        "/update-namespace-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNamespaceGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNamespaceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNamespaceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNfsExport update nfs export API
*/
func (a *Client) UpdateNfsExport(params *UpdateNfsExportParams, opts ...ClientOption) (*UpdateNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNfsExport",
		Method:             "POST",
		PathPattern:        "/update-nfs-export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNfsExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNfsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNfsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNic update nic API
*/
func (a *Client) UpdateNic(params *UpdateNicParams, opts ...ClientOption) (*UpdateNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNic",
		Method:             "POST",
		PathPattern:        "/update-nic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNodeTopo update node topo API
*/
func (a *Client) UpdateNodeTopo(params *UpdateNodeTopoParams, opts ...ClientOption) (*UpdateNodeTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodeTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNodeTopo",
		Method:             "POST",
		PathPattern:        "/move-node-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNodeTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNodeTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNodeTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNvmfNamespace update nvmf namespace API
*/
func (a *Client) UpdateNvmfNamespace(params *UpdateNvmfNamespaceParams, opts ...ClientOption) (*UpdateNvmfNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNvmfNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNvmfNamespace",
		Method:             "POST",
		PathPattern:        "/update-nvmf-namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNvmfNamespaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNvmfNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNvmfNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNvmfSubsystem update nvmf subsystem API
*/
func (a *Client) UpdateNvmfSubsystem(params *UpdateNvmfSubsystemParams, opts ...ClientOption) (*UpdateNvmfSubsystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNvmfSubsystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNvmfSubsystem",
		Method:             "POST",
		PathPattern:        "/update-nvmf-subsystem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNvmfSubsystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNvmfSubsystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNvmfSubsystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateOrganization update organization API
*/
func (a *Client) UpdateOrganization(params *UpdateOrganizationParams, opts ...ClientOption) (*UpdateOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOrganization",
		Method:             "POST",
		PathPattern:        "/update-organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRackTopo update rack topo API
*/
func (a *Client) UpdateRackTopo(params *UpdateRackTopoParams, opts ...ClientOption) (*UpdateRackTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRackTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRackTopo",
		Method:             "POST",
		PathPattern:        "/update-rack-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRackTopoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRackTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRackTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateReportTemplate update report template API
*/
func (a *Client) UpdateReportTemplate(params *UpdateReportTemplateParams, opts ...ClientOption) (*UpdateReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateReportTemplate",
		Method:             "POST",
		PathPattern:        "/update-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReportTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRole update role API
*/
func (a *Client) UpdateRole(params *UpdateRoleParams, opts ...ClientOption) (*UpdateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRole",
		Method:             "POST",
		PathPattern:        "/update-role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSnapshotPlan update snapshot plan API
*/
func (a *Client) UpdateSnapshotPlan(params *UpdateSnapshotPlanParams, opts ...ClientOption) (*UpdateSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/update-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSnapshotPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSnmpTransport update snmp transport API
*/
func (a *Client) UpdateSnmpTransport(params *UpdateSnmpTransportParams, opts ...ClientOption) (*UpdateSnmpTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnmpTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSnmpTransport",
		Method:             "POST",
		PathPattern:        "/update-snmp-transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSnmpTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSnmpTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSnmpTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSnmpTrapReceiver update snmp trap receiver API
*/
func (a *Client) UpdateSnmpTrapReceiver(params *UpdateSnmpTrapReceiverParams, opts ...ClientOption) (*UpdateSnmpTrapReceiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnmpTrapReceiverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSnmpTrapReceiver",
		Method:             "POST",
		PathPattern:        "/update-snmp-trap-receiver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSnmpTrapReceiverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSnmpTrapReceiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSnmpTrapReceiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUsbDevice update usb device API
*/
func (a *Client) UpdateUsbDevice(params *UpdateUsbDeviceParams, opts ...ClientOption) (*UpdateUsbDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsbDeviceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUsbDevice",
		Method:             "POST",
		PathPattern:        "/mount-usb-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUsbDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsbDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUsbDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateUser update user API
*/
func (a *Client) UpdateUser(params *UpdateUserParams, opts ...ClientOption) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateUser",
		Method:             "POST",
		PathPattern:        "/update-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVds update vds API
*/
func (a *Client) UpdateVds(params *UpdateVdsParams, opts ...ClientOption) (*UpdateVdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVdsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVds",
		Method:             "POST",
		PathPattern:        "/update-vds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateView update view API
*/
func (a *Client) UpdateView(params *UpdateViewParams, opts ...ClientOption) (*UpdateViewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateViewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateView",
		Method:             "POST",
		PathPattern:        "/update-view",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateViewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateViewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateView: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVlan update vlan API
*/
func (a *Client) UpdateVlan(params *UpdateVlanParams, opts ...ClientOption) (*UpdateVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVlan",
		Method:             "POST",
		PathPattern:        "/update-vm-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVM update Vm API
*/
func (a *Client) UpdateVM(params *UpdateVMParams, opts ...ClientOption) (*UpdateVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVm",
		Method:             "POST",
		PathPattern:        "/update-vm-basic-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMDisk update Vm disk API
*/
func (a *Client) UpdateVMDisk(params *UpdateVMDiskParams, opts ...ClientOption) (*UpdateVMDiskOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMDiskParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmDisk",
		Method:             "POST",
		PathPattern:        "/update-vm-disk",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMDiskReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMDiskOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmDisk: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMFolder update Vm folder API
*/
func (a *Client) UpdateVMFolder(params *UpdateVMFolderParams, opts ...ClientOption) (*UpdateVMFolderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMFolderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmFolder",
		Method:             "POST",
		PathPattern:        "/update-vm-folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMFolderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMFolderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmFolder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMNic update Vm nic API
*/
func (a *Client) UpdateVMNic(params *UpdateVMNicParams, opts ...ClientOption) (*UpdateVMNicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMNicParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmNic",
		Method:             "POST",
		PathPattern:        "/update-vm-nic",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMNicReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMNicOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmNic: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMPlacementGroup update Vm placement group API
*/
func (a *Client) UpdateVMPlacementGroup(params *UpdateVMPlacementGroupParams, opts ...ClientOption) (*UpdateVMPlacementGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMPlacementGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmPlacementGroup",
		Method:             "POST",
		PathPattern:        "/update-vm-placement-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMPlacementGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMPlacementGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmPlacementGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMTemplateFromVM update Vm template from Vm API
*/
func (a *Client) UpdateVMTemplateFromVM(params *UpdateVMTemplateFromVMParams, opts ...ClientOption) (*UpdateVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/update-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
