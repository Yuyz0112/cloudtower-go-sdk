// Code generated by go-swagger; DO NOT EDIT.

package vm_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vm template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vm template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloneVMTemplateFromVM(params *CloneVMTemplateFromVMParams, opts ...ClientOption) (*CloneVMTemplateFromVMOK, error)

	ConvertVMTemplateFromVM(params *ConvertVMTemplateFromVMParams, opts ...ClientOption) (*ConvertVMTemplateFromVMOK, error)

	DeleteVMTemplate(params *DeleteVMTemplateParams, opts ...ClientOption) (*DeleteVMTemplateOK, error)

	GetVMTemplates(params *GetVMTemplatesParams, opts ...ClientOption) (*GetVMTemplatesOK, error)

	GetVMTemplatesConnection(params *GetVMTemplatesConnectionParams, opts ...ClientOption) (*GetVMTemplatesConnectionOK, error)

	UpdateVMTemplate(params *UpdateVMTemplateParams, opts ...ClientOption) (*UpdateVMTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CloneVMTemplateFromVM clone Vm template from Vm API
*/
func (a *Client) CloneVMTemplateFromVM(params *CloneVMTemplateFromVMParams, opts ...ClientOption) (*CloneVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/clone-vm-template-from-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConvertVMTemplateFromVM convert Vm template from Vm API
*/
func (a *Client) ConvertVMTemplateFromVM(params *ConvertVMTemplateFromVMParams, opts ...ClientOption) (*ConvertVMTemplateFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConvertVMTemplateFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConvertVmTemplateFromVm",
		Method:             "POST",
		PathPattern:        "/convert-vm-template-from-vm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ConvertVMTemplateFromVMReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConvertVMTemplateFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ConvertVmTemplateFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMTemplate delete Vm template API
*/
func (a *Client) DeleteVMTemplate(params *DeleteVMTemplateParams, opts ...ClientOption) (*DeleteVMTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmTemplate",
		Method:             "POST",
		PathPattern:        "/delete-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMTemplates get Vm templates API
*/
func (a *Client) GetVMTemplates(params *GetVMTemplatesParams, opts ...ClientOption) (*GetVMTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmTemplates",
		Method:             "POST",
		PathPattern:        "/get-vm-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMTemplatesConnection get Vm templates connection API
*/
func (a *Client) GetVMTemplatesConnection(params *GetVMTemplatesConnectionParams, opts ...ClientOption) (*GetVMTemplatesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMTemplatesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmTemplatesConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-templates-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMTemplatesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMTemplatesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmTemplatesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVMTemplate update Vm template API
*/
func (a *Client) UpdateVMTemplate(params *UpdateVMTemplateParams, opts ...ClientOption) (*UpdateVMTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVMTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVmTemplate",
		Method:             "POST",
		PathPattern:        "/update-vm-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVMTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVMTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVmTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
