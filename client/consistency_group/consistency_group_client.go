// Code generated by go-swagger; DO NOT EDIT.

package consistency_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new consistency group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for consistency group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateConsistencyGroup(params *CreateConsistencyGroupParams, opts ...ClientOption) (*CreateConsistencyGroupOK, error)

	DeleteConsistencyGroup(params *DeleteConsistencyGroupParams, opts ...ClientOption) (*DeleteConsistencyGroupOK, error)

	GetConsistencyGroups(params *GetConsistencyGroupsParams, opts ...ClientOption) (*GetConsistencyGroupsOK, error)

	GetConsistencyGroupsConnection(params *GetConsistencyGroupsConnectionParams, opts ...ClientOption) (*GetConsistencyGroupsConnectionOK, error)

	UpdateConsistencyGroup(params *UpdateConsistencyGroupParams, opts ...ClientOption) (*UpdateConsistencyGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateConsistencyGroup create consistency group API
*/
func (a *Client) CreateConsistencyGroup(params *CreateConsistencyGroupParams, opts ...ClientOption) (*CreateConsistencyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConsistencyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateConsistencyGroup",
		Method:             "POST",
		PathPattern:        "/create-consistency-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateConsistencyGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateConsistencyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateConsistencyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConsistencyGroup delete consistency group API
*/
func (a *Client) DeleteConsistencyGroup(params *DeleteConsistencyGroupParams, opts ...ClientOption) (*DeleteConsistencyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsistencyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteConsistencyGroup",
		Method:             "POST",
		PathPattern:        "/delete-consistency-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsistencyGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConsistencyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteConsistencyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConsistencyGroups get consistency groups API
*/
func (a *Client) GetConsistencyGroups(params *GetConsistencyGroupsParams, opts ...ClientOption) (*GetConsistencyGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsistencyGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConsistencyGroups",
		Method:             "POST",
		PathPattern:        "/get-consistency-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsistencyGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsistencyGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsistencyGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConsistencyGroupsConnection get consistency groups connection API
*/
func (a *Client) GetConsistencyGroupsConnection(params *GetConsistencyGroupsConnectionParams, opts ...ClientOption) (*GetConsistencyGroupsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsistencyGroupsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConsistencyGroupsConnection",
		Method:             "POST",
		PathPattern:        "/get-consistency-groups-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsistencyGroupsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsistencyGroupsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsistencyGroupsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConsistencyGroup update consistency group API
*/
func (a *Client) UpdateConsistencyGroup(params *UpdateConsistencyGroupParams, opts ...ClientOption) (*UpdateConsistencyGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConsistencyGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConsistencyGroup",
		Method:             "POST",
		PathPattern:        "/update-consistency-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConsistencyGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConsistencyGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateConsistencyGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
