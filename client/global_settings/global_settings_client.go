// Code generated by go-swagger; DO NOT EDIT.

package global_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new global settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for global settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClusterRecycleBinSetting(params *CreateClusterRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterRecycleBinSettingOK, error)

	DeleteClusterRecycleBinSetting(params *DeleteClusterRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterRecycleBinSettingOK, error)

	GetGlobalSettingses(params *GetGlobalSettingsesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalSettingsesOK, error)

	GetGlobalSettingsesConnection(params *GetGlobalSettingsesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalSettingsesConnectionOK, error)

	UpdateClusterRecycleBinSetting(params *UpdateClusterRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterRecycleBinSettingOK, error)

	UpdateGlobalRecycleBinSetting(params *UpdateGlobalRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGlobalRecycleBinSettingOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateClusterRecycleBinSetting create cluster recycle bin setting API
*/
func (a *Client) CreateClusterRecycleBinSetting(params *CreateClusterRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClusterRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateClusterRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/create-cluster-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateClusterRecycleBinSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClusterRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateClusterRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteClusterRecycleBinSetting delete cluster recycle bin setting API
*/
func (a *Client) DeleteClusterRecycleBinSetting(params *DeleteClusterRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClusterRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteClusterRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/delete-cluster-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClusterRecycleBinSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClusterRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteClusterRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalSettingses get global settingses API
*/
func (a *Client) GetGlobalSettingses(params *GetGlobalSettingsesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalSettingsesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalSettingsesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalSettingses",
		Method:             "POST",
		PathPattern:        "/get-global-settingses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalSettingsesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalSettingsesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalSettingses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalSettingsesConnection get global settingses connection API
*/
func (a *Client) GetGlobalSettingsesConnection(params *GetGlobalSettingsesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGlobalSettingsesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalSettingsesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalSettingsesConnection",
		Method:             "POST",
		PathPattern:        "/get-global-settingses-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalSettingsesConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalSettingsesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalSettingsesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateClusterRecycleBinSetting update cluster recycle bin setting API
*/
func (a *Client) UpdateClusterRecycleBinSetting(params *UpdateClusterRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClusterRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClusterRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateClusterRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/update-cluster-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateClusterRecycleBinSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClusterRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateClusterRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGlobalRecycleBinSetting update global recycle bin setting API
*/
func (a *Client) UpdateGlobalRecycleBinSetting(params *UpdateGlobalRecycleBinSettingParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGlobalRecycleBinSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGlobalRecycleBinSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGlobalRecycleBinSetting",
		Method:             "POST",
		PathPattern:        "/update-global-recycle-bin-setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGlobalRecycleBinSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGlobalRecycleBinSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGlobalRecycleBinSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
