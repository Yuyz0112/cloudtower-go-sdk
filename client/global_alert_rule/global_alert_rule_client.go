// Code generated by go-swagger; DO NOT EDIT.

package global_alert_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new global alert rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for global alert rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetGlobalAlertRules(params *GetGlobalAlertRulesParams, opts ...ClientOption) (*GetGlobalAlertRulesOK, error)

	GetGlobalAlertRulesConnection(params *GetGlobalAlertRulesConnectionParams, opts ...ClientOption) (*GetGlobalAlertRulesConnectionOK, error)

	UpdateCustomizeAlertRule(params *UpdateCustomizeAlertRuleParams, opts ...ClientOption) (*UpdateCustomizeAlertRuleOK, error)

	UpdateGlobalAlertRule(params *UpdateGlobalAlertRuleParams, opts ...ClientOption) (*UpdateGlobalAlertRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetGlobalAlertRules get global alert rules API
*/
func (a *Client) GetGlobalAlertRules(params *GetGlobalAlertRulesParams, opts ...ClientOption) (*GetGlobalAlertRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalAlertRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalAlertRules",
		Method:             "POST",
		PathPattern:        "/get-global-alert-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalAlertRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalAlertRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalAlertRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGlobalAlertRulesConnection get global alert rules connection API
*/
func (a *Client) GetGlobalAlertRulesConnection(params *GetGlobalAlertRulesConnectionParams, opts ...ClientOption) (*GetGlobalAlertRulesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalAlertRulesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetGlobalAlertRulesConnection",
		Method:             "POST",
		PathPattern:        "/get-global-alert-rules-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalAlertRulesConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGlobalAlertRulesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGlobalAlertRulesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCustomizeAlertRule update customize alert rule API
*/
func (a *Client) UpdateCustomizeAlertRule(params *UpdateCustomizeAlertRuleParams, opts ...ClientOption) (*UpdateCustomizeAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomizeAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCustomizeAlertRule",
		Method:             "POST",
		PathPattern:        "/update-customize-alert-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCustomizeAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomizeAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCustomizeAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGlobalAlertRule update global alert rule API
*/
func (a *Client) UpdateGlobalAlertRule(params *UpdateGlobalAlertRuleParams, opts ...ClientOption) (*UpdateGlobalAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGlobalAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateGlobalAlertRule",
		Method:             "POST",
		PathPattern:        "/update-global-alert-rule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGlobalAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGlobalAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGlobalAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
