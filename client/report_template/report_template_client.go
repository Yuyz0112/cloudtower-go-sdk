// Code generated by go-swagger; DO NOT EDIT.

package report_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new report template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for report template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateReportTemplate(params *CreateReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReportTemplateOK, error)

	DeleteReportTemplate(params *DeleteReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReportTemplateOK, error)

	GenerateFromReportTemplate(params *GenerateFromReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateFromReportTemplateOK, error)

	GetReportTemplates(params *GetReportTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportTemplatesOK, error)

	GetReportTemplatesConnection(params *GetReportTemplatesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportTemplatesConnectionOK, error)

	UpdateReportTemplate(params *UpdateReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReportTemplateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateReportTemplate create report template API
*/
func (a *Client) CreateReportTemplate(params *CreateReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateReportTemplate",
		Method:             "POST",
		PathPattern:        "/create-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateReportTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteReportTemplate delete report template API
*/
func (a *Client) DeleteReportTemplate(params *DeleteReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteReportTemplate",
		Method:             "POST",
		PathPattern:        "/delete-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteReportTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateFromReportTemplate generate from report template API
*/
func (a *Client) GenerateFromReportTemplate(params *GenerateFromReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateFromReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateFromReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateFromReportTemplate",
		Method:             "POST",
		PathPattern:        "/generate-from-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateFromReportTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateFromReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GenerateFromReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportTemplates get report templates API
*/
func (a *Client) GetReportTemplates(params *GetReportTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReportTemplates",
		Method:             "POST",
		PathPattern:        "/get-report-templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReportTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetReportTemplatesConnection get report templates connection API
*/
func (a *Client) GetReportTemplatesConnection(params *GetReportTemplatesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetReportTemplatesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportTemplatesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetReportTemplatesConnection",
		Method:             "POST",
		PathPattern:        "/get-report-templates-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetReportTemplatesConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetReportTemplatesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetReportTemplatesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateReportTemplate update report template API
*/
func (a *Client) UpdateReportTemplate(params *UpdateReportTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateReportTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateReportTemplate",
		Method:             "POST",
		PathPattern:        "/update-report-template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateReportTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateReportTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateReportTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
