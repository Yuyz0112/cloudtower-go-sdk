// Code generated by go-swagger; DO NOT EDIT.

package nvmf_namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nvmf namespace API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nvmf namespace API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CloneNvmfNamespaceFromSnapshot(params *CloneNvmfNamespaceFromSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneNvmfNamespaceFromSnapshotOK, error)

	CreateNvmfNamespace(params *CreateNvmfNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNvmfNamespaceOK, error)

	DeleteNvmfNamespace(params *DeleteNvmfNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNvmfNamespaceOK, error)

	GetNvmfNamespaces(params *GetNvmfNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespacesOK, error)

	GetNvmfNamespacesConnection(params *GetNvmfNamespacesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespacesConnectionOK, error)

	RollbackNvmfNamespaceFromSnapshot(params *RollbackNvmfNamespaceFromSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollbackNvmfNamespaceFromSnapshotOK, error)

	UpdateNvmfNamespace(params *UpdateNvmfNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNvmfNamespaceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CloneNvmfNamespaceFromSnapshot clone nvmf namespace from snapshot API
*/
func (a *Client) CloneNvmfNamespaceFromSnapshot(params *CloneNvmfNamespaceFromSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneNvmfNamespaceFromSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneNvmfNamespaceFromSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CloneNvmfNamespaceFromSnapshot",
		Method:             "POST",
		PathPattern:        "/clone-nvmf-namespace-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneNvmfNamespaceFromSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneNvmfNamespaceFromSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CloneNvmfNamespaceFromSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateNvmfNamespace create nvmf namespace API
*/
func (a *Client) CreateNvmfNamespace(params *CreateNvmfNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNvmfNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNvmfNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNvmfNamespace",
		Method:             "POST",
		PathPattern:        "/create-nvmf-namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNvmfNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNvmfNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNvmfNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNvmfNamespace delete nvmf namespace API
*/
func (a *Client) DeleteNvmfNamespace(params *DeleteNvmfNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNvmfNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNvmfNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNvmfNamespace",
		Method:             "POST",
		PathPattern:        "/delete-nvmf-namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNvmfNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNvmfNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNvmfNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespaces get nvmf namespaces API
*/
func (a *Client) GetNvmfNamespaces(params *GetNvmfNamespacesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespacesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespaces",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespacesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespaces: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespacesConnection get nvmf namespaces connection API
*/
func (a *Client) GetNvmfNamespacesConnection(params *GetNvmfNamespacesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespacesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespacesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespacesConnection",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespaces-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespacesConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespacesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespacesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RollbackNvmfNamespaceFromSnapshot rollback nvmf namespace from snapshot API
*/
func (a *Client) RollbackNvmfNamespaceFromSnapshot(params *RollbackNvmfNamespaceFromSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RollbackNvmfNamespaceFromSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRollbackNvmfNamespaceFromSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RollbackNvmfNamespaceFromSnapshot",
		Method:             "POST",
		PathPattern:        "/rollback-nvmf-namespace-from-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RollbackNvmfNamespaceFromSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RollbackNvmfNamespaceFromSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RollbackNvmfNamespaceFromSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateNvmfNamespace update nvmf namespace API
*/
func (a *Client) UpdateNvmfNamespace(params *UpdateNvmfNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNvmfNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNvmfNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateNvmfNamespace",
		Method:             "POST",
		PathPattern:        "/update-nvmf-namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNvmfNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNvmfNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateNvmfNamespace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
