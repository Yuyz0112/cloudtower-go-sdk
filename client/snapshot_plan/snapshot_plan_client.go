// Code generated by go-swagger; DO NOT EDIT.

package snapshot_plan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new snapshot plan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snapshot plan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSnapshotPlan(params *CreateSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSnapshotPlanOK, error)

	DeleteSnapshotPlan(params *DeleteSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSnapshotPlanOK, error)

	ExecuteSnapshotPlan(params *ExecuteSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecuteSnapshotPlanOK, error)

	GetSnapshotPlans(params *GetSnapshotPlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnapshotPlansOK, error)

	GetSnapshotPlansConnection(params *GetSnapshotPlansConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnapshotPlansConnectionOK, error)

	ResumeSnapshotPlan(params *ResumeSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeSnapshotPlanOK, error)

	SuspendSnapshotPlan(params *SuspendSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuspendSnapshotPlanOK, error)

	UpdateSnapshotPlan(params *UpdateSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSnapshotPlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSnapshotPlan create snapshot plan API
*/
func (a *Client) CreateSnapshotPlan(params *CreateSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/create-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSnapshotPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnapshotPlan delete snapshot plan API
*/
func (a *Client) DeleteSnapshotPlan(params *DeleteSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/delete-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSnapshotPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteSnapshotPlan execute snapshot plan API
*/
func (a *Client) ExecuteSnapshotPlan(params *ExecuteSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecuteSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExecuteSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/execute-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExecuteSnapshotPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExecuteSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotPlans get snapshot plans API
*/
func (a *Client) GetSnapshotPlans(params *GetSnapshotPlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnapshotPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotPlans",
		Method:             "POST",
		PathPattern:        "/get-snapshot-plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotPlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotPlansConnection get snapshot plans connection API
*/
func (a *Client) GetSnapshotPlansConnection(params *GetSnapshotPlansConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnapshotPlansConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotPlansConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnapshotPlansConnection",
		Method:             "POST",
		PathPattern:        "/get-snapshot-plans-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnapshotPlansConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotPlansConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnapshotPlansConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResumeSnapshotPlan resume snapshot plan API
*/
func (a *Client) ResumeSnapshotPlan(params *ResumeSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ResumeSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/resume-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeSnapshotPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResumeSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuspendSnapshotPlan suspend snapshot plan API
*/
func (a *Client) SuspendSnapshotPlan(params *SuspendSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuspendSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuspendSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SuspendSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/suspend-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SuspendSnapshotPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuspendSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SuspendSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSnapshotPlan update snapshot plan API
*/
func (a *Client) UpdateSnapshotPlan(params *UpdateSnapshotPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSnapshotPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnapshotPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSnapshotPlan",
		Method:             "POST",
		PathPattern:        "/update-snapshot-plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSnapshotPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSnapshotPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSnapshotPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
