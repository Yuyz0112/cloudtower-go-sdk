// Code generated by go-swagger; DO NOT EDIT.

package nvmf_namespace_snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nvmf namespace snapshot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nvmf namespace snapshot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNvmfNamespaceSnapshot(params *CreateNvmfNamespaceSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNvmfNamespaceSnapshotOK, error)

	DeleteNvmfNamespaceSnapshot(params *DeleteNvmfNamespaceSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNvmfNamespaceSnapshotOK, error)

	GetNvmfNamespaceSnapshots(params *GetNvmfNamespaceSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsOK, error)

	GetNvmfNamespaceSnapshotsConnection(params *GetNvmfNamespaceSnapshotsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsConnectionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNvmfNamespaceSnapshot create nvmf namespace snapshot API
*/
func (a *Client) CreateNvmfNamespaceSnapshot(params *CreateNvmfNamespaceSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNvmfNamespaceSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNvmfNamespaceSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateNvmfNamespaceSnapshot",
		Method:             "POST",
		PathPattern:        "/create-nvmf-namespace-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNvmfNamespaceSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNvmfNamespaceSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateNvmfNamespaceSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteNvmfNamespaceSnapshot delete nvmf namespace snapshot API
*/
func (a *Client) DeleteNvmfNamespaceSnapshot(params *DeleteNvmfNamespaceSnapshotParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNvmfNamespaceSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNvmfNamespaceSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteNvmfNamespaceSnapshot",
		Method:             "POST",
		PathPattern:        "/delete-nvmf-namespace-snapshot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNvmfNamespaceSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNvmfNamespaceSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteNvmfNamespaceSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespaceSnapshots get nvmf namespace snapshots API
*/
func (a *Client) GetNvmfNamespaceSnapshots(params *GetNvmfNamespaceSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespaceSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespaceSnapshots",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespace-snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespaceSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespaceSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespaceSnapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetNvmfNamespaceSnapshotsConnection get nvmf namespace snapshots connection API
*/
func (a *Client) GetNvmfNamespaceSnapshotsConnection(params *GetNvmfNamespaceSnapshotsConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNvmfNamespaceSnapshotsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNvmfNamespaceSnapshotsConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNvmfNamespaceSnapshotsConnection",
		Method:             "POST",
		PathPattern:        "/get-nvmf-namespace-snapshots-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNvmfNamespaceSnapshotsConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNvmfNamespaceSnapshotsConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNvmfNamespaceSnapshotsConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
