// Code generated by go-swagger; DO NOT EDIT.

package vm_volume

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vm volume API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vm volume API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVMVolume(params *CreateVMVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMVolumeOK, error)

	DeleteVMVolumeFromVM(params *DeleteVMVolumeFromVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMVolumeFromVMOK, error)

	GetVMVolumes(params *GetVMVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMVolumesOK, error)

	GetVMVolumesConnection(params *GetVMVolumesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMVolumesConnectionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVMVolume create Vm volume API
*/
func (a *Client) CreateVMVolume(params *CreateVMVolumeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMVolumeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmVolume",
		Method:             "POST",
		PathPattern:        "/create-vm-volume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMVolumeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVMVolumeFromVM delete Vm volume from Vm API
*/
func (a *Client) DeleteVMVolumeFromVM(params *DeleteVMVolumeFromVMParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVMVolumeFromVMOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVMVolumeFromVMParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVmVolumeFromVm",
		Method:             "POST",
		PathPattern:        "/delete-vm-volume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVMVolumeFromVMReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVMVolumeFromVMOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVmVolumeFromVm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMVolumes get Vm volumes API
*/
func (a *Client) GetVMVolumes(params *GetVMVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMVolumesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmVolumes",
		Method:             "POST",
		PathPattern:        "/get-vm-volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVMVolumesConnection get Vm volumes connection API
*/
func (a *Client) GetVMVolumesConnection(params *GetVMVolumesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVMVolumesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMVolumesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmVolumesConnection",
		Method:             "POST",
		PathPattern:        "/get-vm-volumes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVMVolumesConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVMVolumesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmVolumesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
