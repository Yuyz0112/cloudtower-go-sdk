// Code generated by go-swagger; DO NOT EDIT.

package vlan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vlan API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vlan API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateVMVlan(params *CreateVMVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMVlanOK, error)

	DeleteVlan(params *DeleteVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVlanOK, error)

	GetVlans(params *GetVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVlansOK, error)

	GetVlansConnection(params *GetVlansConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVlansConnectionOK, error)

	UpdateManagementVlan(params *UpdateManagementVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagementVlanOK, error)

	UpdateMigrationVlan(params *UpdateMigrationVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMigrationVlanOK, error)

	UpdateVlan(params *UpdateVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVlanOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateVMVlan create Vm vlan API
*/
func (a *Client) CreateVMVlan(params *CreateVMVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateVMVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVMVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateVmVlan",
		Method:             "POST",
		PathPattern:        "/create-vm-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVMVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVMVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateVmVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVlan delete vlan API
*/
func (a *Client) DeleteVlan(params *DeleteVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteVlan",
		Method:             "POST",
		PathPattern:        "/delete-vm-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVlans get vlans API
*/
func (a *Client) GetVlans(params *GetVlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVlans",
		Method:             "POST",
		PathPattern:        "/get-vlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVlansConnection get vlans connection API
*/
func (a *Client) GetVlansConnection(params *GetVlansConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVlansConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVlansConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVlansConnection",
		Method:             "POST",
		PathPattern:        "/get-vlans-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVlansConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVlansConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVlansConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateManagementVlan update management vlan API
*/
func (a *Client) UpdateManagementVlan(params *UpdateManagementVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagementVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateManagementVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateManagementVlan",
		Method:             "POST",
		PathPattern:        "/update-management-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateManagementVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateManagementVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateManagementVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMigrationVlan update migration vlan API
*/
func (a *Client) UpdateMigrationVlan(params *UpdateMigrationVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMigrationVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMigrationVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateMigrationVlan",
		Method:             "POST",
		PathPattern:        "/update-migration-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMigrationVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMigrationVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateMigrationVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateVlan update vlan API
*/
func (a *Client) UpdateVlan(params *UpdateVlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateVlan",
		Method:             "POST",
		PathPattern:        "/update-vm-vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
