// Code generated by go-swagger; DO NOT EDIT.

package rack_topo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new rack topo API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rack topo API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRackTopo(params *CreateRackTopoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRackTopoOK, error)

	DeleteRackTopo(params *DeleteRackTopoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRackTopoOK, error)

	GetRackTopoes(params *GetRackTopoesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRackTopoesOK, error)

	GetRackTopoesConnection(params *GetRackTopoesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRackTopoesConnectionOK, error)

	UpdateRackTopo(params *UpdateRackTopoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRackTopoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRackTopo create rack topo API
*/
func (a *Client) CreateRackTopo(params *CreateRackTopoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRackTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRackTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRackTopo",
		Method:             "POST",
		PathPattern:        "/create-rack-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRackTopoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRackTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRackTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRackTopo delete rack topo API
*/
func (a *Client) DeleteRackTopo(params *DeleteRackTopoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRackTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRackTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRackTopo",
		Method:             "POST",
		PathPattern:        "/delete-rack-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRackTopoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRackTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRackTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRackTopoes get rack topoes API
*/
func (a *Client) GetRackTopoes(params *GetRackTopoesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRackTopoesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRackTopoesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRackTopoes",
		Method:             "POST",
		PathPattern:        "/get-rack-topoes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRackTopoesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRackTopoesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRackTopoes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRackTopoesConnection get rack topoes connection API
*/
func (a *Client) GetRackTopoesConnection(params *GetRackTopoesConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRackTopoesConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRackTopoesConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRackTopoesConnection",
		Method:             "POST",
		PathPattern:        "/get-rack-topoes-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRackTopoesConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRackTopoesConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRackTopoesConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRackTopo update rack topo API
*/
func (a *Client) UpdateRackTopo(params *UpdateRackTopoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRackTopoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRackTopoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRackTopo",
		Method:             "POST",
		PathPattern:        "/update-rack-topo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRackTopoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRackTopoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRackTopo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
