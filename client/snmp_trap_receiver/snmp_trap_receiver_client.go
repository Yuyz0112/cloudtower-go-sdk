// Code generated by go-swagger; DO NOT EDIT.

package snmp_trap_receiver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new snmp trap receiver API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snmp trap receiver API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSnmpTrapReceiver(params *CreateSnmpTrapReceiverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSnmpTrapReceiverOK, error)

	DeleteSnmpTrapReceiver(params *DeleteSnmpTrapReceiverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSnmpTrapReceiverOK, error)

	GetSnmpTrapReceivers(params *GetSnmpTrapReceiversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnmpTrapReceiversOK, error)

	GetSnmpTrapReceiversConnection(params *GetSnmpTrapReceiversConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnmpTrapReceiversConnectionOK, error)

	UpdateSnmpTrapReceiver(params *UpdateSnmpTrapReceiverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSnmpTrapReceiverOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSnmpTrapReceiver create snmp trap receiver API
*/
func (a *Client) CreateSnmpTrapReceiver(params *CreateSnmpTrapReceiverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSnmpTrapReceiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnmpTrapReceiverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSnmpTrapReceiver",
		Method:             "POST",
		PathPattern:        "/create-snmp-trap-receiver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSnmpTrapReceiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSnmpTrapReceiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSnmpTrapReceiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSnmpTrapReceiver delete snmp trap receiver API
*/
func (a *Client) DeleteSnmpTrapReceiver(params *DeleteSnmpTrapReceiverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSnmpTrapReceiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnmpTrapReceiverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSnmpTrapReceiver",
		Method:             "POST",
		PathPattern:        "/delete-snmp-trap-receiver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSnmpTrapReceiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSnmpTrapReceiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSnmpTrapReceiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTrapReceivers get snmp trap receivers API
*/
func (a *Client) GetSnmpTrapReceivers(params *GetSnmpTrapReceiversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnmpTrapReceiversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTrapReceiversParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTrapReceivers",
		Method:             "POST",
		PathPattern:        "/get-snmp-trap-receivers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTrapReceiversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTrapReceiversOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTrapReceivers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnmpTrapReceiversConnection get snmp trap receivers connection API
*/
func (a *Client) GetSnmpTrapReceiversConnection(params *GetSnmpTrapReceiversConnectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSnmpTrapReceiversConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpTrapReceiversConnectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSnmpTrapReceiversConnection",
		Method:             "POST",
		PathPattern:        "/get-snmp-trap-receivers-connection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSnmpTrapReceiversConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnmpTrapReceiversConnectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSnmpTrapReceiversConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSnmpTrapReceiver update snmp trap receiver API
*/
func (a *Client) UpdateSnmpTrapReceiver(params *UpdateSnmpTrapReceiverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSnmpTrapReceiverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnmpTrapReceiverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSnmpTrapReceiver",
		Method:             "POST",
		PathPattern:        "/update-snmp-trap-receiver",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSnmpTrapReceiverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSnmpTrapReceiverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSnmpTrapReceiver: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
