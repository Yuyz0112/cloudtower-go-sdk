// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedDiscoveredHostDimms nested discovered host dimms
//
// swagger:model NestedDiscoveredHostDimms
type NestedDiscoveredHostDimms struct {

	// dimm id
	// Required: true
	DimmID *string `json:"dimm_id"`

	// fw version
	// Required: true
	FwVersion *string `json:"fw_version"`

	// health status
	// Required: true
	HealthStatus *string `json:"health_status"`

	// socket id
	// Required: true
	SocketID *string `json:"socket_id"`
}

// Validate validates this nested discovered host dimms
func (m *NestedDiscoveredHostDimms) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimmID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFwVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocketID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedDiscoveredHostDimms) validateDimmID(formats strfmt.Registry) error {

	if err := validate.Required("dimm_id", "body", m.DimmID); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostDimms) validateFwVersion(formats strfmt.Registry) error {

	if err := validate.Required("fw_version", "body", m.FwVersion); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostDimms) validateHealthStatus(formats strfmt.Registry) error {

	if err := validate.Required("health_status", "body", m.HealthStatus); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostDimms) validateSocketID(formats strfmt.Registry) error {

	if err := validate.Required("socket_id", "body", m.SocketID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested discovered host dimms based on context it is used
func (m *NestedDiscoveredHostDimms) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedDiscoveredHostDimms) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedDiscoveredHostDimms) UnmarshalBinary(b []byte) error {
	var res NestedDiscoveredHostDimms
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
