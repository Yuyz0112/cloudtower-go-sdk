// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedDiscoveredHostIface nested discovered host iface
//
// swagger:model NestedDiscoveredHostIface
type NestedDiscoveredHostIface struct {

	// ipv4
	IPV4 *string `json:"ipv4,omitempty"`

	// ipv6
	IPV6 *string `json:"ipv6,omitempty"`

	// mac address
	// Required: true
	MacAddress *string `json:"mac_address"`

	// mtu
	// Required: true
	Mtu *int32 `json:"mtu"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pci slot name
	PciSlotName *string `json:"pci_slot_name,omitempty"`

	// rdma enabled
	RdmaEnabled *bool `json:"rdma_enabled,omitempty"`

	// speed
	Speed *float64 `json:"speed,omitempty"`

	// up
	// Required: true
	Up *bool `json:"up"`
}

// Validate validates this nested discovered host iface
func (m *NestedDiscoveredHostIface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedDiscoveredHostIface) validateMacAddress(formats strfmt.Registry) error {

	if err := validate.Required("mac_address", "body", m.MacAddress); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostIface) validateMtu(formats strfmt.Registry) error {

	if err := validate.Required("mtu", "body", m.Mtu); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostIface) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NestedDiscoveredHostIface) validateUp(formats strfmt.Registry) error {

	if err := validate.Required("up", "body", m.Up); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested discovered host iface based on context it is used
func (m *NestedDiscoveredHostIface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedDiscoveredHostIface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedDiscoveredHostIface) UnmarshalBinary(b []byte) error {
	var res NestedDiscoveredHostIface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
