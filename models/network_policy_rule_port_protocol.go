// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkPolicyRulePortProtocol network policy rule port protocol
//
// swagger:model NetworkPolicyRulePortProtocol
type NetworkPolicyRulePortProtocol string

func NewNetworkPolicyRulePortProtocol(value NetworkPolicyRulePortProtocol) *NetworkPolicyRulePortProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkPolicyRulePortProtocol.
func (m NetworkPolicyRulePortProtocol) Pointer() *NetworkPolicyRulePortProtocol {
	return &m
}

const (

	// NetworkPolicyRulePortProtocolICMP captures enum value "ICMP"
	NetworkPolicyRulePortProtocolICMP NetworkPolicyRulePortProtocol = "ICMP"

	// NetworkPolicyRulePortProtocolTCP captures enum value "TCP"
	NetworkPolicyRulePortProtocolTCP NetworkPolicyRulePortProtocol = "TCP"

	// NetworkPolicyRulePortProtocolUDP captures enum value "UDP"
	NetworkPolicyRulePortProtocolUDP NetworkPolicyRulePortProtocol = "UDP"
)

// for schema
var networkPolicyRulePortProtocolEnum []interface{}

func init() {
	var res []NetworkPolicyRulePortProtocol
	if err := json.Unmarshal([]byte(`["ICMP","TCP","UDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPolicyRulePortProtocolEnum = append(networkPolicyRulePortProtocolEnum, v)
	}
}

func (m NetworkPolicyRulePortProtocol) validateNetworkPolicyRulePortProtocolEnum(path, location string, value NetworkPolicyRulePortProtocol) error {
	if err := validate.EnumCase(path, location, value, networkPolicyRulePortProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network policy rule port protocol
func (m NetworkPolicyRulePortProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkPolicyRulePortProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network policy rule port protocol based on context it is used
func (m NetworkPolicyRulePortProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
