// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Label label
//
// swagger:model Label
type Label struct {

	// cluster num
	ClusterNum *float64 `json:"cluster_num,omitempty"`

	// clusters
	Clusters []*LabelClustersItems0 `json:"clusters,omitempty"`

	// consistency group num
	ConsistencyGroupNum *float64 `json:"consistency_group_num,omitempty"`

	// consistency group snapshot num
	ConsistencyGroupSnapshotNum *float64 `json:"consistency_group_snapshot_num,omitempty"`

	// consistency group snapshots
	ConsistencyGroupSnapshots []*LabelConsistencyGroupSnapshotsItems0 `json:"consistency_group_snapshots,omitempty"`

	// consistency groups
	ConsistencyGroups []*LabelConsistencyGroupsItems0 `json:"consistency_groups,omitempty"`

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// datacenter num
	DatacenterNum *float64 `json:"datacenter_num,omitempty"`

	// datacenters
	Datacenters []*LabelDatacentersItems0 `json:"datacenters,omitempty"`

	// disk num
	DiskNum *float64 `json:"disk_num,omitempty"`

	// disks
	Disks []*LabelDisksItems0 `json:"disks,omitempty"`

	// elf image num
	ElfImageNum *float64 `json:"elf_image_num,omitempty"`

	// elf images
	ElfImages []*LabelElfImagesItems0 `json:"elf_images,omitempty"`

	// host num
	HostNum *float64 `json:"host_num,omitempty"`

	// hosts
	Hosts []*LabelHostsItems0 `json:"hosts,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// iscsi lun num
	IscsiLunNum *float64 `json:"iscsi_lun_num,omitempty"`

	// iscsi lun snapshot num
	IscsiLunSnapshotNum *float64 `json:"iscsi_lun_snapshot_num,omitempty"`

	// iscsi lun snapshots
	IscsiLunSnapshots []*LabelIscsiLunSnapshotsItems0 `json:"iscsi_lun_snapshots,omitempty"`

	// iscsi luns
	IscsiLuns []*LabelIscsiLunsItems0 `json:"iscsi_luns,omitempty"`

	// iscsi target num
	IscsiTargetNum *float64 `json:"iscsi_target_num,omitempty"`

	// iscsi targets
	IscsiTargets []*LabelIscsiTargetsItems0 `json:"iscsi_targets,omitempty"`

	// key
	// Required: true
	Key *string `json:"key"`

	// namespace group num
	NamespaceGroupNum *float64 `json:"namespace_group_num,omitempty"`

	// namespace groups
	NamespaceGroups []*LabelNamespaceGroupsItems0 `json:"namespace_groups,omitempty"`

	// nfs export num
	NfsExportNum *float64 `json:"nfs_export_num,omitempty"`

	// nfs exports
	NfsExports []*LabelNfsExportsItems0 `json:"nfs_exports,omitempty"`

	// nfs inode num
	NfsInodeNum *float64 `json:"nfs_inode_num,omitempty"`

	// nfs inodes
	NfsInodes []*LabelNfsInodesItems0 `json:"nfs_inodes,omitempty"`

	// nic num
	NicNum *float64 `json:"nic_num,omitempty"`

	// nics
	Nics []*LabelNicsItems0 `json:"nics,omitempty"`

	// nvmf namespace num
	NvmfNamespaceNum *float64 `json:"nvmf_namespace_num,omitempty"`

	// nvmf namespace snapshot num
	NvmfNamespaceSnapshotNum *float64 `json:"nvmf_namespace_snapshot_num,omitempty"`

	// nvmf namespace snapshots
	NvmfNamespaceSnapshots []*LabelNvmfNamespaceSnapshotsItems0 `json:"nvmf_namespace_snapshots,omitempty"`

	// nvmf namespaces
	NvmfNamespaces []*LabelNvmfNamespacesItems0 `json:"nvmf_namespaces,omitempty"`

	// nvmf subsystem num
	NvmfSubsystemNum *float64 `json:"nvmf_subsystem_num,omitempty"`

	// nvmf subsystems
	NvmfSubsystems []*LabelNvmfSubsystemsItems0 `json:"nvmf_subsystems,omitempty"`

	// system vlan num
	SystemVlanNum *float64 `json:"system_vlan_num,omitempty"`

	// total num
	TotalNum *float64 `json:"total_num,omitempty"`

	// value
	Value *string `json:"value,omitempty"`

	// vds num
	VdsNum *float64 `json:"vds_num,omitempty"`

	// vdses
	Vdses []*LabelVdsesItems0 `json:"vdses,omitempty"`

	// vlans
	Vlans []*LabelVlansItems0 `json:"vlans,omitempty"`

	// vm num
	VMNum *float64 `json:"vm_num,omitempty"`

	// vm snapshot num
	VMSnapshotNum *float64 `json:"vm_snapshot_num,omitempty"`

	// vm snapshots
	VMSnapshots []*LabelVMSnapshotsItems0 `json:"vm_snapshots,omitempty"`

	// vm template num
	VMTemplateNum *float64 `json:"vm_template_num,omitempty"`

	// vm templates
	VMTemplates []*LabelVMTemplatesItems0 `json:"vm_templates,omitempty"`

	// vm vlan num
	VMVlanNum *float64 `json:"vm_vlan_num,omitempty"`

	// vm volume num
	VMVolumeNum *float64 `json:"vm_volume_num,omitempty"`

	// vm volumes
	VMVolumes []*LabelVMVolumesItems0 `json:"vm_volumes,omitempty"`

	// vms
	Vms []*LabelVmsItems0 `json:"vms,omitempty"`
}

// Validate validates this label
func (m *Label) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacenters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsInodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaceSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Label) validateClusters(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusters) { // not required
		return nil
	}

	for i := 0; i < len(m.Clusters); i++ {
		if swag.IsZero(m.Clusters[i]) { // not required
			continue
		}

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateConsistencyGroupSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsistencyGroupSnapshots); i++ {
		if swag.IsZero(m.ConsistencyGroupSnapshots[i]) { // not required
			continue
		}

		if m.ConsistencyGroupSnapshots[i] != nil {
			if err := m.ConsistencyGroupSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_group_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateConsistencyGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsistencyGroups); i++ {
		if swag.IsZero(m.ConsistencyGroups[i]) { // not required
			continue
		}

		if m.ConsistencyGroups[i] != nil {
			if err := m.ConsistencyGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateDatacenters(formats strfmt.Registry) error {
	if swag.IsZero(m.Datacenters) { // not required
		return nil
	}

	for i := 0; i < len(m.Datacenters); i++ {
		if swag.IsZero(m.Datacenters[i]) { // not required
			continue
		}

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateElfImages(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImages) { // not required
		return nil
	}

	for i := 0; i < len(m.ElfImages); i++ {
		if swag.IsZero(m.ElfImages[i]) { // not required
			continue
		}

		if m.ElfImages[i] != nil {
			if err := m.ElfImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elf_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	for i := 0; i < len(m.Hosts); i++ {
		if swag.IsZero(m.Hosts[i]) { // not required
			continue
		}

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateIscsiLunSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiLunSnapshots); i++ {
		if swag.IsZero(m.IscsiLunSnapshots[i]) { // not required
			continue
		}

		if m.IscsiLunSnapshots[i] != nil {
			if err := m.IscsiLunSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_lun_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateIscsiLuns(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLuns) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiLuns); i++ {
		if swag.IsZero(m.IscsiLuns[i]) { // not required
			continue
		}

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateIscsiTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargets) { // not required
		return nil
	}

	for i := 0; i < len(m.IscsiTargets); i++ {
		if swag.IsZero(m.IscsiTargets[i]) { // not required
			continue
		}

		if m.IscsiTargets[i] != nil {
			if err := m.IscsiTargets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *Label) validateNamespaceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.NamespaceGroups); i++ {
		if swag.IsZero(m.NamespaceGroups[i]) { // not required
			continue
		}

		if m.NamespaceGroups[i] != nil {
			if err := m.NamespaceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespace_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNfsExports(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExports) { // not required
		return nil
	}

	for i := 0; i < len(m.NfsExports); i++ {
		if swag.IsZero(m.NfsExports[i]) { // not required
			continue
		}

		if m.NfsExports[i] != nil {
			if err := m.NfsExports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_exports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNfsInodes(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInodes) { // not required
		return nil
	}

	for i := 0; i < len(m.NfsInodes); i++ {
		if swag.IsZero(m.NfsInodes[i]) { // not required
			continue
		}

		if m.NfsInodes[i] != nil {
			if err := m.NfsInodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_inodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNvmfNamespaceSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaceSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.NvmfNamespaceSnapshots); i++ {
		if swag.IsZero(m.NvmfNamespaceSnapshots[i]) { // not required
			continue
		}

		if m.NvmfNamespaceSnapshots[i] != nil {
			if err := m.NvmfNamespaceSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespace_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNvmfNamespaces(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NvmfNamespaces); i++ {
		if swag.IsZero(m.NvmfNamespaces[i]) { // not required
			continue
		}

		if m.NvmfNamespaces[i] != nil {
			if err := m.NvmfNamespaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateNvmfSubsystems(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystems) { // not required
		return nil
	}

	for i := 0; i < len(m.NvmfSubsystems); i++ {
		if swag.IsZero(m.NvmfSubsystems[i]) { // not required
			continue
		}

		if m.NvmfSubsystems[i] != nil {
			if err := m.NvmfSubsystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_subsystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVdses(formats strfmt.Registry) error {
	if swag.IsZero(m.Vdses) { // not required
		return nil
	}

	for i := 0; i < len(m.Vdses); i++ {
		if swag.IsZero(m.Vdses[i]) { // not required
			continue
		}

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVlans(formats strfmt.Registry) error {
	if swag.IsZero(m.Vlans) { // not required
		return nil
	}

	for i := 0; i < len(m.Vlans); i++ {
		if swag.IsZero(m.Vlans[i]) { // not required
			continue
		}

		if m.Vlans[i] != nil {
			if err := m.Vlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.VMSnapshots); i++ {
		if swag.IsZero(m.VMSnapshots[i]) { // not required
			continue
		}

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.VMTemplates); i++ {
		if swag.IsZero(m.VMTemplates[i]) { // not required
			continue
		}

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVMVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.VMVolumes); i++ {
		if swag.IsZero(m.VMVolumes[i]) { // not required
			continue
		}

		if m.VMVolumes[i] != nil {
			if err := m.VMVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this label based on the context it is used
func (m *Label) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacenters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsInodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaceSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Label) contextValidateClusters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clusters); i++ {

		if m.Clusters[i] != nil {
			if err := m.Clusters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateConsistencyGroupSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsistencyGroupSnapshots); i++ {

		if m.ConsistencyGroupSnapshots[i] != nil {
			if err := m.ConsistencyGroupSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_group_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateConsistencyGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsistencyGroups); i++ {

		if m.ConsistencyGroups[i] != nil {
			if err := m.ConsistencyGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consistency_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateDatacenters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datacenters); i++ {

		if m.Datacenters[i] != nil {
			if err := m.Datacenters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datacenters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateElfImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ElfImages); i++ {

		if m.ElfImages[i] != nil {
			if err := m.ElfImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("elf_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hosts); i++ {

		if m.Hosts[i] != nil {
			if err := m.Hosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiLunSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiLunSnapshots); i++ {

		if m.IscsiLunSnapshots[i] != nil {
			if err := m.IscsiLunSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_lun_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiLuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiLuns); i++ {

		if m.IscsiLuns[i] != nil {
			if err := m.IscsiLuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_luns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateIscsiTargets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IscsiTargets); i++ {

		if m.IscsiTargets[i] != nil {
			if err := m.IscsiTargets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iscsi_targets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNamespaceGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NamespaceGroups); i++ {

		if m.NamespaceGroups[i] != nil {
			if err := m.NamespaceGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespace_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNfsExports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NfsExports); i++ {

		if m.NfsExports[i] != nil {
			if err := m.NfsExports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_exports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNfsInodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NfsInodes); i++ {

		if m.NfsInodes[i] != nil {
			if err := m.NfsInodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfs_inodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {
			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNvmfNamespaceSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NvmfNamespaceSnapshots); i++ {

		if m.NvmfNamespaceSnapshots[i] != nil {
			if err := m.NvmfNamespaceSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespace_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNvmfNamespaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NvmfNamespaces); i++ {

		if m.NvmfNamespaces[i] != nil {
			if err := m.NvmfNamespaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_namespaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateNvmfSubsystems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NvmfSubsystems); i++ {

		if m.NvmfSubsystems[i] != nil {
			if err := m.NvmfSubsystems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nvmf_subsystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVdses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vdses); i++ {

		if m.Vdses[i] != nil {
			if err := m.Vdses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vdses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vlans); i++ {

		if m.Vlans[i] != nil {
			if err := m.Vlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMSnapshots); i++ {

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMTemplates); i++ {

		if m.VMTemplates[i] != nil {
			if err := m.VMTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_templates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVMVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMVolumes); i++ {

		if m.VMVolumes[i] != nil {
			if err := m.VMVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Label) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Label) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Label) UnmarshalBinary(b []byte) error {
	var res Label
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelClustersItems0 label clusters items0
//
// swagger:model LabelClustersItems0
type LabelClustersItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label clusters items0
func (m *LabelClustersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelClustersItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelClustersItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label clusters items0 based on context it is used
func (m *LabelClustersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelClustersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelClustersItems0) UnmarshalBinary(b []byte) error {
	var res LabelClustersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelConsistencyGroupSnapshotsItems0 label consistency group snapshots items0
//
// swagger:model LabelConsistencyGroupSnapshotsItems0
type LabelConsistencyGroupSnapshotsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label consistency group snapshots items0
func (m *LabelConsistencyGroupSnapshotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelConsistencyGroupSnapshotsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelConsistencyGroupSnapshotsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label consistency group snapshots items0 based on context it is used
func (m *LabelConsistencyGroupSnapshotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelConsistencyGroupSnapshotsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelConsistencyGroupSnapshotsItems0) UnmarshalBinary(b []byte) error {
	var res LabelConsistencyGroupSnapshotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelConsistencyGroupsItems0 label consistency groups items0
//
// swagger:model LabelConsistencyGroupsItems0
type LabelConsistencyGroupsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label consistency groups items0
func (m *LabelConsistencyGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelConsistencyGroupsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelConsistencyGroupsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label consistency groups items0 based on context it is used
func (m *LabelConsistencyGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelConsistencyGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelConsistencyGroupsItems0) UnmarshalBinary(b []byte) error {
	var res LabelConsistencyGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelDatacentersItems0 label datacenters items0
//
// swagger:model LabelDatacentersItems0
type LabelDatacentersItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label datacenters items0
func (m *LabelDatacentersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelDatacentersItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelDatacentersItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label datacenters items0 based on context it is used
func (m *LabelDatacentersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelDatacentersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelDatacentersItems0) UnmarshalBinary(b []byte) error {
	var res LabelDatacentersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelDisksItems0 label disks items0
//
// swagger:model LabelDisksItems0
type LabelDisksItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label disks items0
func (m *LabelDisksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelDisksItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelDisksItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label disks items0 based on context it is used
func (m *LabelDisksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelDisksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelDisksItems0) UnmarshalBinary(b []byte) error {
	var res LabelDisksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelElfImagesItems0 label elf images items0
//
// swagger:model LabelElfImagesItems0
type LabelElfImagesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label elf images items0
func (m *LabelElfImagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelElfImagesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelElfImagesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label elf images items0 based on context it is used
func (m *LabelElfImagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelElfImagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelElfImagesItems0) UnmarshalBinary(b []byte) error {
	var res LabelElfImagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelHostsItems0 label hosts items0
//
// swagger:model LabelHostsItems0
type LabelHostsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label hosts items0
func (m *LabelHostsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelHostsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelHostsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label hosts items0 based on context it is used
func (m *LabelHostsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelHostsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelHostsItems0) UnmarshalBinary(b []byte) error {
	var res LabelHostsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelIscsiLunSnapshotsItems0 label iscsi lun snapshots items0
//
// swagger:model LabelIscsiLunSnapshotsItems0
type LabelIscsiLunSnapshotsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label iscsi lun snapshots items0
func (m *LabelIscsiLunSnapshotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelIscsiLunSnapshotsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelIscsiLunSnapshotsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label iscsi lun snapshots items0 based on context it is used
func (m *LabelIscsiLunSnapshotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelIscsiLunSnapshotsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelIscsiLunSnapshotsItems0) UnmarshalBinary(b []byte) error {
	var res LabelIscsiLunSnapshotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelIscsiLunsItems0 label iscsi luns items0
//
// swagger:model LabelIscsiLunsItems0
type LabelIscsiLunsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label iscsi luns items0
func (m *LabelIscsiLunsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelIscsiLunsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelIscsiLunsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label iscsi luns items0 based on context it is used
func (m *LabelIscsiLunsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelIscsiLunsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelIscsiLunsItems0) UnmarshalBinary(b []byte) error {
	var res LabelIscsiLunsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelIscsiTargetsItems0 label iscsi targets items0
//
// swagger:model LabelIscsiTargetsItems0
type LabelIscsiTargetsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label iscsi targets items0
func (m *LabelIscsiTargetsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelIscsiTargetsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelIscsiTargetsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label iscsi targets items0 based on context it is used
func (m *LabelIscsiTargetsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelIscsiTargetsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelIscsiTargetsItems0) UnmarshalBinary(b []byte) error {
	var res LabelIscsiTargetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelNamespaceGroupsItems0 label namespace groups items0
//
// swagger:model LabelNamespaceGroupsItems0
type LabelNamespaceGroupsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label namespace groups items0
func (m *LabelNamespaceGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelNamespaceGroupsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelNamespaceGroupsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label namespace groups items0 based on context it is used
func (m *LabelNamespaceGroupsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelNamespaceGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelNamespaceGroupsItems0) UnmarshalBinary(b []byte) error {
	var res LabelNamespaceGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelNfsExportsItems0 label nfs exports items0
//
// swagger:model LabelNfsExportsItems0
type LabelNfsExportsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label nfs exports items0
func (m *LabelNfsExportsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelNfsExportsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelNfsExportsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label nfs exports items0 based on context it is used
func (m *LabelNfsExportsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelNfsExportsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelNfsExportsItems0) UnmarshalBinary(b []byte) error {
	var res LabelNfsExportsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelNfsInodesItems0 label nfs inodes items0
//
// swagger:model LabelNfsInodesItems0
type LabelNfsInodesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label nfs inodes items0
func (m *LabelNfsInodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelNfsInodesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelNfsInodesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label nfs inodes items0 based on context it is used
func (m *LabelNfsInodesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelNfsInodesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelNfsInodesItems0) UnmarshalBinary(b []byte) error {
	var res LabelNfsInodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelNicsItems0 label nics items0
//
// swagger:model LabelNicsItems0
type LabelNicsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label nics items0
func (m *LabelNicsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelNicsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelNicsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label nics items0 based on context it is used
func (m *LabelNicsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelNicsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelNicsItems0) UnmarshalBinary(b []byte) error {
	var res LabelNicsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelNvmfNamespaceSnapshotsItems0 label nvmf namespace snapshots items0
//
// swagger:model LabelNvmfNamespaceSnapshotsItems0
type LabelNvmfNamespaceSnapshotsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label nvmf namespace snapshots items0
func (m *LabelNvmfNamespaceSnapshotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelNvmfNamespaceSnapshotsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelNvmfNamespaceSnapshotsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label nvmf namespace snapshots items0 based on context it is used
func (m *LabelNvmfNamespaceSnapshotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelNvmfNamespaceSnapshotsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelNvmfNamespaceSnapshotsItems0) UnmarshalBinary(b []byte) error {
	var res LabelNvmfNamespaceSnapshotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelNvmfNamespacesItems0 label nvmf namespaces items0
//
// swagger:model LabelNvmfNamespacesItems0
type LabelNvmfNamespacesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label nvmf namespaces items0
func (m *LabelNvmfNamespacesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelNvmfNamespacesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelNvmfNamespacesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label nvmf namespaces items0 based on context it is used
func (m *LabelNvmfNamespacesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelNvmfNamespacesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelNvmfNamespacesItems0) UnmarshalBinary(b []byte) error {
	var res LabelNvmfNamespacesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelNvmfSubsystemsItems0 label nvmf subsystems items0
//
// swagger:model LabelNvmfSubsystemsItems0
type LabelNvmfSubsystemsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label nvmf subsystems items0
func (m *LabelNvmfSubsystemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelNvmfSubsystemsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelNvmfSubsystemsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label nvmf subsystems items0 based on context it is used
func (m *LabelNvmfSubsystemsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelNvmfSubsystemsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelNvmfSubsystemsItems0) UnmarshalBinary(b []byte) error {
	var res LabelNvmfSubsystemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelVMSnapshotsItems0 label VM snapshots items0
//
// swagger:model LabelVMSnapshotsItems0
type LabelVMSnapshotsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label VM snapshots items0
func (m *LabelVMSnapshotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelVMSnapshotsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelVMSnapshotsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label VM snapshots items0 based on context it is used
func (m *LabelVMSnapshotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelVMSnapshotsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelVMSnapshotsItems0) UnmarshalBinary(b []byte) error {
	var res LabelVMSnapshotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelVMTemplatesItems0 label VM templates items0
//
// swagger:model LabelVMTemplatesItems0
type LabelVMTemplatesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label VM templates items0
func (m *LabelVMTemplatesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelVMTemplatesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelVMTemplatesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label VM templates items0 based on context it is used
func (m *LabelVMTemplatesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelVMTemplatesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelVMTemplatesItems0) UnmarshalBinary(b []byte) error {
	var res LabelVMTemplatesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelVMVolumesItems0 label VM volumes items0
//
// swagger:model LabelVMVolumesItems0
type LabelVMVolumesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label VM volumes items0
func (m *LabelVMVolumesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelVMVolumesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelVMVolumesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label VM volumes items0 based on context it is used
func (m *LabelVMVolumesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelVMVolumesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelVMVolumesItems0) UnmarshalBinary(b []byte) error {
	var res LabelVMVolumesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelVdsesItems0 label vdses items0
//
// swagger:model LabelVdsesItems0
type LabelVdsesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label vdses items0
func (m *LabelVdsesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelVdsesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelVdsesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label vdses items0 based on context it is used
func (m *LabelVdsesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelVdsesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelVdsesItems0) UnmarshalBinary(b []byte) error {
	var res LabelVdsesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelVlansItems0 label vlans items0
//
// swagger:model LabelVlansItems0
type LabelVlansItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label vlans items0
func (m *LabelVlansItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelVlansItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelVlansItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label vlans items0 based on context it is used
func (m *LabelVlansItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelVlansItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelVlansItems0) UnmarshalBinary(b []byte) error {
	var res LabelVlansItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LabelVmsItems0 label vms items0
//
// swagger:model LabelVmsItems0
type LabelVmsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this label vms items0
func (m *LabelVmsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelVmsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LabelVmsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label vms items0 based on context it is used
func (m *LabelVmsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelVmsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelVmsItems0) UnmarshalBinary(b []byte) error {
	var res LabelVmsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
