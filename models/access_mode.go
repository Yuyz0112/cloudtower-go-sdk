// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccessMode access mode
//
// swagger:model AccessMode
type AccessMode string

func NewAccessMode(value AccessMode) *AccessMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AccessMode.
func (m AccessMode) Pointer() *AccessMode {
	return &m
}

const (

	// AccessModeALLOW captures enum value "ALLOW"
	AccessModeALLOW AccessMode = "ALLOW"

	// AccessModeDENY captures enum value "DENY"
	AccessModeDENY AccessMode = "DENY"

	// AccessModeNONE captures enum value "NONE"
	AccessModeNONE AccessMode = "NONE"
)

// for schema
var accessModeEnum []interface{}

func init() {
	var res []AccessMode
	if err := json.Unmarshal([]byte(`["ALLOW","DENY","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessModeEnum = append(accessModeEnum, v)
	}
}

func (m AccessMode) validateAccessModeEnum(path, location string, value AccessMode) error {
	if err := validate.EnumCase(path, location, value, accessModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this access mode
func (m AccessMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccessModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this access mode based on context it is used
func (m AccessMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
