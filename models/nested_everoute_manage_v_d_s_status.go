// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedEverouteManageVDSStatus nested everoute manage v d s status
//
// swagger:model NestedEverouteManageVDSStatus
type NestedEverouteManageVDSStatus struct {

	// message
	// Required: true
	Message *string `json:"message"`

	// phase
	Phase struct {
		EverouteClusterPhase
	} `json:"phase,omitempty"`

	// reason
	// Required: true
	Reason *string `json:"reason"`

	// retry count
	// Required: true
	RetryCount *int32 `json:"retryCount"`

	// vds
	Vds struct {
		NestedVds
	} `json:"vds,omitempty"`

	// vds ID
	// Required: true
	VdsID *string `json:"vdsID"`
}

// Validate validates this nested everoute manage v d s status
func (m *NestedEverouteManageVDSStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteManageVDSStatus) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) validateRetryCount(formats strfmt.Registry) error {

	if err := validate.Required("retryCount", "body", m.RetryCount); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) validateVds(formats strfmt.Registry) error {
	if swag.IsZero(m.Vds) { // not required
		return nil
	}

	return nil
}

func (m *NestedEverouteManageVDSStatus) validateVdsID(formats strfmt.Registry) error {

	if err := validate.Required("vdsID", "body", m.VdsID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested everoute manage v d s status based on the context it is used
func (m *NestedEverouteManageVDSStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteManageVDSStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *NestedEverouteManageVDSStatus) contextValidateVds(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *NestedEverouteManageVDSStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedEverouteManageVDSStatus) UnmarshalBinary(b []byte) error {
	var res NestedEverouteManageVDSStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
