// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMPlacementGroup Vm placement group
//
// swagger:model VmPlacementGroup
type VMPlacementGroup struct {

	// cluster
	// Required: true
	Cluster *NestedCluster `json:"cluster"`

	// description
	// Required: true
	Description *string `json:"description"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// local created at
	// Required: true
	LocalCreatedAt *string `json:"local_created_at"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// local updated at
	// Required: true
	LocalUpdatedAt *string `json:"local_updated_at"`

	// name
	// Required: true
	Name *string `json:"name"`

	// vm host must enabled
	// Required: true
	VMHostMustEnabled *bool `json:"vm_host_must_enabled"`

	// vm host must host uuids
	VMHostMustHostUuids []*NestedHost `json:"vm_host_must_host_uuids,omitempty"`

	// vm host must policy
	// Required: true
	VMHostMustPolicy *bool `json:"vm_host_must_policy"`

	// vm host prefer enabled
	// Required: true
	VMHostPreferEnabled *bool `json:"vm_host_prefer_enabled"`

	// vm host prefer host uuids
	VMHostPreferHostUuids []*NestedHost `json:"vm_host_prefer_host_uuids,omitempty"`

	// vm host prefer policy
	// Required: true
	VMHostPreferPolicy *bool `json:"vm_host_prefer_policy"`

	// vm vm policy
	// Required: true
	VMVMPolicy *VMVMPolicy `json:"vm_vm_policy"`

	// vm vm policy enabled
	// Required: true
	VMVMPolicyEnabled *bool `json:"vm_vm_policy_enabled"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`
}

// Validate validates this Vm placement group
func (m *VMPlacementGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostMustEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostMustHostUuids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostMustPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostPreferEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostPreferHostUuids(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostPreferPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVMPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVMPolicyEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMPlacementGroup) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VMPlacementGroup) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VMPlacementGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateLocalCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("local_created_at", "body", m.LocalCreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateLocalUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("local_updated_at", "body", m.LocalUpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateVMHostMustEnabled(formats strfmt.Registry) error {

	if err := validate.Required("vm_host_must_enabled", "body", m.VMHostMustEnabled); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateVMHostMustHostUuids(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostMustHostUuids) { // not required
		return nil
	}

	for i := 0; i < len(m.VMHostMustHostUuids); i++ {
		if swag.IsZero(m.VMHostMustHostUuids[i]) { // not required
			continue
		}

		if m.VMHostMustHostUuids[i] != nil {
			if err := m.VMHostMustHostUuids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_host_must_host_uuids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_host_must_host_uuids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroup) validateVMHostMustPolicy(formats strfmt.Registry) error {

	if err := validate.Required("vm_host_must_policy", "body", m.VMHostMustPolicy); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateVMHostPreferEnabled(formats strfmt.Registry) error {

	if err := validate.Required("vm_host_prefer_enabled", "body", m.VMHostPreferEnabled); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateVMHostPreferHostUuids(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostPreferHostUuids) { // not required
		return nil
	}

	for i := 0; i < len(m.VMHostPreferHostUuids); i++ {
		if swag.IsZero(m.VMHostPreferHostUuids[i]) { // not required
			continue
		}

		if m.VMHostPreferHostUuids[i] != nil {
			if err := m.VMHostPreferHostUuids[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_host_prefer_host_uuids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_host_prefer_host_uuids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroup) validateVMHostPreferPolicy(formats strfmt.Registry) error {

	if err := validate.Required("vm_host_prefer_policy", "body", m.VMHostPreferPolicy); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateVMVMPolicy(formats strfmt.Registry) error {

	if err := validate.Required("vm_vm_policy", "body", m.VMVMPolicy); err != nil {
		return err
	}

	if err := validate.Required("vm_vm_policy", "body", m.VMVMPolicy); err != nil {
		return err
	}

	if m.VMVMPolicy != nil {
		if err := m.VMVMPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_vm_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_vm_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VMPlacementGroup) validateVMVMPolicyEnabled(formats strfmt.Registry) error {

	if err := validate.Required("vm_vm_policy_enabled", "body", m.VMVMPolicyEnabled); err != nil {
		return err
	}

	return nil
}

func (m *VMPlacementGroup) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this Vm placement group based on the context it is used
func (m *VMPlacementGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostMustHostUuids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostPreferHostUuids(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVMPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMPlacementGroup) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VMPlacementGroup) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *VMPlacementGroup) contextValidateVMHostMustHostUuids(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMHostMustHostUuids); i++ {

		if m.VMHostMustHostUuids[i] != nil {
			if err := m.VMHostMustHostUuids[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_host_must_host_uuids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_host_must_host_uuids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroup) contextValidateVMHostPreferHostUuids(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMHostPreferHostUuids); i++ {

		if m.VMHostPreferHostUuids[i] != nil {
			if err := m.VMHostPreferHostUuids[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_host_prefer_host_uuids" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vm_host_prefer_host_uuids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroup) contextValidateVMVMPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVMPolicy != nil {
		if err := m.VMVMPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_vm_policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_vm_policy")
			}
			return err
		}
	}

	return nil
}

func (m *VMPlacementGroup) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMPlacementGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMPlacementGroup) UnmarshalBinary(b []byte) error {
	var res VMPlacementGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
