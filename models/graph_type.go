// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GraphType graph type
//
// swagger:model GraphType
type GraphType string

func NewGraphType(value GraphType) *GraphType {
	v := value
	return &v
}

const (

	// GraphTypeAREA captures enum value "AREA"
	GraphTypeAREA GraphType = "AREA"

	// GraphTypeSTACK captures enum value "STACK"
	GraphTypeSTACK GraphType = "STACK"
)

// for schema
var graphTypeEnum []interface{}

func init() {
	var res []GraphType
	if err := json.Unmarshal([]byte(`["AREA","STACK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		graphTypeEnum = append(graphTypeEnum, v)
	}
}

func (m GraphType) validateGraphTypeEnum(path, location string, value GraphType) error {
	if err := validate.EnumCase(path, location, value, graphTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this graph type
func (m GraphType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGraphTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this graph type based on context it is used
func (m GraphType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
