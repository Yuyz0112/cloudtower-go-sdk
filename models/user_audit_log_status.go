// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UserAuditLogStatus user audit log status
//
// swagger:model UserAuditLogStatus
type UserAuditLogStatus string

func NewUserAuditLogStatus(value UserAuditLogStatus) *UserAuditLogStatus {
	v := value
	return &v
}

const (

	// UserAuditLogStatusFAILED captures enum value "FAILED"
	UserAuditLogStatusFAILED UserAuditLogStatus = "FAILED"

	// UserAuditLogStatusSUCCESSED captures enum value "SUCCESSED"
	UserAuditLogStatusSUCCESSED UserAuditLogStatus = "SUCCESSED"
)

// for schema
var userAuditLogStatusEnum []interface{}

func init() {
	var res []UserAuditLogStatus
	if err := json.Unmarshal([]byte(`["FAILED","SUCCESSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAuditLogStatusEnum = append(userAuditLogStatusEnum, v)
	}
}

func (m UserAuditLogStatus) validateUserAuditLogStatusEnum(path, location string, value UserAuditLogStatus) error {
	if err := validate.EnumCase(path, location, value, userAuditLogStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this user audit log status
func (m UserAuditLogStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUserAuditLogStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this user audit log status based on context it is used
func (m UserAuditLogStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
