// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EverouteClusterOrderByInput everoute cluster order by input
//
// swagger:model EverouteClusterOrderByInput
type EverouteClusterOrderByInput string

func NewEverouteClusterOrderByInput(value EverouteClusterOrderByInput) *EverouteClusterOrderByInput {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EverouteClusterOrderByInput.
func (m EverouteClusterOrderByInput) Pointer() *EverouteClusterOrderByInput {
	return &m
}

const (

	// EverouteClusterOrderByInputControllerInstancesASC captures enum value "controller_instances_ASC"
	EverouteClusterOrderByInputControllerInstancesASC EverouteClusterOrderByInput = "controller_instances_ASC"

	// EverouteClusterOrderByInputControllerInstancesDESC captures enum value "controller_instances_DESC"
	EverouteClusterOrderByInputControllerInstancesDESC EverouteClusterOrderByInput = "controller_instances_DESC"

	// EverouteClusterOrderByInputControllerTemplateASC captures enum value "controller_template_ASC"
	EverouteClusterOrderByInputControllerTemplateASC EverouteClusterOrderByInput = "controller_template_ASC"

	// EverouteClusterOrderByInputControllerTemplateDESC captures enum value "controller_template_DESC"
	EverouteClusterOrderByInputControllerTemplateDESC EverouteClusterOrderByInput = "controller_template_DESC"

	// EverouteClusterOrderByInputCreatedAtASC captures enum value "createdAt_ASC"
	EverouteClusterOrderByInputCreatedAtASC EverouteClusterOrderByInput = "createdAt_ASC"

	// EverouteClusterOrderByInputCreatedAtDESC captures enum value "createdAt_DESC"
	EverouteClusterOrderByInputCreatedAtDESC EverouteClusterOrderByInput = "createdAt_DESC"

	// EverouteClusterOrderByInputEntityAsyncStatusASC captures enum value "entityAsyncStatus_ASC"
	EverouteClusterOrderByInputEntityAsyncStatusASC EverouteClusterOrderByInput = "entityAsyncStatus_ASC"

	// EverouteClusterOrderByInputEntityAsyncStatusDESC captures enum value "entityAsyncStatus_DESC"
	EverouteClusterOrderByInputEntityAsyncStatusDESC EverouteClusterOrderByInput = "entityAsyncStatus_DESC"

	// EverouteClusterOrderByInputGlobalDefaultActionASC captures enum value "global_default_action_ASC"
	EverouteClusterOrderByInputGlobalDefaultActionASC EverouteClusterOrderByInput = "global_default_action_ASC"

	// EverouteClusterOrderByInputGlobalDefaultActionDESC captures enum value "global_default_action_DESC"
	EverouteClusterOrderByInputGlobalDefaultActionDESC EverouteClusterOrderByInput = "global_default_action_DESC"

	// EverouteClusterOrderByInputGlobalWhitelistASC captures enum value "global_whitelist_ASC"
	EverouteClusterOrderByInputGlobalWhitelistASC EverouteClusterOrderByInput = "global_whitelist_ASC"

	// EverouteClusterOrderByInputGlobalWhitelistDESC captures enum value "global_whitelist_DESC"
	EverouteClusterOrderByInputGlobalWhitelistDESC EverouteClusterOrderByInput = "global_whitelist_DESC"

	// EverouteClusterOrderByInputIDASC captures enum value "id_ASC"
	EverouteClusterOrderByInputIDASC EverouteClusterOrderByInput = "id_ASC"

	// EverouteClusterOrderByInputIDDESC captures enum value "id_DESC"
	EverouteClusterOrderByInputIDDESC EverouteClusterOrderByInput = "id_DESC"

	// EverouteClusterOrderByInputInstalledASC captures enum value "installed_ASC"
	EverouteClusterOrderByInputInstalledASC EverouteClusterOrderByInput = "installed_ASC"

	// EverouteClusterOrderByInputInstalledDESC captures enum value "installed_DESC"
	EverouteClusterOrderByInputInstalledDESC EverouteClusterOrderByInput = "installed_DESC"

	// EverouteClusterOrderByInputNameASC captures enum value "name_ASC"
	EverouteClusterOrderByInputNameASC EverouteClusterOrderByInput = "name_ASC"

	// EverouteClusterOrderByInputNameDESC captures enum value "name_DESC"
	EverouteClusterOrderByInputNameDESC EverouteClusterOrderByInput = "name_DESC"

	// EverouteClusterOrderByInputPhaseASC captures enum value "phase_ASC"
	EverouteClusterOrderByInputPhaseASC EverouteClusterOrderByInput = "phase_ASC"

	// EverouteClusterOrderByInputPhaseDESC captures enum value "phase_DESC"
	EverouteClusterOrderByInputPhaseDESC EverouteClusterOrderByInput = "phase_DESC"

	// EverouteClusterOrderByInputStatusASC captures enum value "status_ASC"
	EverouteClusterOrderByInputStatusASC EverouteClusterOrderByInput = "status_ASC"

	// EverouteClusterOrderByInputStatusDESC captures enum value "status_DESC"
	EverouteClusterOrderByInputStatusDESC EverouteClusterOrderByInput = "status_DESC"

	// EverouteClusterOrderByInputUpdatedAtASC captures enum value "updatedAt_ASC"
	EverouteClusterOrderByInputUpdatedAtASC EverouteClusterOrderByInput = "updatedAt_ASC"

	// EverouteClusterOrderByInputUpdatedAtDESC captures enum value "updatedAt_DESC"
	EverouteClusterOrderByInputUpdatedAtDESC EverouteClusterOrderByInput = "updatedAt_DESC"

	// EverouteClusterOrderByInputVersionASC captures enum value "version_ASC"
	EverouteClusterOrderByInputVersionASC EverouteClusterOrderByInput = "version_ASC"

	// EverouteClusterOrderByInputVersionDESC captures enum value "version_DESC"
	EverouteClusterOrderByInputVersionDESC EverouteClusterOrderByInput = "version_DESC"
)

// for schema
var everouteClusterOrderByInputEnum []interface{}

func init() {
	var res []EverouteClusterOrderByInput
	if err := json.Unmarshal([]byte(`["controller_instances_ASC","controller_instances_DESC","controller_template_ASC","controller_template_DESC","createdAt_ASC","createdAt_DESC","entityAsyncStatus_ASC","entityAsyncStatus_DESC","global_default_action_ASC","global_default_action_DESC","global_whitelist_ASC","global_whitelist_DESC","id_ASC","id_DESC","installed_ASC","installed_DESC","name_ASC","name_DESC","phase_ASC","phase_DESC","status_ASC","status_DESC","updatedAt_ASC","updatedAt_DESC","version_ASC","version_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		everouteClusterOrderByInputEnum = append(everouteClusterOrderByInputEnum, v)
	}
}

func (m EverouteClusterOrderByInput) validateEverouteClusterOrderByInputEnum(path, location string, value EverouteClusterOrderByInput) error {
	if err := validate.EnumCase(path, location, value, everouteClusterOrderByInputEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this everoute cluster order by input
func (m EverouteClusterOrderByInput) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEverouteClusterOrderByInputEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this everoute cluster order by input based on context it is used
func (m EverouteClusterOrderByInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
