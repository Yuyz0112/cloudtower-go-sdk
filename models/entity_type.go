// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EntityType entity type
//
// swagger:model EntityType
type EntityType string

func NewEntityType(value EntityType) *EntityType {
	v := value
	return &v
}

const (

	// EntityTypeVM captures enum value "VM"
	EntityTypeVM EntityType = "VM"
)

// for schema
var entityTypeEnum []interface{}

func init() {
	var res []EntityType
	if err := json.Unmarshal([]byte(`["VM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entityTypeEnum = append(entityTypeEnum, v)
	}
}

func (m EntityType) validateEntityTypeEnum(path, location string, value EntityType) error {
	if err := validate.EnumCase(path, location, value, entityTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this entity type
func (m EntityType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEntityTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this entity type based on context it is used
func (m EntityType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
