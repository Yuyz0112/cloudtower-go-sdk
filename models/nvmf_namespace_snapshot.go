// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NvmfNamespaceSnapshot nvmf namespace snapshot
//
// swagger:model NvmfNamespaceSnapshot
type NvmfNamespaceSnapshot struct {

	// consistency group snapshot
	ConsistencyGroupSnapshot *NvmfNamespaceSnapshotConsistencyGroupSnapshot `json:"consistency_group_snapshot,omitempty"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// labels
	Labels []*NvmfNamespaceSnapshotLabelsItems0 `json:"labels,omitempty"`

	// local created at
	// Required: true
	LocalCreatedAt *string `json:"local_created_at"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// nvmf namespace
	NvmfNamespace *NvmfNamespaceSnapshotNvmfNamespace `json:"nvmf_namespace,omitempty"`

	// nvmf subsystem
	// Required: true
	NvmfSubsystem *NvmfNamespaceSnapshotNvmfSubsystem `json:"nvmf_subsystem"`

	// unique size
	// Required: true
	UniqueSize *float64 `json:"unique_size"`
}

// Validate validates this nvmf namespace snapshot
func (m *NvmfNamespaceSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsistencyGroupSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceSnapshot) validateConsistencyGroupSnapshot(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshot) { // not required
		return nil
	}

	if m.ConsistencyGroupSnapshot != nil {
		if err := m.ConsistencyGroupSnapshot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group_snapshot")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateLocalCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("local_created_at", "body", m.LocalCreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateNvmfNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespace) { // not required
		return nil
	}

	if m.NvmfNamespace != nil {
		if err := m.NvmfNamespace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nvmf_namespace")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateNvmfSubsystem(formats strfmt.Registry) error {

	if err := validate.Required("nvmf_subsystem", "body", m.NvmfSubsystem); err != nil {
		return err
	}

	if m.NvmfSubsystem != nil {
		if err := m.NvmfSubsystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nvmf_subsystem")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) validateUniqueSize(formats strfmt.Registry) error {

	if err := validate.Required("unique_size", "body", m.UniqueSize); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nvmf namespace snapshot based on the context it is used
func (m *NvmfNamespaceSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsistencyGroupSnapshot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceSnapshot) contextValidateConsistencyGroupSnapshot(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistencyGroupSnapshot != nil {
		if err := m.ConsistencyGroupSnapshot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistency_group_snapshot")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NvmfNamespaceSnapshot) contextValidateNvmfNamespace(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfNamespace != nil {
		if err := m.NvmfNamespace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nvmf_namespace")
			}
			return err
		}
	}

	return nil
}

func (m *NvmfNamespaceSnapshot) contextValidateNvmfSubsystem(ctx context.Context, formats strfmt.Registry) error {

	if m.NvmfSubsystem != nil {
		if err := m.NvmfSubsystem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nvmf_subsystem")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NvmfNamespaceSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NvmfNamespaceSnapshot) UnmarshalBinary(b []byte) error {
	var res NvmfNamespaceSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NvmfNamespaceSnapshotConsistencyGroupSnapshot nvmf namespace snapshot consistency group snapshot
//
// swagger:model NvmfNamespaceSnapshotConsistencyGroupSnapshot
type NvmfNamespaceSnapshotConsistencyGroupSnapshot struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this nvmf namespace snapshot consistency group snapshot
func (m *NvmfNamespaceSnapshotConsistencyGroupSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceSnapshotConsistencyGroupSnapshot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("consistency_group_snapshot"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NvmfNamespaceSnapshotConsistencyGroupSnapshot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("consistency_group_snapshot"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nvmf namespace snapshot consistency group snapshot based on context it is used
func (m *NvmfNamespaceSnapshotConsistencyGroupSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotConsistencyGroupSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotConsistencyGroupSnapshot) UnmarshalBinary(b []byte) error {
	var res NvmfNamespaceSnapshotConsistencyGroupSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NvmfNamespaceSnapshotLabelsItems0 nvmf namespace snapshot labels items0
//
// swagger:model NvmfNamespaceSnapshotLabelsItems0
type NvmfNamespaceSnapshotLabelsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this nvmf namespace snapshot labels items0
func (m *NvmfNamespaceSnapshotLabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceSnapshotLabelsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nvmf namespace snapshot labels items0 based on context it is used
func (m *NvmfNamespaceSnapshotLabelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotLabelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotLabelsItems0) UnmarshalBinary(b []byte) error {
	var res NvmfNamespaceSnapshotLabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NvmfNamespaceSnapshotNvmfNamespace nvmf namespace snapshot nvmf namespace
//
// swagger:model NvmfNamespaceSnapshotNvmfNamespace
type NvmfNamespaceSnapshotNvmfNamespace struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this nvmf namespace snapshot nvmf namespace
func (m *NvmfNamespaceSnapshotNvmfNamespace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceSnapshotNvmfNamespace) validateID(formats strfmt.Registry) error {

	if err := validate.Required("nvmf_namespace"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NvmfNamespaceSnapshotNvmfNamespace) validateName(formats strfmt.Registry) error {

	if err := validate.Required("nvmf_namespace"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nvmf namespace snapshot nvmf namespace based on context it is used
func (m *NvmfNamespaceSnapshotNvmfNamespace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotNvmfNamespace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotNvmfNamespace) UnmarshalBinary(b []byte) error {
	var res NvmfNamespaceSnapshotNvmfNamespace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NvmfNamespaceSnapshotNvmfSubsystem nvmf namespace snapshot nvmf subsystem
//
// swagger:model NvmfNamespaceSnapshotNvmfSubsystem
type NvmfNamespaceSnapshotNvmfSubsystem struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this nvmf namespace snapshot nvmf subsystem
func (m *NvmfNamespaceSnapshotNvmfSubsystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NvmfNamespaceSnapshotNvmfSubsystem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("nvmf_subsystem"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *NvmfNamespaceSnapshotNvmfSubsystem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("nvmf_subsystem"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nvmf namespace snapshot nvmf subsystem based on context it is used
func (m *NvmfNamespaceSnapshotNvmfSubsystem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotNvmfSubsystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NvmfNamespaceSnapshotNvmfSubsystem) UnmarshalBinary(b []byte) error {
	var res NvmfNamespaceSnapshotNvmfSubsystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
