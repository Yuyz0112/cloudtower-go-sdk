// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BrickPhaseEnum brick phase enum
//
// swagger:model BrickPhaseEnum
type BrickPhaseEnum string

func NewBrickPhaseEnum(value BrickPhaseEnum) *BrickPhaseEnum {
	v := value
	return &v
}

const (

	// BrickPhaseEnumBACKWARD captures enum value "BACKWARD"
	BrickPhaseEnumBACKWARD BrickPhaseEnum = "BACKWARD"

	// BrickPhaseEnumFORWARD captures enum value "FORWARD"
	BrickPhaseEnumFORWARD BrickPhaseEnum = "FORWARD"
)

// for schema
var brickPhaseEnumEnum []interface{}

func init() {
	var res []BrickPhaseEnum
	if err := json.Unmarshal([]byte(`["BACKWARD","FORWARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		brickPhaseEnumEnum = append(brickPhaseEnumEnum, v)
	}
}

func (m BrickPhaseEnum) validateBrickPhaseEnumEnum(path, location string, value BrickPhaseEnum) error {
	if err := validate.EnumCase(path, location, value, brickPhaseEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this brick phase enum
func (m BrickPhaseEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBrickPhaseEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this brick phase enum based on context it is used
func (m BrickPhaseEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
