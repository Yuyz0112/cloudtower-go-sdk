// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMSnapshot Vm snapshot
//
// swagger:model VmSnapshot
type VMSnapshot struct {

	// clock offset
	// Required: true
	ClockOffset *VMClockOffset `json:"clock_offset"`

	// cluster
	// Required: true
	Cluster *VMSnapshotCluster `json:"cluster"`

	// consistent type
	// Required: true
	ConsistentType *ConsistentType `json:"consistent_type"`

	// cpu
	// Required: true
	CPU *VMSnapshotCPU `json:"cpu"`

	// cpu model
	// Required: true
	CPUModel *string `json:"cpu_model"`

	// description
	// Required: true
	Description *string `json:"description"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// firmware
	// Required: true
	Firmware *VMFirmware `json:"firmware"`

	// ha
	// Required: true
	Ha *bool `json:"ha"`

	// id
	// Required: true
	ID *string `json:"id"`

	// io policy
	IoPolicy interface{} `json:"io_policy,omitempty"`

	// labels
	Labels []*VMSnapshotLabelsItems0 `json:"labels,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// max bandwidth
	MaxBandwidth *float64 `json:"max_bandwidth,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy interface{} `json:"max_bandwidth_policy,omitempty"`

	// max iops
	MaxIops *float64 `json:"max_iops,omitempty"`

	// max iops policy
	MaxIopsPolicy interface{} `json:"max_iops_policy,omitempty"`

	// memory
	// Required: true
	Memory *float64 `json:"memory"`

	// name
	// Required: true
	Name *string `json:"name"`

	// size
	// Required: true
	Size *float64 `json:"size"`

	// snapshot group
	SnapshotGroup *VMSnapshotSnapshotGroup `json:"snapshot_group,omitempty"`

	// vcpu
	// Required: true
	Vcpu *float64 `json:"vcpu"`

	// vm
	VM *VMSnapshotVM `json:"vm,omitempty"`

	// vm disks
	VMDisks []*VMSnapshotVMDisksItems0 `json:"vm_disks,omitempty"`

	// vm nics
	VMNics []*VMSnapshotVMNicsItems0 `json:"vm_nics,omitempty"`

	// win opt
	// Required: true
	WinOpt *bool `json:"win_opt"`
}

// Validate validates this Vm snapshot
func (m *VMSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClockOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWinOpt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshot) validateClockOffset(formats strfmt.Registry) error {

	if err := validate.Required("clock_offset", "body", m.ClockOffset); err != nil {
		return err
	}

	if err := validate.Required("clock_offset", "body", m.ClockOffset); err != nil {
		return err
	}

	if m.ClockOffset != nil {
		if err := m.ClockOffset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateConsistentType(formats strfmt.Registry) error {

	if err := validate.Required("consistent_type", "body", m.ConsistentType); err != nil {
		return err
	}

	if err := validate.Required("consistent_type", "body", m.ConsistentType); err != nil {
		return err
	}

	if m.ConsistentType != nil {
		if err := m.ConsistentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateCPUModel(formats strfmt.Registry) error {

	if err := validate.Required("cpu_model", "body", m.CPUModel); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateFirmware(formats strfmt.Registry) error {

	if err := validate.Required("firmware", "body", m.Firmware); err != nil {
		return err
	}

	if err := validate.Required("firmware", "body", m.Firmware); err != nil {
		return err
	}

	if m.Firmware != nil {
		if err := m.Firmware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateHa(formats strfmt.Registry) error {

	if err := validate.Required("ha", "body", m.Ha); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	for i := 0; i < len(m.Labels); i++ {
		if swag.IsZero(m.Labels[i]) { // not required
			continue
		}

		if m.Labels[i] != nil {
			if err := m.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMSnapshot) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateSnapshotGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotGroup) { // not required
		return nil
	}

	if m.SnapshotGroup != nil {
		if err := m.SnapshotGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_group")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateVcpu(formats strfmt.Registry) error {

	if err := validate.Required("vcpu", "body", m.Vcpu); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshot) validateVM(formats strfmt.Registry) error {
	if swag.IsZero(m.VM) { // not required
		return nil
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) validateVMDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.VMDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.VMDisks); i++ {
		if swag.IsZero(m.VMDisks[i]) { // not required
			continue
		}

		if m.VMDisks[i] != nil {
			if err := m.VMDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMSnapshot) validateVMNics(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNics) { // not required
		return nil
	}

	for i := 0; i < len(m.VMNics); i++ {
		if swag.IsZero(m.VMNics[i]) { // not required
			continue
		}

		if m.VMNics[i] != nil {
			if err := m.VMNics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMSnapshot) validateWinOpt(formats strfmt.Registry) error {

	if err := validate.Required("win_opt", "body", m.WinOpt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Vm snapshot based on the context it is used
func (m *VMSnapshot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClockOffset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshot) contextValidateClockOffset(ctx context.Context, formats strfmt.Registry) error {

	if m.ClockOffset != nil {
		if err := m.ClockOffset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) contextValidateConsistentType(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsistentType != nil {
		if err := m.ConsistentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consistent_type")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {
		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) contextValidateFirmware(ctx context.Context, formats strfmt.Registry) error {

	if m.Firmware != nil {
		if err := m.Firmware.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) contextValidateLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Labels); i++ {

		if m.Labels[i] != nil {
			if err := m.Labels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMSnapshot) contextValidateSnapshotGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotGroup != nil {
		if err := m.SnapshotGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot_group")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshot) contextValidateVMDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMDisks); i++ {

		if m.VMDisks[i] != nil {
			if err := m.VMDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMSnapshot) contextValidateVMNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMNics); i++ {

		if m.VMNics[i] != nil {
			if err := m.VMNics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshot) UnmarshalBinary(b []byte) error {
	var res VMSnapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotCPU VM snapshot CPU
//
// swagger:model VMSnapshotCPU
type VMSnapshotCPU struct {

	// cores
	// Required: true
	Cores *float64 `json:"cores"`

	// sockets
	// Required: true
	Sockets *float64 `json:"sockets"`
}

// Validate validates this VM snapshot CPU
func (m *VMSnapshotCPU) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSockets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotCPU) validateCores(formats strfmt.Registry) error {

	if err := validate.Required("cpu"+"."+"cores", "body", m.Cores); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotCPU) validateSockets(formats strfmt.Registry) error {

	if err := validate.Required("cpu"+"."+"sockets", "body", m.Sockets); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM snapshot CPU based on context it is used
func (m *VMSnapshotCPU) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotCPU) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotCPU) UnmarshalBinary(b []byte) error {
	var res VMSnapshotCPU
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotCluster VM snapshot cluster
//
// swagger:model VMSnapshotCluster
type VMSnapshotCluster struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM snapshot cluster
func (m *VMSnapshotCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotCluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotCluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM snapshot cluster based on context it is used
func (m *VMSnapshotCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotCluster) UnmarshalBinary(b []byte) error {
	var res VMSnapshotCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotLabelsItems0 VM snapshot labels items0
//
// swagger:model VMSnapshotLabelsItems0
type VMSnapshotLabelsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this VM snapshot labels items0
func (m *VMSnapshotLabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotLabelsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM snapshot labels items0 based on context it is used
func (m *VMSnapshotLabelsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotLabelsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotLabelsItems0) UnmarshalBinary(b []byte) error {
	var res VMSnapshotLabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotSnapshotGroup VM snapshot snapshot group
//
// swagger:model VMSnapshotSnapshotGroup
type VMSnapshotSnapshotGroup struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM snapshot snapshot group
func (m *VMSnapshotSnapshotGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotSnapshotGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_group"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotSnapshotGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_group"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM snapshot snapshot group based on context it is used
func (m *VMSnapshotSnapshotGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotSnapshotGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotSnapshotGroup) UnmarshalBinary(b []byte) error {
	var res VMSnapshotSnapshotGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotVM VM snapshot VM
//
// swagger:model VMSnapshotVM
type VMSnapshotVM struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM snapshot VM
func (m *VMSnapshotVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotVM) validateID(formats strfmt.Registry) error {

	if err := validate.Required("vm"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVM) validateName(formats strfmt.Registry) error {

	if err := validate.Required("vm"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM snapshot VM based on context it is used
func (m *VMSnapshotVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotVM) UnmarshalBinary(b []byte) error {
	var res VMSnapshotVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotVMDisksItems0 VM snapshot VM disks items0
//
// swagger:model VMSnapshotVMDisksItems0
type VMSnapshotVMDisksItems0 struct {

	// boot
	// Required: true
	Boot *float64 `json:"boot"`

	// bus
	// Required: true
	Bus *Bus `json:"bus"`

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// disk name
	DiskName *string `json:"disk_name,omitempty"`

	// elf image local id
	// Required: true
	ElfImageLocalID *string `json:"elf_image_local_id"`

	// image name
	ImageName *string `json:"image_name,omitempty"`

	// index
	// Required: true
	Index *float64 `json:"index"`

	// key
	Key *float64 `json:"key,omitempty"`

	// max bandwidth
	MaxBandwidth *float64 `json:"max_bandwidth,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy interface{} `json:"max_bandwidth_policy,omitempty"`

	// max iops
	MaxIops *float64 `json:"max_iops,omitempty"`

	// max iops policy
	MaxIopsPolicy interface{} `json:"max_iops_policy,omitempty"`

	// path
	// Required: true
	Path *string `json:"path"`

	// size
	// Required: true
	Size *float64 `json:"size"`

	// snapshot local id
	SnapshotLocalID *string `json:"snapshot_local_id,omitempty"`

	// storage policy uuid
	// Required: true
	StoragePolicyUUID *string `json:"storage_policy_uuid"`

	// svt image local id
	// Required: true
	SvtImageLocalID *string `json:"svt_image_local_id"`

	// type
	// Required: true
	Type *VMDiskType `json:"type"`

	// vm volume local id
	// Required: true
	VMVolumeLocalID *string `json:"vm_volume_local_id"`
}

// Validate validates this VM snapshot VM disks items0
func (m *VMSnapshotVMDisksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImageLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicyUUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvtImageLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumeLocalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotVMDisksItems0) validateBoot(formats strfmt.Registry) error {

	if err := validate.Required("boot", "body", m.Boot); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateBus(formats strfmt.Registry) error {

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if m.Bus != nil {
		if err := m.Bus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateElfImageLocalID(formats strfmt.Registry) error {

	if err := validate.Required("elf_image_local_id", "body", m.ElfImageLocalID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateStoragePolicyUUID(formats strfmt.Registry) error {

	if err := validate.Required("storage_policy_uuid", "body", m.StoragePolicyUUID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateSvtImageLocalID(formats strfmt.Registry) error {

	if err := validate.Required("svt_image_local_id", "body", m.SvtImageLocalID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) validateVMVolumeLocalID(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume_local_id", "body", m.VMVolumeLocalID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this VM snapshot VM disks items0 based on the context it is used
func (m *VMSnapshotVMDisksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotVMDisksItems0) contextValidateBus(ctx context.Context, formats strfmt.Registry) error {

	if m.Bus != nil {
		if err := m.Bus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *VMSnapshotVMDisksItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotVMDisksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotVMDisksItems0) UnmarshalBinary(b []byte) error {
	var res VMSnapshotVMDisksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotVMNicsItems0 VM snapshot VM nics items0
//
// swagger:model VMSnapshotVMNicsItems0
type VMSnapshotVMNicsItems0 struct {

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// gateway
	// Required: true
	Gateway *string `json:"gateway"`

	// index
	// Required: true
	Index *float64 `json:"index"`

	// ip address
	// Required: true
	IPAddress *string `json:"ip_address"`

	// mac address
	// Required: true
	MacAddress *string `json:"mac_address"`

	// mirror
	Mirror *bool `json:"mirror,omitempty"`

	// model
	Model interface{} `json:"model,omitempty"`

	// subnet mask
	// Required: true
	SubnetMask *string `json:"subnet_mask"`

	// vlan
	// Required: true
	Vlan *VMSnapshotVMNicsItems0Vlan `json:"vlan"`
}

// Validate validates this VM snapshot VM nics items0
func (m *VMSnapshotVMNicsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotVMNicsItems0) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0) validateIPAddress(formats strfmt.Registry) error {

	if err := validate.Required("ip_address", "body", m.IPAddress); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0) validateMacAddress(formats strfmt.Registry) error {

	if err := validate.Required("mac_address", "body", m.MacAddress); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0) validateSubnetMask(formats strfmt.Registry) error {

	if err := validate.Required("subnet_mask", "body", m.SubnetMask); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0) validateVlan(formats strfmt.Registry) error {

	if err := validate.Required("vlan", "body", m.Vlan); err != nil {
		return err
	}

	if m.Vlan != nil {
		if err := m.Vlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this VM snapshot VM nics items0 based on the context it is used
func (m *VMSnapshotVMNicsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotVMNicsItems0) contextValidateVlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Vlan != nil {
		if err := m.Vlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotVMNicsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotVMNicsItems0) UnmarshalBinary(b []byte) error {
	var res VMSnapshotVMNicsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMSnapshotVMNicsItems0Vlan VM snapshot VM nics items0 vlan
//
// swagger:model VMSnapshotVMNicsItems0Vlan
type VMSnapshotVMNicsItems0Vlan struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// vds ovs
	// Required: true
	VdsOvs *string `json:"vds_ovs"`

	// vlan id
	// Required: true
	VlanID *float64 `json:"vlan_id"`

	// vlan local id
	// Required: true
	VlanLocalID *string `json:"vlan_local_id"`
}

// Validate validates this VM snapshot VM nics items0 vlan
func (m *VMSnapshotVMNicsItems0Vlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsOvs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanLocalID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMSnapshotVMNicsItems0Vlan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("vlan"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0Vlan) validateVdsOvs(formats strfmt.Registry) error {

	if err := validate.Required("vlan"+"."+"vds_ovs", "body", m.VdsOvs); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0Vlan) validateVlanID(formats strfmt.Registry) error {

	if err := validate.Required("vlan"+"."+"vlan_id", "body", m.VlanID); err != nil {
		return err
	}

	return nil
}

func (m *VMSnapshotVMNicsItems0Vlan) validateVlanLocalID(formats strfmt.Registry) error {

	if err := validate.Required("vlan"+"."+"vlan_local_id", "body", m.VlanLocalID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM snapshot VM nics items0 vlan based on context it is used
func (m *VMSnapshotVMNicsItems0Vlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMSnapshotVMNicsItems0Vlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMSnapshotVMNicsItems0Vlan) UnmarshalBinary(b []byte) error {
	var res VMSnapshotVMNicsItems0Vlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
