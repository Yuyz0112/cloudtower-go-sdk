// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportTemplate report template
//
// swagger:model ReportTemplate
type ReportTemplate struct {

	// created at
	// Required: true
	CreatedAt *string `json:"createdAt"`

	// description
	// Required: true
	Description *string `json:"description"`

	// execute plan
	// Required: true
	ExecutePlan []*ReportTemplateExecutePlanItems0 `json:"execute_plan"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// preset
	Preset *string `json:"preset,omitempty"`

	// resource meta
	// Required: true
	ResourceMeta []*ReportTemplateResourceMetaItems0 `json:"resource_meta"`

	// task num
	// Required: true
	TaskNum *float64 `json:"task_num"`

	// tasks
	Tasks []*ReportTemplateTasksItems0 `json:"tasks,omitempty"`
}

// Validate validates this report template
func (m *ReportTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplate) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateExecutePlan(formats strfmt.Registry) error {

	if err := validate.Required("execute_plan", "body", m.ExecutePlan); err != nil {
		return err
	}

	for i := 0; i < len(m.ExecutePlan); i++ {
		if swag.IsZero(m.ExecutePlan[i]) { // not required
			continue
		}

		if m.ExecutePlan[i] != nil {
			if err := m.ExecutePlan[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("execute_plan" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateResourceMeta(formats strfmt.Registry) error {

	if err := validate.Required("resource_meta", "body", m.ResourceMeta); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceMeta); i++ {
		if swag.IsZero(m.ResourceMeta[i]) { // not required
			continue
		}

		if m.ResourceMeta[i] != nil {
			if err := m.ResourceMeta[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_meta" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) validateTaskNum(formats strfmt.Registry) error {

	if err := validate.Required("task_num", "body", m.TaskNum); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplate) validateTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this report template based on the context it is used
func (m *ReportTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplate) contextValidateExecutePlan(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExecutePlan); i++ {

		if m.ExecutePlan[i] != nil {
			if err := m.ExecutePlan[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("execute_plan" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) contextValidateResourceMeta(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceMeta); i++ {

		if m.ResourceMeta[i] != nil {
			if err := m.ResourceMeta[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_meta" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReportTemplate) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tasks); i++ {

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportTemplate) UnmarshalBinary(b []byte) error {
	var res ReportTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReportTemplateExecutePlanItems0 report template execute plan items0
//
// swagger:model ReportTemplateExecutePlanItems0
type ReportTemplateExecutePlanItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this report template execute plan items0
func (m *ReportTemplateExecutePlanItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplateExecutePlanItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this report template execute plan items0 based on context it is used
func (m *ReportTemplateExecutePlanItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReportTemplateExecutePlanItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportTemplateExecutePlanItems0) UnmarshalBinary(b []byte) error {
	var res ReportTemplateExecutePlanItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReportTemplateResourceMetaItems0 report template resource meta items0
//
// swagger:model ReportTemplateResourceMetaItems0
type ReportTemplateResourceMetaItems0 struct {

	// fields
	// Required: true
	Fields []string `json:"fields"`

	// filter
	// Required: true
	Filter interface{} `json:"filter"`

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *ReportResourceInputEnum `json:"type"`
}

// Validate validates this report template resource meta items0
func (m *ReportTemplateResourceMetaItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplateResourceMetaItems0) validateFields(formats strfmt.Registry) error {

	if err := validate.Required("fields", "body", m.Fields); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplateResourceMetaItems0) validateFilter(formats strfmt.Registry) error {

	if m.Filter == nil {
		return errors.Required("filter", "body", nil)
	}

	return nil
}

func (m *ReportTemplateResourceMetaItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplateResourceMetaItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this report template resource meta items0 based on the context it is used
func (m *ReportTemplateResourceMetaItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplateResourceMetaItems0) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportTemplateResourceMetaItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportTemplateResourceMetaItems0) UnmarshalBinary(b []byte) error {
	var res ReportTemplateResourceMetaItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReportTemplateTasksItems0 report template tasks items0
//
// swagger:model ReportTemplateTasksItems0
type ReportTemplateTasksItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this report template tasks items0
func (m *ReportTemplateTasksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportTemplateTasksItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReportTemplateTasksItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this report template tasks items0 based on context it is used
func (m *ReportTemplateTasksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReportTemplateTasksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportTemplateTasksItems0) UnmarshalBinary(b []byte) error {
	var res ReportTemplateTasksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
