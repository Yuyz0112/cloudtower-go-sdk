// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiskUsage disk usage
//
// swagger:model DiskUsage
type DiskUsage string

func NewDiskUsage(value DiskUsage) *DiskUsage {
	v := value
	return &v
}

const (

	// DiskUsageBOOT captures enum value "BOOT"
	DiskUsageBOOT DiskUsage = "BOOT"

	// DiskUsageCACHE captures enum value "CACHE"
	DiskUsageCACHE DiskUsage = "CACHE"

	// DiskUsageCACHEANDMETA captures enum value "CACHE_AND_META"
	DiskUsageCACHEANDMETA DiskUsage = "CACHE_AND_META"

	// DiskUsageDATA captures enum value "DATA"
	DiskUsageDATA DiskUsage = "DATA"

	// DiskUsageDATAANDMETA captures enum value "DATA_AND_META"
	DiskUsageDATAANDMETA DiskUsage = "DATA_AND_META"
)

// for schema
var diskUsageEnum []interface{}

func init() {
	var res []DiskUsage
	if err := json.Unmarshal([]byte(`["BOOT","CACHE","CACHE_AND_META","DATA","DATA_AND_META"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskUsageEnum = append(diskUsageEnum, v)
	}
}

func (m DiskUsage) validateDiskUsageEnum(path, location string, value DiskUsage) error {
	if err := validate.EnumCase(path, location, value, diskUsageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this disk usage
func (m DiskUsage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiskUsageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this disk usage based on context it is used
func (m DiskUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
