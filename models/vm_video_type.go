// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMVideoType Vm video type
//
// swagger:model VmVideoType
type VMVideoType string

func NewVMVideoType(value VMVideoType) *VMVideoType {
	v := value
	return &v
}

const (

	// VMVideoTypeCIRRUS captures enum value "CIRRUS"
	VMVideoTypeCIRRUS VMVideoType = "CIRRUS"

	// VMVideoTypeQXL captures enum value "QXL"
	VMVideoTypeQXL VMVideoType = "QXL"

	// VMVideoTypeVGA captures enum value "VGA"
	VMVideoTypeVGA VMVideoType = "VGA"

	// VMVideoTypeVIRTIO captures enum value "VIRTIO"
	VMVideoTypeVIRTIO VMVideoType = "VIRTIO"
)

// for schema
var vmVideoTypeEnum []interface{}

func init() {
	var res []VMVideoType
	if err := json.Unmarshal([]byte(`["CIRRUS","QXL","VGA","VIRTIO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmVideoTypeEnum = append(vmVideoTypeEnum, v)
	}
}

func (m VMVideoType) validateVMVideoTypeEnum(path, location string, value VMVideoType) error {
	if err := validate.EnumCase(path, location, value, vmVideoTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm video type
func (m VMVideoType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMVideoTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm video type based on context it is used
func (m VMVideoType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
