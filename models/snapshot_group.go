// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotGroup snapshot group
//
// swagger:model SnapshotGroup
type SnapshotGroup struct {

	// cluster
	// Required: true
	Cluster *SnapshotGroupCluster `json:"cluster"`

	// deleted
	// Required: true
	Deleted *bool `json:"deleted"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// estimated recycling time
	EstimatedRecyclingTime *string `json:"estimated_recycling_time,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// keep
	// Required: true
	Keep *bool `json:"keep"`

	// local created at
	// Required: true
	LocalCreatedAt *string `json:"local_created_at"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// logical size bytes
	// Required: true
	LogicalSizeBytes *float64 `json:"logical_size_bytes"`

	// name
	// Required: true
	Name *string `json:"name"`

	// object num
	// Required: true
	ObjectNum *float64 `json:"object_num"`

	// snapshot plan task
	// Required: true
	SnapshotPlanTask *SnapshotGroupSnapshotPlanTask `json:"snapshotPlanTask"`

	// vm info
	// Required: true
	VMInfo []*SnapshotGroupVMInfoItems0 `json:"vm_info"`

	// vm snapshots
	VMSnapshots []*SnapshotGroupVMSnapshotsItems0 `json:"vm_snapshots,omitempty"`
}

// Validate validates this snapshot group
func (m *SnapshotGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalSizeBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotPlanTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroup) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotGroup) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateKeep(formats strfmt.Registry) error {

	if err := validate.Required("keep", "body", m.Keep); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateLocalCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("local_created_at", "body", m.LocalCreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateLogicalSizeBytes(formats strfmt.Registry) error {

	if err := validate.Required("logical_size_bytes", "body", m.LogicalSizeBytes); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateObjectNum(formats strfmt.Registry) error {

	if err := validate.Required("object_num", "body", m.ObjectNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroup) validateSnapshotPlanTask(formats strfmt.Registry) error {

	if err := validate.Required("snapshotPlanTask", "body", m.SnapshotPlanTask); err != nil {
		return err
	}

	if m.SnapshotPlanTask != nil {
		if err := m.SnapshotPlanTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotPlanTask")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotGroup) validateVMInfo(formats strfmt.Registry) error {

	if err := validate.Required("vm_info", "body", m.VMInfo); err != nil {
		return err
	}

	for i := 0; i < len(m.VMInfo); i++ {
		if swag.IsZero(m.VMInfo[i]) { // not required
			continue
		}

		if m.VMInfo[i] != nil {
			if err := m.VMInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotGroup) validateVMSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.VMSnapshots); i++ {
		if swag.IsZero(m.VMSnapshots[i]) { // not required
			continue
		}

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this snapshot group based on the context it is used
func (m *SnapshotGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotPlanTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroup) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotGroup) contextValidateSnapshotPlanTask(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotPlanTask != nil {
		if err := m.SnapshotPlanTask.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotPlanTask")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotGroup) contextValidateVMInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMInfo); i++ {

		if m.VMInfo[i] != nil {
			if err := m.VMInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotGroup) contextValidateVMSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMSnapshots); i++ {

		if m.VMSnapshots[i] != nil {
			if err := m.VMSnapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vm_snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotGroup) UnmarshalBinary(b []byte) error {
	var res SnapshotGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotGroupCluster snapshot group cluster
//
// swagger:model SnapshotGroupCluster
type SnapshotGroupCluster struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this snapshot group cluster
func (m *SnapshotGroupCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupCluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroupCluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot group cluster based on context it is used
func (m *SnapshotGroupCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotGroupCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotGroupCluster) UnmarshalBinary(b []byte) error {
	var res SnapshotGroupCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotGroupSnapshotPlanTask snapshot group snapshot plan task
//
// swagger:model SnapshotGroupSnapshotPlanTask
type SnapshotGroupSnapshotPlanTask struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this snapshot group snapshot plan task
func (m *SnapshotGroupSnapshotPlanTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupSnapshotPlanTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotPlanTask"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot group snapshot plan task based on context it is used
func (m *SnapshotGroupSnapshotPlanTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotGroupSnapshotPlanTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotGroupSnapshotPlanTask) UnmarshalBinary(b []byte) error {
	var res SnapshotGroupSnapshotPlanTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotGroupVMInfoItems0 snapshot group VM info items0
//
// swagger:model SnapshotGroupVMInfoItems0
type SnapshotGroupVMInfoItems0 struct {

	// disks
	// Required: true
	Disks []*SnapshotGroupVMInfoItems0DisksItems0 `json:"disks"`

	// vm id
	// Required: true
	VMID *string `json:"vm_id"`

	// vm name
	// Required: true
	VMName *string `json:"vm_name"`

	// vm snapshot status
	// Required: true
	VMSnapshotStatus *ProtectSnapshotStatus `json:"vm_snapshot_status"`
}

// Validate validates this snapshot group VM info items0
func (m *SnapshotGroupVMInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshotStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupVMInfoItems0) validateDisks(formats strfmt.Registry) error {

	if err := validate.Required("disks", "body", m.Disks); err != nil {
		return err
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotGroupVMInfoItems0) validateVMID(formats strfmt.Registry) error {

	if err := validate.Required("vm_id", "body", m.VMID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroupVMInfoItems0) validateVMName(formats strfmt.Registry) error {

	if err := validate.Required("vm_name", "body", m.VMName); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroupVMInfoItems0) validateVMSnapshotStatus(formats strfmt.Registry) error {

	if err := validate.Required("vm_snapshot_status", "body", m.VMSnapshotStatus); err != nil {
		return err
	}

	if err := validate.Required("vm_snapshot_status", "body", m.VMSnapshotStatus); err != nil {
		return err
	}

	if m.VMSnapshotStatus != nil {
		if err := m.VMSnapshotStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_snapshot_status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapshot group VM info items0 based on the context it is used
func (m *SnapshotGroupVMInfoItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshotStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupVMInfoItems0) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotGroupVMInfoItems0) contextValidateVMSnapshotStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.VMSnapshotStatus != nil {
		if err := m.VMSnapshotStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_snapshot_status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotGroupVMInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotGroupVMInfoItems0) UnmarshalBinary(b []byte) error {
	var res SnapshotGroupVMInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotGroupVMInfoItems0DisksItems0 snapshot group VM info items0 disks items0
//
// swagger:model SnapshotGroupVMInfoItems0DisksItems0
type SnapshotGroupVMInfoItems0DisksItems0 struct {

	// disk id
	// Required: true
	DiskID *string `json:"disk_id"`

	// disk snapshot status
	// Required: true
	DiskSnapshotStatus *ProtectSnapshotStatus `json:"disk_snapshot_status"`
}

// Validate validates this snapshot group VM info items0 disks items0
func (m *SnapshotGroupVMInfoItems0DisksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskSnapshotStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupVMInfoItems0DisksItems0) validateDiskID(formats strfmt.Registry) error {

	if err := validate.Required("disk_id", "body", m.DiskID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroupVMInfoItems0DisksItems0) validateDiskSnapshotStatus(formats strfmt.Registry) error {

	if err := validate.Required("disk_snapshot_status", "body", m.DiskSnapshotStatus); err != nil {
		return err
	}

	if err := validate.Required("disk_snapshot_status", "body", m.DiskSnapshotStatus); err != nil {
		return err
	}

	if m.DiskSnapshotStatus != nil {
		if err := m.DiskSnapshotStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_snapshot_status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapshot group VM info items0 disks items0 based on the context it is used
func (m *SnapshotGroupVMInfoItems0DisksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskSnapshotStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupVMInfoItems0DisksItems0) contextValidateDiskSnapshotStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskSnapshotStatus != nil {
		if err := m.DiskSnapshotStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_snapshot_status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotGroupVMInfoItems0DisksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotGroupVMInfoItems0DisksItems0) UnmarshalBinary(b []byte) error {
	var res SnapshotGroupVMInfoItems0DisksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotGroupVMSnapshotsItems0 snapshot group VM snapshots items0
//
// swagger:model SnapshotGroupVMSnapshotsItems0
type SnapshotGroupVMSnapshotsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this snapshot group VM snapshots items0
func (m *SnapshotGroupVMSnapshotsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupVMSnapshotsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroupVMSnapshotsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot group VM snapshots items0 based on context it is used
func (m *SnapshotGroupVMSnapshotsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotGroupVMSnapshotsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotGroupVMSnapshotsItems0) UnmarshalBinary(b []byte) error {
	var res SnapshotGroupVMSnapshotsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
