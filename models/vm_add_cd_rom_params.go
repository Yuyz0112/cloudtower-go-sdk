// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMAddCdRomParams Vm add cd rom params
//
// swagger:model VmAddCdRomParams
type VMAddCdRomParams struct {

	// vm cd roms
	// Required: true
	VMCdRoms VMCdRomParams `json:"vm_cd_roms"`

	// vm id
	// Required: true
	VMID *string `json:"vm_id"`
}

// Validate validates this Vm add cd rom params
func (m *VMAddCdRomParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVMCdRoms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMAddCdRomParams) validateVMCdRoms(formats strfmt.Registry) error {

	if err := validate.Required("vm_cd_roms", "body", m.VMCdRoms); err != nil {
		return err
	}

	if err := m.VMCdRoms.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_cd_roms")
		}
		return err
	}

	return nil
}

func (m *VMAddCdRomParams) validateVMID(formats strfmt.Registry) error {

	if err := validate.Required("vm_id", "body", m.VMID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Vm add cd rom params based on the context it is used
func (m *VMAddCdRomParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVMCdRoms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMAddCdRomParams) contextValidateVMCdRoms(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VMCdRoms.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_cd_roms")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMAddCdRomParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMAddCdRomParams) UnmarshalBinary(b []byte) error {
	var res VMAddCdRomParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
