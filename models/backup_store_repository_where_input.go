// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupStoreRepositoryWhereInput backup store repository where input
// Example: {"AND":"BackupStoreRepositoryWhereInput[]","NOT":"BackupStoreRepositoryWhereInput[]","OR":"BackupStoreRepositoryWhereInput[]","backup_plans_every":"BackupPlanWhereInput","backup_plans_none":"BackupPlanWhereInput","backup_plans_some":"BackupPlanWhereInput","backup_restore_points_every":"BackupRestorePointWhereInput","backup_restore_points_none":"BackupRestorePointWhereInput","backup_restore_points_some":"BackupRestorePointWhereInput","backup_service":"BackupServiceWhereInput","description":"string","description_contains":"string","description_ends_with":"string","description_gt":"string","description_gte":"string","description_in":["string"],"description_lt":"string","description_lte":"string","description_not":"string","description_not_contains":"string","description_not_ends_with":"string","description_not_in":["string"],"description_not_starts_with":"string","description_starts_with":"string","entityAsyncStatus":"CREATING","entityAsyncStatus_in":["CREATING"],"entityAsyncStatus_not":"CREATING","entityAsyncStatus_not_in":["CREATING"],"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","iscsi_chap_name":"string","iscsi_chap_name_contains":"string","iscsi_chap_name_ends_with":"string","iscsi_chap_name_gt":"string","iscsi_chap_name_gte":"string","iscsi_chap_name_in":["string"],"iscsi_chap_name_lt":"string","iscsi_chap_name_lte":"string","iscsi_chap_name_not":"string","iscsi_chap_name_not_contains":"string","iscsi_chap_name_not_ends_with":"string","iscsi_chap_name_not_in":["string"],"iscsi_chap_name_not_starts_with":"string","iscsi_chap_name_starts_with":"string","iscsi_chap_secret":"string","iscsi_chap_secret_contains":"string","iscsi_chap_secret_ends_with":"string","iscsi_chap_secret_gt":"string","iscsi_chap_secret_gte":"string","iscsi_chap_secret_in":["string"],"iscsi_chap_secret_lt":"string","iscsi_chap_secret_lte":"string","iscsi_chap_secret_not":"string","iscsi_chap_secret_not_contains":"string","iscsi_chap_secret_not_ends_with":"string","iscsi_chap_secret_not_in":["string"],"iscsi_chap_secret_not_starts_with":"string","iscsi_chap_secret_starts_with":"string","iscsi_ip":"string","iscsi_ip_contains":"string","iscsi_ip_ends_with":"string","iscsi_ip_gt":"string","iscsi_ip_gte":"string","iscsi_ip_in":["string"],"iscsi_ip_lt":"string","iscsi_ip_lte":"string","iscsi_ip_not":"string","iscsi_ip_not_contains":"string","iscsi_ip_not_ends_with":"string","iscsi_ip_not_in":["string"],"iscsi_ip_not_starts_with":"string","iscsi_ip_starts_with":"string","iscsi_lun_id":"string","iscsi_lun_id_contains":"string","iscsi_lun_id_ends_with":"string","iscsi_lun_id_gt":"string","iscsi_lun_id_gte":"string","iscsi_lun_id_in":["string"],"iscsi_lun_id_lt":"string","iscsi_lun_id_lte":"string","iscsi_lun_id_not":"string","iscsi_lun_id_not_contains":"string","iscsi_lun_id_not_ends_with":"string","iscsi_lun_id_not_in":["string"],"iscsi_lun_id_not_starts_with":"string","iscsi_lun_id_starts_with":"string","iscsi_port":0,"iscsi_port_gt":0,"iscsi_port_gte":0,"iscsi_port_in":[0],"iscsi_port_lt":0,"iscsi_port_lte":0,"iscsi_port_not":0,"iscsi_port_not_in":[0],"iscsi_target_iqn":"string","iscsi_target_iqn_contains":"string","iscsi_target_iqn_ends_with":"string","iscsi_target_iqn_gt":"string","iscsi_target_iqn_gte":"string","iscsi_target_iqn_in":["string"],"iscsi_target_iqn_lt":"string","iscsi_target_iqn_lte":"string","iscsi_target_iqn_not":"string","iscsi_target_iqn_not_contains":"string","iscsi_target_iqn_not_ends_with":"string","iscsi_target_iqn_not_in":["string"],"iscsi_target_iqn_not_starts_with":"string","iscsi_target_iqn_starts_with":"string","name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","nfs_path":"string","nfs_path_contains":"string","nfs_path_ends_with":"string","nfs_path_gt":"string","nfs_path_gte":"string","nfs_path_in":["string"],"nfs_path_lt":"string","nfs_path_lte":"string","nfs_path_not":"string","nfs_path_not_contains":"string","nfs_path_not_ends_with":"string","nfs_path_not_in":["string"],"nfs_path_not_starts_with":"string","nfs_path_starts_with":"string","nfs_server":"string","nfs_server_contains":"string","nfs_server_ends_with":"string","nfs_server_gt":"string","nfs_server_gte":"string","nfs_server_in":["string"],"nfs_server_lt":"string","nfs_server_lte":"string","nfs_server_not":"string","nfs_server_not_contains":"string","nfs_server_not_ends_with":"string","nfs_server_not_in":["string"],"nfs_server_not_starts_with":"string","nfs_server_starts_with":"string","resource_version_gt":0,"resource_version_gte":0,"resource_version_in":[0],"resource_version_lt":0,"resource_version_lte":0,"resource_version_not":0,"resource_version_not_in":[0],"status":"CONNECTED","status_in":["CONNECTED"],"status_not":"CONNECTED","status_not_in":["CONNECTED"],"total_capacity":0,"total_capacity_gt":0,"total_capacity_gte":0,"total_capacity_in":[0],"total_capacity_lt":0,"total_capacity_lte":0,"total_capacity_not":0,"total_capacity_not_in":[0],"type":"ISCSI","type_in":["ISCSI"],"type_not":"ISCSI","type_not_in":["ISCSI"],"used_data_space":0,"used_data_space_gt":0,"used_data_space_gte":0,"used_data_space_in":[0],"used_data_space_lt":0,"used_data_space_lte":0,"used_data_space_not":0,"used_data_space_not_in":[0],"valid_data_space":0,"valid_data_space_gt":0,"valid_data_space_gte":0,"valid_data_space_in":[0],"valid_data_space_lt":0,"valid_data_space_lte":0,"valid_data_space_not":0,"valid_data_space_not_in":[0]}
//
// swagger:model BackupStoreRepositoryWhereInput
type BackupStoreRepositoryWhereInput struct {

	// a n d
	AND []*BackupStoreRepositoryWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BackupStoreRepositoryWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BackupStoreRepositoryWhereInput `json:"OR,omitempty"`

	// backup plans every
	BackupPlansEvery struct {
		BackupPlanWhereInput
	} `json:"backup_plans_every,omitempty"`

	// backup plans none
	BackupPlansNone struct {
		BackupPlanWhereInput
	} `json:"backup_plans_none,omitempty"`

	// backup plans some
	BackupPlansSome struct {
		BackupPlanWhereInput
	} `json:"backup_plans_some,omitempty"`

	// backup restore points every
	BackupRestorePointsEvery struct {
		BackupRestorePointWhereInput
	} `json:"backup_restore_points_every,omitempty"`

	// backup restore points none
	BackupRestorePointsNone struct {
		BackupRestorePointWhereInput
	} `json:"backup_restore_points_none,omitempty"`

	// backup restore points some
	BackupRestorePointsSome struct {
		BackupRestorePointWhereInput
	} `json:"backup_restore_points_some,omitempty"`

	// backup service
	BackupService struct {
		BackupServiceWhereInput
	} `json:"backup_service,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// iscsi chap name
	IscsiChapName *string `json:"iscsi_chap_name,omitempty"`

	// iscsi chap name contains
	IscsiChapNameContains *string `json:"iscsi_chap_name_contains,omitempty"`

	// iscsi chap name ends with
	IscsiChapNameEndsWith *string `json:"iscsi_chap_name_ends_with,omitempty"`

	// iscsi chap name gt
	IscsiChapNameGt *string `json:"iscsi_chap_name_gt,omitempty"`

	// iscsi chap name gte
	IscsiChapNameGte *string `json:"iscsi_chap_name_gte,omitempty"`

	// iscsi chap name in
	IscsiChapNameIn []string `json:"iscsi_chap_name_in,omitempty"`

	// iscsi chap name lt
	IscsiChapNameLt *string `json:"iscsi_chap_name_lt,omitempty"`

	// iscsi chap name lte
	IscsiChapNameLte *string `json:"iscsi_chap_name_lte,omitempty"`

	// iscsi chap name not
	IscsiChapNameNot *string `json:"iscsi_chap_name_not,omitempty"`

	// iscsi chap name not contains
	IscsiChapNameNotContains *string `json:"iscsi_chap_name_not_contains,omitempty"`

	// iscsi chap name not ends with
	IscsiChapNameNotEndsWith *string `json:"iscsi_chap_name_not_ends_with,omitempty"`

	// iscsi chap name not in
	IscsiChapNameNotIn []string `json:"iscsi_chap_name_not_in,omitempty"`

	// iscsi chap name not starts with
	IscsiChapNameNotStartsWith *string `json:"iscsi_chap_name_not_starts_with,omitempty"`

	// iscsi chap name starts with
	IscsiChapNameStartsWith *string `json:"iscsi_chap_name_starts_with,omitempty"`

	// iscsi chap secret
	IscsiChapSecret *string `json:"iscsi_chap_secret,omitempty"`

	// iscsi chap secret contains
	IscsiChapSecretContains *string `json:"iscsi_chap_secret_contains,omitempty"`

	// iscsi chap secret ends with
	IscsiChapSecretEndsWith *string `json:"iscsi_chap_secret_ends_with,omitempty"`

	// iscsi chap secret gt
	IscsiChapSecretGt *string `json:"iscsi_chap_secret_gt,omitempty"`

	// iscsi chap secret gte
	IscsiChapSecretGte *string `json:"iscsi_chap_secret_gte,omitempty"`

	// iscsi chap secret in
	IscsiChapSecretIn []string `json:"iscsi_chap_secret_in,omitempty"`

	// iscsi chap secret lt
	IscsiChapSecretLt *string `json:"iscsi_chap_secret_lt,omitempty"`

	// iscsi chap secret lte
	IscsiChapSecretLte *string `json:"iscsi_chap_secret_lte,omitempty"`

	// iscsi chap secret not
	IscsiChapSecretNot *string `json:"iscsi_chap_secret_not,omitempty"`

	// iscsi chap secret not contains
	IscsiChapSecretNotContains *string `json:"iscsi_chap_secret_not_contains,omitempty"`

	// iscsi chap secret not ends with
	IscsiChapSecretNotEndsWith *string `json:"iscsi_chap_secret_not_ends_with,omitempty"`

	// iscsi chap secret not in
	IscsiChapSecretNotIn []string `json:"iscsi_chap_secret_not_in,omitempty"`

	// iscsi chap secret not starts with
	IscsiChapSecretNotStartsWith *string `json:"iscsi_chap_secret_not_starts_with,omitempty"`

	// iscsi chap secret starts with
	IscsiChapSecretStartsWith *string `json:"iscsi_chap_secret_starts_with,omitempty"`

	// iscsi ip
	IscsiIP *string `json:"iscsi_ip,omitempty"`

	// iscsi ip contains
	IscsiIPContains *string `json:"iscsi_ip_contains,omitempty"`

	// iscsi ip ends with
	IscsiIPEndsWith *string `json:"iscsi_ip_ends_with,omitempty"`

	// iscsi ip gt
	IscsiIPGt *string `json:"iscsi_ip_gt,omitempty"`

	// iscsi ip gte
	IscsiIPGte *string `json:"iscsi_ip_gte,omitempty"`

	// iscsi ip in
	IscsiIPIn []string `json:"iscsi_ip_in,omitempty"`

	// iscsi ip lt
	IscsiIPLt *string `json:"iscsi_ip_lt,omitempty"`

	// iscsi ip lte
	IscsiIPLte *string `json:"iscsi_ip_lte,omitempty"`

	// iscsi ip not
	IscsiIPNot *string `json:"iscsi_ip_not,omitempty"`

	// iscsi ip not contains
	IscsiIPNotContains *string `json:"iscsi_ip_not_contains,omitempty"`

	// iscsi ip not ends with
	IscsiIPNotEndsWith *string `json:"iscsi_ip_not_ends_with,omitempty"`

	// iscsi ip not in
	IscsiIPNotIn []string `json:"iscsi_ip_not_in,omitempty"`

	// iscsi ip not starts with
	IscsiIPNotStartsWith *string `json:"iscsi_ip_not_starts_with,omitempty"`

	// iscsi ip starts with
	IscsiIPStartsWith *string `json:"iscsi_ip_starts_with,omitempty"`

	// iscsi lun id
	IscsiLunID *string `json:"iscsi_lun_id,omitempty"`

	// iscsi lun id contains
	IscsiLunIDContains *string `json:"iscsi_lun_id_contains,omitempty"`

	// iscsi lun id ends with
	IscsiLunIDEndsWith *string `json:"iscsi_lun_id_ends_with,omitempty"`

	// iscsi lun id gt
	IscsiLunIDGt *string `json:"iscsi_lun_id_gt,omitempty"`

	// iscsi lun id gte
	IscsiLunIDGte *string `json:"iscsi_lun_id_gte,omitempty"`

	// iscsi lun id in
	IscsiLunIDIn []string `json:"iscsi_lun_id_in,omitempty"`

	// iscsi lun id lt
	IscsiLunIDLt *string `json:"iscsi_lun_id_lt,omitempty"`

	// iscsi lun id lte
	IscsiLunIDLte *string `json:"iscsi_lun_id_lte,omitempty"`

	// iscsi lun id not
	IscsiLunIDNot *string `json:"iscsi_lun_id_not,omitempty"`

	// iscsi lun id not contains
	IscsiLunIDNotContains *string `json:"iscsi_lun_id_not_contains,omitempty"`

	// iscsi lun id not ends with
	IscsiLunIDNotEndsWith *string `json:"iscsi_lun_id_not_ends_with,omitempty"`

	// iscsi lun id not in
	IscsiLunIDNotIn []string `json:"iscsi_lun_id_not_in,omitempty"`

	// iscsi lun id not starts with
	IscsiLunIDNotStartsWith *string `json:"iscsi_lun_id_not_starts_with,omitempty"`

	// iscsi lun id starts with
	IscsiLunIDStartsWith *string `json:"iscsi_lun_id_starts_with,omitempty"`

	// iscsi port
	IscsiPort *int32 `json:"iscsi_port,omitempty"`

	// iscsi port gt
	IscsiPortGt *int32 `json:"iscsi_port_gt,omitempty"`

	// iscsi port gte
	IscsiPortGte *int32 `json:"iscsi_port_gte,omitempty"`

	// iscsi port in
	IscsiPortIn []int32 `json:"iscsi_port_in,omitempty"`

	// iscsi port lt
	IscsiPortLt *int32 `json:"iscsi_port_lt,omitempty"`

	// iscsi port lte
	IscsiPortLte *int32 `json:"iscsi_port_lte,omitempty"`

	// iscsi port not
	IscsiPortNot *int32 `json:"iscsi_port_not,omitempty"`

	// iscsi port not in
	IscsiPortNotIn []int32 `json:"iscsi_port_not_in,omitempty"`

	// iscsi target iqn
	IscsiTargetIqn *string `json:"iscsi_target_iqn,omitempty"`

	// iscsi target iqn contains
	IscsiTargetIqnContains *string `json:"iscsi_target_iqn_contains,omitempty"`

	// iscsi target iqn ends with
	IscsiTargetIqnEndsWith *string `json:"iscsi_target_iqn_ends_with,omitempty"`

	// iscsi target iqn gt
	IscsiTargetIqnGt *string `json:"iscsi_target_iqn_gt,omitempty"`

	// iscsi target iqn gte
	IscsiTargetIqnGte *string `json:"iscsi_target_iqn_gte,omitempty"`

	// iscsi target iqn in
	IscsiTargetIqnIn []string `json:"iscsi_target_iqn_in,omitempty"`

	// iscsi target iqn lt
	IscsiTargetIqnLt *string `json:"iscsi_target_iqn_lt,omitempty"`

	// iscsi target iqn lte
	IscsiTargetIqnLte *string `json:"iscsi_target_iqn_lte,omitempty"`

	// iscsi target iqn not
	IscsiTargetIqnNot *string `json:"iscsi_target_iqn_not,omitempty"`

	// iscsi target iqn not contains
	IscsiTargetIqnNotContains *string `json:"iscsi_target_iqn_not_contains,omitempty"`

	// iscsi target iqn not ends with
	IscsiTargetIqnNotEndsWith *string `json:"iscsi_target_iqn_not_ends_with,omitempty"`

	// iscsi target iqn not in
	IscsiTargetIqnNotIn []string `json:"iscsi_target_iqn_not_in,omitempty"`

	// iscsi target iqn not starts with
	IscsiTargetIqnNotStartsWith *string `json:"iscsi_target_iqn_not_starts_with,omitempty"`

	// iscsi target iqn starts with
	IscsiTargetIqnStartsWith *string `json:"iscsi_target_iqn_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// nfs path
	NfsPath *string `json:"nfs_path,omitempty"`

	// nfs path contains
	NfsPathContains *string `json:"nfs_path_contains,omitempty"`

	// nfs path ends with
	NfsPathEndsWith *string `json:"nfs_path_ends_with,omitempty"`

	// nfs path gt
	NfsPathGt *string `json:"nfs_path_gt,omitempty"`

	// nfs path gte
	NfsPathGte *string `json:"nfs_path_gte,omitempty"`

	// nfs path in
	NfsPathIn []string `json:"nfs_path_in,omitempty"`

	// nfs path lt
	NfsPathLt *string `json:"nfs_path_lt,omitempty"`

	// nfs path lte
	NfsPathLte *string `json:"nfs_path_lte,omitempty"`

	// nfs path not
	NfsPathNot *string `json:"nfs_path_not,omitempty"`

	// nfs path not contains
	NfsPathNotContains *string `json:"nfs_path_not_contains,omitempty"`

	// nfs path not ends with
	NfsPathNotEndsWith *string `json:"nfs_path_not_ends_with,omitempty"`

	// nfs path not in
	NfsPathNotIn []string `json:"nfs_path_not_in,omitempty"`

	// nfs path not starts with
	NfsPathNotStartsWith *string `json:"nfs_path_not_starts_with,omitempty"`

	// nfs path starts with
	NfsPathStartsWith *string `json:"nfs_path_starts_with,omitempty"`

	// nfs server
	NfsServer *string `json:"nfs_server,omitempty"`

	// nfs server contains
	NfsServerContains *string `json:"nfs_server_contains,omitempty"`

	// nfs server ends with
	NfsServerEndsWith *string `json:"nfs_server_ends_with,omitempty"`

	// nfs server gt
	NfsServerGt *string `json:"nfs_server_gt,omitempty"`

	// nfs server gte
	NfsServerGte *string `json:"nfs_server_gte,omitempty"`

	// nfs server in
	NfsServerIn []string `json:"nfs_server_in,omitempty"`

	// nfs server lt
	NfsServerLt *string `json:"nfs_server_lt,omitempty"`

	// nfs server lte
	NfsServerLte *string `json:"nfs_server_lte,omitempty"`

	// nfs server not
	NfsServerNot *string `json:"nfs_server_not,omitempty"`

	// nfs server not contains
	NfsServerNotContains *string `json:"nfs_server_not_contains,omitempty"`

	// nfs server not ends with
	NfsServerNotEndsWith *string `json:"nfs_server_not_ends_with,omitempty"`

	// nfs server not in
	NfsServerNotIn []string `json:"nfs_server_not_in,omitempty"`

	// nfs server not starts with
	NfsServerNotStartsWith *string `json:"nfs_server_not_starts_with,omitempty"`

	// nfs server starts with
	NfsServerStartsWith *string `json:"nfs_server_starts_with,omitempty"`

	// resource version gt
	ResourceVersionGt *int32 `json:"resource_version_gt,omitempty"`

	// resource version gte
	ResourceVersionGte *int32 `json:"resource_version_gte,omitempty"`

	// resource version in
	ResourceVersionIn []int32 `json:"resource_version_in,omitempty"`

	// resource version lt
	ResourceVersionLt *int32 `json:"resource_version_lt,omitempty"`

	// resource version lte
	ResourceVersionLte *int32 `json:"resource_version_lte,omitempty"`

	// resource version not
	ResourceVersionNot *int32 `json:"resource_version_not,omitempty"`

	// resource version not in
	ResourceVersionNotIn []int32 `json:"resource_version_not_in,omitempty"`

	// status
	Status struct {
		BackupStoreStatus
	} `json:"status,omitempty"`

	// status in
	StatusIn []BackupStoreStatus `json:"status_in,omitempty"`

	// status not
	StatusNot struct {
		BackupStoreStatus
	} `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []BackupStoreStatus `json:"status_not_in,omitempty"`

	// total capacity
	TotalCapacity *float64 `json:"total_capacity,omitempty"`

	// total capacity gt
	TotalCapacityGt *float64 `json:"total_capacity_gt,omitempty"`

	// total capacity gte
	TotalCapacityGte *float64 `json:"total_capacity_gte,omitempty"`

	// total capacity in
	TotalCapacityIn []float64 `json:"total_capacity_in,omitempty"`

	// total capacity lt
	TotalCapacityLt *float64 `json:"total_capacity_lt,omitempty"`

	// total capacity lte
	TotalCapacityLte *float64 `json:"total_capacity_lte,omitempty"`

	// total capacity not
	TotalCapacityNot *float64 `json:"total_capacity_not,omitempty"`

	// total capacity not in
	TotalCapacityNotIn []float64 `json:"total_capacity_not_in,omitempty"`

	// type
	Type struct {
		BackupStoreType
	} `json:"type,omitempty"`

	// type in
	TypeIn []BackupStoreType `json:"type_in,omitempty"`

	// type not
	TypeNot struct {
		BackupStoreType
	} `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []BackupStoreType `json:"type_not_in,omitempty"`

	// used data space
	UsedDataSpace *float64 `json:"used_data_space,omitempty"`

	// used data space gt
	UsedDataSpaceGt *float64 `json:"used_data_space_gt,omitempty"`

	// used data space gte
	UsedDataSpaceGte *float64 `json:"used_data_space_gte,omitempty"`

	// used data space in
	UsedDataSpaceIn []float64 `json:"used_data_space_in,omitempty"`

	// used data space lt
	UsedDataSpaceLt *float64 `json:"used_data_space_lt,omitempty"`

	// used data space lte
	UsedDataSpaceLte *float64 `json:"used_data_space_lte,omitempty"`

	// used data space not
	UsedDataSpaceNot *float64 `json:"used_data_space_not,omitempty"`

	// used data space not in
	UsedDataSpaceNotIn []float64 `json:"used_data_space_not_in,omitempty"`

	// valid data space
	ValidDataSpace *float64 `json:"valid_data_space,omitempty"`

	// valid data space gt
	ValidDataSpaceGt *float64 `json:"valid_data_space_gt,omitempty"`

	// valid data space gte
	ValidDataSpaceGte *float64 `json:"valid_data_space_gte,omitempty"`

	// valid data space in
	ValidDataSpaceIn []float64 `json:"valid_data_space_in,omitempty"`

	// valid data space lt
	ValidDataSpaceLt *float64 `json:"valid_data_space_lt,omitempty"`

	// valid data space lte
	ValidDataSpaceLte *float64 `json:"valid_data_space_lte,omitempty"`

	// valid data space not
	ValidDataSpaceNot *float64 `json:"valid_data_space_not,omitempty"`

	// valid data space not in
	ValidDataSpaceNotIn []float64 `json:"valid_data_space_not_in,omitempty"`
}

// Validate validates this backup store repository where input
func (m *BackupStoreRepositoryWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlansEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlansNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupPlansSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRestorePointsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupPlansEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlansEvery) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupPlansNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlansNone) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupPlansSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupPlansSome) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupRestorePointsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsEvery) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupRestorePointsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsNone) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupRestorePointsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupRestorePointsSome) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateBackupService(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupService) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this backup store repository where input based on the context it is used
func (m *BackupStoreRepositoryWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlansEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlansNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupPlansSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRestorePointsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupPlansEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupPlansNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupPlansSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupRestorePointsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupRestorePointsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupRestorePointsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateBackupService(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *BackupStoreRepositoryWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStoreRepositoryWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStoreRepositoryWhereInput) UnmarshalBinary(b []byte) error {
	var res BackupStoreRepositoryWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
