// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SnapshotPlanStatus snapshot plan status
//
// swagger:model SnapshotPlanStatus
type SnapshotPlanStatus string

func NewSnapshotPlanStatus(value SnapshotPlanStatus) *SnapshotPlanStatus {
	v := value
	return &v
}

const (

	// SnapshotPlanStatusNORMAL captures enum value "NORMAL"
	SnapshotPlanStatusNORMAL SnapshotPlanStatus = "NORMAL"

	// SnapshotPlanStatusSTOPPED captures enum value "STOPPED"
	SnapshotPlanStatusSTOPPED SnapshotPlanStatus = "STOPPED"

	// SnapshotPlanStatusSUSPENDED captures enum value "SUSPENDED"
	SnapshotPlanStatusSUSPENDED SnapshotPlanStatus = "SUSPENDED"
)

// for schema
var snapshotPlanStatusEnum []interface{}

func init() {
	var res []SnapshotPlanStatus
	if err := json.Unmarshal([]byte(`["NORMAL","STOPPED","SUSPENDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotPlanStatusEnum = append(snapshotPlanStatusEnum, v)
	}
}

func (m SnapshotPlanStatus) validateSnapshotPlanStatusEnum(path, location string, value SnapshotPlanStatus) error {
	if err := validate.EnumCase(path, location, value, snapshotPlanStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this snapshot plan status
func (m SnapshotPlanStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSnapshotPlanStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this snapshot plan status based on context it is used
func (m SnapshotPlanStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
