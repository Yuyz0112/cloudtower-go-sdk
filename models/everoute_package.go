// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EveroutePackage everoute package
//
// swagger:model EveroutePackage
type EveroutePackage struct {

	// arch
	// Required: true
	Arch *Architecture `json:"arch"`

	// description
	// Required: true
	Description *string `json:"description"`

	// entity async status
	EntityAsyncStatus struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// local created at
	// Required: true
	LocalCreatedAt *string `json:"local_created_at"`

	// name
	// Required: true
	Name *string `json:"name"`

	// package info
	// Required: true
	PackageInfo interface{} `json:"package_info"`

	// size
	// Required: true
	Size *float64 `json:"size"`

	// upload task
	UploadTask struct {
		NestedUploadTask
	} `json:"upload_task,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this everoute package
func (m *EveroutePackage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EveroutePackage) validateArch(formats strfmt.Registry) error {

	if err := validate.Required("arch", "body", m.Arch); err != nil {
		return err
	}

	if err := validate.Required("arch", "body", m.Arch); err != nil {
		return err
	}

	if m.Arch != nil {
		if err := m.Arch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arch")
			}
			return err
		}
	}

	return nil
}

func (m *EveroutePackage) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *EveroutePackage) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	return nil
}

func (m *EveroutePackage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EveroutePackage) validateLocalCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("local_created_at", "body", m.LocalCreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *EveroutePackage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EveroutePackage) validatePackageInfo(formats strfmt.Registry) error {

	if m.PackageInfo == nil {
		return errors.Required("package_info", "body", nil)
	}

	return nil
}

func (m *EveroutePackage) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *EveroutePackage) validateUploadTask(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadTask) { // not required
		return nil
	}

	return nil
}

func (m *EveroutePackage) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this everoute package based on the context it is used
func (m *EveroutePackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUploadTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EveroutePackage) contextValidateArch(ctx context.Context, formats strfmt.Registry) error {

	if m.Arch != nil {
		if err := m.Arch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arch")
			}
			return err
		}
	}

	return nil
}

func (m *EveroutePackage) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *EveroutePackage) contextValidateUploadTask(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *EveroutePackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EveroutePackage) UnmarshalBinary(b []byte) error {
	var res EveroutePackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
