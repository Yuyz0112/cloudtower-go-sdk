// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ProtectSnapshotStatus protect snapshot status
//
// swagger:model ProtectSnapshotStatus
type ProtectSnapshotStatus string

func NewProtectSnapshotStatus(value ProtectSnapshotStatus) *ProtectSnapshotStatus {
	v := value
	return &v
}

const (

	// ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSCREATED captures enum value "PROTECT_SNAPSHOT_STATUS_CREATED"
	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSCREATED ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_CREATED"

	// ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSCREATING captures enum value "PROTECT_SNAPSHOT_STATUS_CREATING"
	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSCREATING ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_CREATING"

	// ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSDELETED captures enum value "PROTECT_SNAPSHOT_STATUS_DELETED"
	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSDELETED ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_DELETED"

	// ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSFAILED captures enum value "PROTECT_SNAPSHOT_STATUS_FAILED"
	ProtectSnapshotStatusPROTECTSNAPSHOTSTATUSFAILED ProtectSnapshotStatus = "PROTECT_SNAPSHOT_STATUS_FAILED"
)

// for schema
var protectSnapshotStatusEnum []interface{}

func init() {
	var res []ProtectSnapshotStatus
	if err := json.Unmarshal([]byte(`["PROTECT_SNAPSHOT_STATUS_CREATED","PROTECT_SNAPSHOT_STATUS_CREATING","PROTECT_SNAPSHOT_STATUS_DELETED","PROTECT_SNAPSHOT_STATUS_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectSnapshotStatusEnum = append(protectSnapshotStatusEnum, v)
	}
}

func (m ProtectSnapshotStatus) validateProtectSnapshotStatusEnum(path, location string, value ProtectSnapshotStatus) error {
	if err := validate.EnumCase(path, location, value, protectSnapshotStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this protect snapshot status
func (m ProtectSnapshotStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateProtectSnapshotStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this protect snapshot status based on context it is used
func (m ProtectSnapshotStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
