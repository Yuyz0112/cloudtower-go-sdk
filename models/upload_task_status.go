// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UploadTaskStatus upload task status
//
// swagger:model UploadTaskStatus
type UploadTaskStatus string

func NewUploadTaskStatus(value UploadTaskStatus) *UploadTaskStatus {
	v := value
	return &v
}

const (

	// UploadTaskStatusFAILED captures enum value "FAILED"
	UploadTaskStatusFAILED UploadTaskStatus = "FAILED"

	// UploadTaskStatusINITIALIZING captures enum value "INITIALIZING"
	UploadTaskStatusINITIALIZING UploadTaskStatus = "INITIALIZING"

	// UploadTaskStatusPAUSED captures enum value "PAUSED"
	UploadTaskStatusPAUSED UploadTaskStatus = "PAUSED"

	// UploadTaskStatusSUCCESSED captures enum value "SUCCESSED"
	UploadTaskStatusSUCCESSED UploadTaskStatus = "SUCCESSED"

	// UploadTaskStatusUPLOADING captures enum value "UPLOADING"
	UploadTaskStatusUPLOADING UploadTaskStatus = "UPLOADING"
)

// for schema
var uploadTaskStatusEnum []interface{}

func init() {
	var res []UploadTaskStatus
	if err := json.Unmarshal([]byte(`["FAILED","INITIALIZING","PAUSED","SUCCESSED","UPLOADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		uploadTaskStatusEnum = append(uploadTaskStatusEnum, v)
	}
}

func (m UploadTaskStatus) validateUploadTaskStatusEnum(path, location string, value UploadTaskStatus) error {
	if err := validate.EnumCase(path, location, value, uploadTaskStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this upload task status
func (m UploadTaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUploadTaskStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this upload task status based on context it is used
func (m UploadTaskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
