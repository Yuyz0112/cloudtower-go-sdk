// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ElfDataStoreType elf data store type
//
// swagger:model ElfDataStoreType
type ElfDataStoreType string

func NewElfDataStoreType(value ElfDataStoreType) *ElfDataStoreType {
	v := value
	return &v
}

const (

	// ElfDataStoreTypeISCSI captures enum value "ISCSI"
	ElfDataStoreTypeISCSI ElfDataStoreType = "ISCSI"

	// ElfDataStoreTypeNFS captures enum value "NFS"
	ElfDataStoreTypeNFS ElfDataStoreType = "NFS"

	// ElfDataStoreTypeNVMe captures enum value "NVMe"
	ElfDataStoreTypeNVMe ElfDataStoreType = "NVMe"
)

// for schema
var elfDataStoreTypeEnum []interface{}

func init() {
	var res []ElfDataStoreType
	if err := json.Unmarshal([]byte(`["ISCSI","NFS","NVMe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		elfDataStoreTypeEnum = append(elfDataStoreTypeEnum, v)
	}
}

func (m ElfDataStoreType) validateElfDataStoreTypeEnum(path, location string, value ElfDataStoreType) error {
	if err := validate.EnumCase(path, location, value, elfDataStoreTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this elf data store type
func (m ElfDataStoreType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateElfDataStoreTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this elf data store type based on context it is used
func (m ElfDataStoreType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
