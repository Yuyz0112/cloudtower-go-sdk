// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeTopoUpdationParams node topo updation params
//
// swagger:model NodeTopoUpdationParams
type NodeTopoUpdationParams []*NodeTopoUpdationParamsItems0

// Validate validates this node topo updation params
func (m NodeTopoUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this node topo updation params based on the context it is used
func (m NodeTopoUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// NodeTopoUpdationParamsItems0 node topo updation params items0
//
// swagger:model NodeTopoUpdationParamsItems0
type NodeTopoUpdationParamsItems0 struct {

	// data
	// Required: true
	Data *NodeTopoUpdationParamsItems0Data `json:"data"`

	// where
	// Required: true
	Where *NodeTopoWhereUniqueInput `json:"where"`
}

// Validate validates this node topo updation params items0
func (m *NodeTopoUpdationParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeTopoUpdationParamsItems0) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *NodeTopoUpdationParamsItems0) validateWhere(formats strfmt.Registry) error {

	if err := validate.Required("where", "body", m.Where); err != nil {
		return err
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node topo updation params items0 based on the context it is used
func (m *NodeTopoUpdationParamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeTopoUpdationParamsItems0) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (m *NodeTopoUpdationParamsItems0) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeTopoUpdationParamsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeTopoUpdationParamsItems0) UnmarshalBinary(b []byte) error {
	var res NodeTopoUpdationParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NodeTopoUpdationParamsItems0Data node topo updation params items0 data
//
// swagger:model NodeTopoUpdationParamsItems0Data
type NodeTopoUpdationParamsItems0Data struct {

	// brick topo id
	// Required: true
	BrickTopoID *string `json:"brick_topo_id"`

	// position
	// Required: true
	Position *Position `json:"position"`
}

// Validate validates this node topo updation params items0 data
func (m *NodeTopoUpdationParamsItems0Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrickTopoID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeTopoUpdationParamsItems0Data) validateBrickTopoID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"brick_topo_id", "body", m.BrickTopoID); err != nil {
		return err
	}

	return nil
}

func (m *NodeTopoUpdationParamsItems0Data) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"position", "body", m.Position); err != nil {
		return err
	}

	if m.Position != nil {
		if err := m.Position.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "position")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node topo updation params items0 data based on the context it is used
func (m *NodeTopoUpdationParamsItems0Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePosition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeTopoUpdationParamsItems0Data) contextValidatePosition(ctx context.Context, formats strfmt.Registry) error {

	if m.Position != nil {
		if err := m.Position.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "position")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeTopoUpdationParamsItems0Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeTopoUpdationParamsItems0Data) UnmarshalBinary(b []byte) error {
	var res NodeTopoUpdationParamsItems0Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
