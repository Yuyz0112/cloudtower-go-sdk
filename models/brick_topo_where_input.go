// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BrickTopoWhereInput brick topo where input
//
// swagger:model BrickTopoWhereInput
type BrickTopoWhereInput struct {

	// a n d
	AND []*BrickTopoWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BrickTopoWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BrickTopoWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster interface{} `json:"cluster,omitempty"`

	// cluster topo
	ClusterTopo interface{} `json:"cluster_topo,omitempty"`

	// height
	Height *float64 `json:"height,omitempty"`

	// height gt
	HeightGt *float64 `json:"height_gt,omitempty"`

	// height gte
	HeightGte *float64 `json:"height_gte,omitempty"`

	// height in
	HeightIn []float64 `json:"height_in,omitempty"`

	// height lt
	HeightLt *float64 `json:"height_lt,omitempty"`

	// height lte
	HeightLte *float64 `json:"height_lte,omitempty"`

	// height not
	HeightNot *float64 `json:"height_not,omitempty"`

	// height not in
	HeightNotIn []float64 `json:"height_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// model contains
	ModelContains *string `json:"model_contains,omitempty"`

	// model ends with
	ModelEndsWith *string `json:"model_ends_with,omitempty"`

	// model gt
	ModelGt *string `json:"model_gt,omitempty"`

	// model gte
	ModelGte *string `json:"model_gte,omitempty"`

	// model in
	ModelIn []string `json:"model_in,omitempty"`

	// model lt
	ModelLt *string `json:"model_lt,omitempty"`

	// model lte
	ModelLte *string `json:"model_lte,omitempty"`

	// model not
	ModelNot *string `json:"model_not,omitempty"`

	// model not contains
	ModelNotContains *string `json:"model_not_contains,omitempty"`

	// model not ends with
	ModelNotEndsWith *string `json:"model_not_ends_with,omitempty"`

	// model not in
	ModelNotIn []string `json:"model_not_in,omitempty"`

	// model not starts with
	ModelNotStartsWith *string `json:"model_not_starts_with,omitempty"`

	// model starts with
	ModelStartsWith *string `json:"model_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// node topoes every
	NodeTopoesEvery interface{} `json:"node_topoes_every,omitempty"`

	// node topoes none
	NodeTopoesNone interface{} `json:"node_topoes_none,omitempty"`

	// node topoes some
	NodeTopoesSome interface{} `json:"node_topoes_some,omitempty"`

	// position
	Position *float64 `json:"position,omitempty"`

	// position gt
	PositionGt *float64 `json:"position_gt,omitempty"`

	// position gte
	PositionGte *float64 `json:"position_gte,omitempty"`

	// position in
	PositionIn []float64 `json:"position_in,omitempty"`

	// position lt
	PositionLt *float64 `json:"position_lt,omitempty"`

	// position lte
	PositionLte *float64 `json:"position_lte,omitempty"`

	// position not
	PositionNot *float64 `json:"position_not,omitempty"`

	// position not in
	PositionNotIn []float64 `json:"position_not_in,omitempty"`

	// power layout
	PowerLayout interface{} `json:"power_layout,omitempty"`

	// power layout in
	PowerLayoutIn []Direction `json:"power_layout_in,omitempty"`

	// power layout not
	PowerLayoutNot interface{} `json:"power_layout_not,omitempty"`

	// power layout not in
	PowerLayoutNotIn []Direction `json:"power_layout_not_in,omitempty"`

	// power position
	PowerPosition interface{} `json:"power_position,omitempty"`

	// power position in
	PowerPositionIn []PowerPosition `json:"power_position_in,omitempty"`

	// power position not
	PowerPositionNot interface{} `json:"power_position_not,omitempty"`

	// power position not in
	PowerPositionNotIn []PowerPosition `json:"power_position_not_in,omitempty"`

	// rack topo
	RackTopo interface{} `json:"rack_topo,omitempty"`
}

// Validate validates this brick topo where input
func (m *BrickTopoWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerLayoutIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerLayoutNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerPositionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerPositionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerLayoutIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerLayoutIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerLayoutIn); i++ {

		if err := m.PowerLayoutIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerLayoutNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerLayoutNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerLayoutNotIn); i++ {

		if err := m.PowerLayoutNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerPositionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerPositionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerPositionIn); i++ {

		if err := m.PowerPositionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) validatePowerPositionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerPositionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PowerPositionNotIn); i++ {

		if err := m.PowerPositionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this brick topo where input based on the context it is used
func (m *BrickTopoWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerLayoutIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerLayoutNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerPositionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowerPositionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerLayoutIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerLayoutIn); i++ {

		if err := m.PowerLayoutIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerLayoutNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerLayoutNotIn); i++ {

		if err := m.PowerLayoutNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_layout_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerPositionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerPositionIn); i++ {

		if err := m.PowerPositionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BrickTopoWhereInput) contextValidatePowerPositionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PowerPositionNotIn); i++ {

		if err := m.PowerPositionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("power_position_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoWhereInput) UnmarshalBinary(b []byte) error {
	var res BrickTopoWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
