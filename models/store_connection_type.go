// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StoreConnectionType store connection type
//
// swagger:model StoreConnectionType
type StoreConnectionType string

func NewStoreConnectionType(value StoreConnectionType) *StoreConnectionType {
	v := value
	return &v
}

const (

	// StoreConnectionTypeISCSI captures enum value "ISCSI"
	StoreConnectionTypeISCSI StoreConnectionType = "ISCSI"

	// StoreConnectionTypeNVMe captures enum value "NVMe"
	StoreConnectionTypeNVMe StoreConnectionType = "NVMe"
)

// for schema
var storeConnectionTypeEnum []interface{}

func init() {
	var res []StoreConnectionType
	if err := json.Unmarshal([]byte(`["ISCSI","NVMe"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storeConnectionTypeEnum = append(storeConnectionTypeEnum, v)
	}
}

func (m StoreConnectionType) validateStoreConnectionTypeEnum(path, location string, value StoreConnectionType) error {
	if err := validate.EnumCase(path, location, value, storeConnectionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this store connection type
func (m StoreConnectionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStoreConnectionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this store connection type based on context it is used
func (m StoreConnectionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
