// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HostStatus host status
//
// swagger:model HostStatus
type HostStatus string

func NewHostStatus(value HostStatus) *HostStatus {
	v := value
	return &v
}

const (

	// HostStatusCONNECTEDERROR captures enum value "CONNECTED_ERROR"
	HostStatusCONNECTEDERROR HostStatus = "CONNECTED_ERROR"

	// HostStatusCONNECTEDHEALTHY captures enum value "CONNECTED_HEALTHY"
	HostStatusCONNECTEDHEALTHY HostStatus = "CONNECTED_HEALTHY"

	// HostStatusCONNECTEDWARNING captures enum value "CONNECTED_WARNING"
	HostStatusCONNECTEDWARNING HostStatus = "CONNECTED_WARNING"

	// HostStatusCONNECTING captures enum value "CONNECTING"
	HostStatusCONNECTING HostStatus = "CONNECTING"

	// HostStatusINITIALIZING captures enum value "INITIALIZING"
	HostStatusINITIALIZING HostStatus = "INITIALIZING"

	// HostStatusSESSIONEXPIRED captures enum value "SESSION_EXPIRED"
	HostStatusSESSIONEXPIRED HostStatus = "SESSION_EXPIRED"
)

// for schema
var hostStatusEnum []interface{}

func init() {
	var res []HostStatus
	if err := json.Unmarshal([]byte(`["CONNECTED_ERROR","CONNECTED_HEALTHY","CONNECTED_WARNING","CONNECTING","INITIALIZING","SESSION_EXPIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hostStatusEnum = append(hostStatusEnum, v)
	}
}

func (m HostStatus) validateHostStatusEnum(path, location string, value HostStatus) error {
	if err := validate.EnumCase(path, location, value, hostStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this host status
func (m HostStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHostStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this host status based on context it is used
func (m HostStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
