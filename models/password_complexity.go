// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PasswordComplexity password complexity
//
// swagger:model PasswordComplexity
type PasswordComplexity string

func NewPasswordComplexity(value PasswordComplexity) *PasswordComplexity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PasswordComplexity.
func (m PasswordComplexity) Pointer() *PasswordComplexity {
	return &m
}

const (

	// PasswordComplexityHIGH captures enum value "HIGH"
	PasswordComplexityHIGH PasswordComplexity = "HIGH"

	// PasswordComplexityLOW captures enum value "LOW"
	PasswordComplexityLOW PasswordComplexity = "LOW"

	// PasswordComplexityMIDDLE captures enum value "MIDDLE"
	PasswordComplexityMIDDLE PasswordComplexity = "MIDDLE"
)

// for schema
var passwordComplexityEnum []interface{}

func init() {
	var res []PasswordComplexity
	if err := json.Unmarshal([]byte(`["HIGH","LOW","MIDDLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		passwordComplexityEnum = append(passwordComplexityEnum, v)
	}
}

func (m PasswordComplexity) validatePasswordComplexityEnum(path, location string, value PasswordComplexity) error {
	if err := validate.EnumCase(path, location, value, passwordComplexityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this password complexity
func (m PasswordComplexity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePasswordComplexityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this password complexity based on context it is used
func (m PasswordComplexity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
