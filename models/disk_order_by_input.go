// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiskOrderByInput disk order by input
//
// swagger:model DiskOrderByInput
type DiskOrderByInput string

func NewDiskOrderByInput(value DiskOrderByInput) *DiskOrderByInput {
	v := value
	return &v
}

const (

	// DiskOrderByInputCreatedAtASC captures enum value "createdAt_ASC"
	DiskOrderByInputCreatedAtASC DiskOrderByInput = "createdAt_ASC"

	// DiskOrderByInputCreatedAtDESC captures enum value "createdAt_DESC"
	DiskOrderByInputCreatedAtDESC DiskOrderByInput = "createdAt_DESC"

	// DiskOrderByInputEntityAsyncStatusASC captures enum value "entityAsyncStatus_ASC"
	DiskOrderByInputEntityAsyncStatusASC DiskOrderByInput = "entityAsyncStatus_ASC"

	// DiskOrderByInputEntityAsyncStatusDESC captures enum value "entityAsyncStatus_DESC"
	DiskOrderByInputEntityAsyncStatusDESC DiskOrderByInput = "entityAsyncStatus_DESC"

	// DiskOrderByInputFirmwareASC captures enum value "firmware_ASC"
	DiskOrderByInputFirmwareASC DiskOrderByInput = "firmware_ASC"

	// DiskOrderByInputFirmwareDESC captures enum value "firmware_DESC"
	DiskOrderByInputFirmwareDESC DiskOrderByInput = "firmware_DESC"

	// DiskOrderByInputFunctionASC captures enum value "function_ASC"
	DiskOrderByInputFunctionASC DiskOrderByInput = "function_ASC"

	// DiskOrderByInputFunctionDESC captures enum value "function_DESC"
	DiskOrderByInputFunctionDESC DiskOrderByInput = "function_DESC"

	// DiskOrderByInputHealthStatusASC captures enum value "health_status_ASC"
	DiskOrderByInputHealthStatusASC DiskOrderByInput = "health_status_ASC"

	// DiskOrderByInputHealthStatusDESC captures enum value "health_status_DESC"
	DiskOrderByInputHealthStatusDESC DiskOrderByInput = "health_status_DESC"

	// DiskOrderByInputHealthyASC captures enum value "healthy_ASC"
	DiskOrderByInputHealthyASC DiskOrderByInput = "healthy_ASC"

	// DiskOrderByInputHealthyDESC captures enum value "healthy_DESC"
	DiskOrderByInputHealthyDESC DiskOrderByInput = "healthy_DESC"

	// DiskOrderByInputIDASC captures enum value "id_ASC"
	DiskOrderByInputIDASC DiskOrderByInput = "id_ASC"

	// DiskOrderByInputIDDESC captures enum value "id_DESC"
	DiskOrderByInputIDDESC DiskOrderByInput = "id_DESC"

	// DiskOrderByInputLocalIDASC captures enum value "local_id_ASC"
	DiskOrderByInputLocalIDASC DiskOrderByInput = "local_id_ASC"

	// DiskOrderByInputLocalIDDESC captures enum value "local_id_DESC"
	DiskOrderByInputLocalIDDESC DiskOrderByInput = "local_id_DESC"

	// DiskOrderByInputModelASC captures enum value "model_ASC"
	DiskOrderByInputModelASC DiskOrderByInput = "model_ASC"

	// DiskOrderByInputModelDESC captures enum value "model_DESC"
	DiskOrderByInputModelDESC DiskOrderByInput = "model_DESC"

	// DiskOrderByInputMountedASC captures enum value "mounted_ASC"
	DiskOrderByInputMountedASC DiskOrderByInput = "mounted_ASC"

	// DiskOrderByInputMountedDESC captures enum value "mounted_DESC"
	DiskOrderByInputMountedDESC DiskOrderByInput = "mounted_DESC"

	// DiskOrderByInputNameASC captures enum value "name_ASC"
	DiskOrderByInputNameASC DiskOrderByInput = "name_ASC"

	// DiskOrderByInputNameDESC captures enum value "name_DESC"
	DiskOrderByInputNameDESC DiskOrderByInput = "name_DESC"

	// DiskOrderByInputNumaNodeASC captures enum value "numa_node_ASC"
	DiskOrderByInputNumaNodeASC DiskOrderByInput = "numa_node_ASC"

	// DiskOrderByInputNumaNodeDESC captures enum value "numa_node_DESC"
	DiskOrderByInputNumaNodeDESC DiskOrderByInput = "numa_node_DESC"

	// DiskOrderByInputOfflineASC captures enum value "offline_ASC"
	DiskOrderByInputOfflineASC DiskOrderByInput = "offline_ASC"

	// DiskOrderByInputOfflineDESC captures enum value "offline_DESC"
	DiskOrderByInputOfflineDESC DiskOrderByInput = "offline_DESC"

	// DiskOrderByInputPartitionsASC captures enum value "partitions_ASC"
	DiskOrderByInputPartitionsASC DiskOrderByInput = "partitions_ASC"

	// DiskOrderByInputPartitionsDESC captures enum value "partitions_DESC"
	DiskOrderByInputPartitionsDESC DiskOrderByInput = "partitions_DESC"

	// DiskOrderByInputPathASC captures enum value "path_ASC"
	DiskOrderByInputPathASC DiskOrderByInput = "path_ASC"

	// DiskOrderByInputPathDESC captures enum value "path_DESC"
	DiskOrderByInputPathDESC DiskOrderByInput = "path_DESC"

	// DiskOrderByInputPersistentMemoryTypeASC captures enum value "persistent_memory_type_ASC"
	DiskOrderByInputPersistentMemoryTypeASC DiskOrderByInput = "persistent_memory_type_ASC"

	// DiskOrderByInputPersistentMemoryTypeDESC captures enum value "persistent_memory_type_DESC"
	DiskOrderByInputPersistentMemoryTypeDESC DiskOrderByInput = "persistent_memory_type_DESC"

	// DiskOrderByInputPhysicalSlotOnBrickASC captures enum value "physical_slot_on_brick_ASC"
	DiskOrderByInputPhysicalSlotOnBrickASC DiskOrderByInput = "physical_slot_on_brick_ASC"

	// DiskOrderByInputPhysicalSlotOnBrickDESC captures enum value "physical_slot_on_brick_DESC"
	DiskOrderByInputPhysicalSlotOnBrickDESC DiskOrderByInput = "physical_slot_on_brick_DESC"

	// DiskOrderByInputRecommendedUsageASC captures enum value "recommended_usage_ASC"
	DiskOrderByInputRecommendedUsageASC DiskOrderByInput = "recommended_usage_ASC"

	// DiskOrderByInputRecommendedUsageDESC captures enum value "recommended_usage_DESC"
	DiskOrderByInputRecommendedUsageDESC DiskOrderByInput = "recommended_usage_DESC"

	// DiskOrderByInputRemainingLifePercentASC captures enum value "remaining_life_percent_ASC"
	DiskOrderByInputRemainingLifePercentASC DiskOrderByInput = "remaining_life_percent_ASC"

	// DiskOrderByInputRemainingLifePercentDESC captures enum value "remaining_life_percent_DESC"
	DiskOrderByInputRemainingLifePercentDESC DiskOrderByInput = "remaining_life_percent_DESC"

	// DiskOrderByInputSerialASC captures enum value "serial_ASC"
	DiskOrderByInputSerialASC DiskOrderByInput = "serial_ASC"

	// DiskOrderByInputSerialDESC captures enum value "serial_DESC"
	DiskOrderByInputSerialDESC DiskOrderByInput = "serial_DESC"

	// DiskOrderByInputSizeASC captures enum value "size_ASC"
	DiskOrderByInputSizeASC DiskOrderByInput = "size_ASC"

	// DiskOrderByInputSizeDESC captures enum value "size_DESC"
	DiskOrderByInputSizeDESC DiskOrderByInput = "size_DESC"

	// DiskOrderByInputTypeASC captures enum value "type_ASC"
	DiskOrderByInputTypeASC DiskOrderByInput = "type_ASC"

	// DiskOrderByInputTypeDESC captures enum value "type_DESC"
	DiskOrderByInputTypeDESC DiskOrderByInput = "type_DESC"

	// DiskOrderByInputUpdatedAtASC captures enum value "updatedAt_ASC"
	DiskOrderByInputUpdatedAtASC DiskOrderByInput = "updatedAt_ASC"

	// DiskOrderByInputUpdatedAtDESC captures enum value "updatedAt_DESC"
	DiskOrderByInputUpdatedAtDESC DiskOrderByInput = "updatedAt_DESC"

	// DiskOrderByInputUsageASC captures enum value "usage_ASC"
	DiskOrderByInputUsageASC DiskOrderByInput = "usage_ASC"

	// DiskOrderByInputUsageDESC captures enum value "usage_DESC"
	DiskOrderByInputUsageDESC DiskOrderByInput = "usage_DESC"

	// DiskOrderByInputUsageStatusASC captures enum value "usage_status_ASC"
	DiskOrderByInputUsageStatusASC DiskOrderByInput = "usage_status_ASC"

	// DiskOrderByInputUsageStatusDESC captures enum value "usage_status_DESC"
	DiskOrderByInputUsageStatusDESC DiskOrderByInput = "usage_status_DESC"
)

// for schema
var diskOrderByInputEnum []interface{}

func init() {
	var res []DiskOrderByInput
	if err := json.Unmarshal([]byte(`["createdAt_ASC","createdAt_DESC","entityAsyncStatus_ASC","entityAsyncStatus_DESC","firmware_ASC","firmware_DESC","function_ASC","function_DESC","health_status_ASC","health_status_DESC","healthy_ASC","healthy_DESC","id_ASC","id_DESC","local_id_ASC","local_id_DESC","model_ASC","model_DESC","mounted_ASC","mounted_DESC","name_ASC","name_DESC","numa_node_ASC","numa_node_DESC","offline_ASC","offline_DESC","partitions_ASC","partitions_DESC","path_ASC","path_DESC","persistent_memory_type_ASC","persistent_memory_type_DESC","physical_slot_on_brick_ASC","physical_slot_on_brick_DESC","recommended_usage_ASC","recommended_usage_DESC","remaining_life_percent_ASC","remaining_life_percent_DESC","serial_ASC","serial_DESC","size_ASC","size_DESC","type_ASC","type_DESC","updatedAt_ASC","updatedAt_DESC","usage_ASC","usage_DESC","usage_status_ASC","usage_status_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskOrderByInputEnum = append(diskOrderByInputEnum, v)
	}
}

func (m DiskOrderByInput) validateDiskOrderByInputEnum(path, location string, value DiskOrderByInput) error {
	if err := validate.EnumCase(path, location, value, diskOrderByInputEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this disk order by input
func (m DiskOrderByInput) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiskOrderByInputEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this disk order by input based on context it is used
func (m DiskOrderByInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
