// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Architecture architecture
//
// swagger:model Architecture
type Architecture string

func NewArchitecture(value Architecture) *Architecture {
	v := value
	return &v
}

const (

	// ArchitectureAARCH64 captures enum value "AARCH64"
	ArchitectureAARCH64 Architecture = "AARCH64"

	// ArchitectureX8664 captures enum value "X86_64"
	ArchitectureX8664 Architecture = "X86_64"
)

// for schema
var architectureEnum []interface{}

func init() {
	var res []Architecture
	if err := json.Unmarshal([]byte(`["AARCH64","X86_64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		architectureEnum = append(architectureEnum, v)
	}
}

func (m Architecture) validateArchitectureEnum(path, location string, value Architecture) error {
	if err := validate.EnumCase(path, location, value, architectureEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this architecture
func (m Architecture) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateArchitectureEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this architecture based on context it is used
func (m Architecture) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
