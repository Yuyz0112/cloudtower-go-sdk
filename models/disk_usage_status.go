// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiskUsageStatus disk usage status
//
// swagger:model DiskUsageStatus
type DiskUsageStatus string

func NewDiskUsageStatus(value DiskUsageStatus) *DiskUsageStatus {
	v := value
	return &v
}

const (

	// DiskUsageStatusISOLATED captures enum value "ISOLATED"
	DiskUsageStatusISOLATED DiskUsageStatus = "ISOLATED"

	// DiskUsageStatusMOUNTED captures enum value "MOUNTED"
	DiskUsageStatusMOUNTED DiskUsageStatus = "MOUNTED"

	// DiskUsageStatusMOUNTING captures enum value "MOUNTING"
	DiskUsageStatusMOUNTING DiskUsageStatus = "MOUNTING"

	// DiskUsageStatusPARTIALMOUNTED captures enum value "PARTIAL_MOUNTED"
	DiskUsageStatusPARTIALMOUNTED DiskUsageStatus = "PARTIAL_MOUNTED"

	// DiskUsageStatusUNMOUNTED captures enum value "UNMOUNTED"
	DiskUsageStatusUNMOUNTED DiskUsageStatus = "UNMOUNTED"

	// DiskUsageStatusUNMOUNTING captures enum value "UNMOUNTING"
	DiskUsageStatusUNMOUNTING DiskUsageStatus = "UNMOUNTING"
)

// for schema
var diskUsageStatusEnum []interface{}

func init() {
	var res []DiskUsageStatus
	if err := json.Unmarshal([]byte(`["ISOLATED","MOUNTED","MOUNTING","PARTIAL_MOUNTED","UNMOUNTED","UNMOUNTING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskUsageStatusEnum = append(diskUsageStatusEnum, v)
	}
}

func (m DiskUsageStatus) validateDiskUsageStatusEnum(path, location string, value DiskUsageStatus) error {
	if err := validate.EnumCase(path, location, value, diskUsageStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this disk usage status
func (m DiskUsageStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiskUsageStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this disk usage status based on context it is used
func (m DiskUsageStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
