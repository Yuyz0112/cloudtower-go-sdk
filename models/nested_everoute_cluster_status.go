// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedEverouteClusterStatus nested everoute cluster status
//
// swagger:model NestedEverouteClusterStatus
type NestedEverouteClusterStatus struct {

	// agents
	Agents *NestedEverouteClusterAgentStatus `json:"agents,omitempty"`

	// conditions
	Conditions []*NestedEverouteClusterCondition `json:"conditions,omitempty"`

	// controllers
	Controllers *NestedEverouteClusterControllerStatus `json:"controllers,omitempty"`

	// message
	// Required: true
	Message *string `json:"message"`

	// phase
	Phase *EverouteClusterPhase `json:"phase,omitempty"`

	// reason
	// Required: true
	Reason *string `json:"reason"`

	// retry count
	// Required: true
	RetryCount *int32 `json:"retryCount"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this nested everoute cluster status
func (m *NestedEverouteClusterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControllers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetryCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteClusterStatus) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if m.Agents != nil {
		if err := m.Agents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agents")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteClusterStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NestedEverouteClusterStatus) validateControllers(formats strfmt.Registry) error {
	if swag.IsZero(m.Controllers) { // not required
		return nil
	}

	if m.Controllers != nil {
		if err := m.Controllers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllers")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteClusterStatus) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteClusterStatus) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterStatus) validateRetryCount(formats strfmt.Registry) error {

	if err := validate.Required("retryCount", "body", m.RetryCount); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterStatus) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested everoute cluster status based on the context it is used
func (m *NestedEverouteClusterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateControllers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteClusterStatus) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if m.Agents != nil {
		if err := m.Agents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agents")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteClusterStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conditions); i++ {

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NestedEverouteClusterStatus) contextValidateControllers(ctx context.Context, formats strfmt.Registry) error {

	if m.Controllers != nil {
		if err := m.Controllers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllers")
			}
			return err
		}
	}

	return nil
}

func (m *NestedEverouteClusterStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedEverouteClusterStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedEverouteClusterStatus) UnmarshalBinary(b []byte) error {
	var res NestedEverouteClusterStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
