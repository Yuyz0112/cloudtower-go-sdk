// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Alert alert
//
// swagger:model Alert
type Alert struct {

	// alert rule
	AlertRule interface{} `json:"alert_rule,omitempty"`

	// cause
	// Required: true
	Cause *string `json:"cause"`

	// cluster
	// Required: true
	Cluster *NestedCluster `json:"cluster"`

	// create time
	CreateTime *string `json:"create_time,omitempty"`

	// disk
	Disk interface{} `json:"disk,omitempty"`

	// ended
	// Required: true
	Ended *bool `json:"ended"`

	// host
	Host interface{} `json:"host,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact
	// Required: true
	Impact *string `json:"impact"`

	// labels
	// Required: true
	Labels interface{} `json:"labels"`

	// local create time
	// Required: true
	LocalCreateTime *string `json:"local_create_time"`

	// local end time
	// Required: true
	LocalEndTime *string `json:"local_end_time"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// local start time
	// Required: true
	LocalStartTime *string `json:"local_start_time"`

	// local update time
	// Required: true
	LocalUpdateTime *string `json:"local_update_time"`

	// message
	// Required: true
	Message *string `json:"message"`

	// severity
	// Required: true
	Severity *string `json:"severity"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// threshold
	// Required: true
	Threshold *float64 `json:"threshold"`

	// value
	// Required: true
	Value *float64 `json:"value"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`
}

// Validate validates this alert
func (m *Alert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) validateCause(formats strfmt.Registry) error {

	if err := validate.Required("cause", "body", m.Cause); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) validateEnded(formats strfmt.Registry) error {

	if err := validate.Required("ended", "body", m.Ended); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLabels(formats strfmt.Registry) error {

	if m.Labels == nil {
		return errors.Required("labels", "body", nil)
	}

	return nil
}

func (m *Alert) validateLocalCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("local_create_time", "body", m.LocalCreateTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalEndTime(formats strfmt.Registry) error {

	if err := validate.Required("local_end_time", "body", m.LocalEndTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalStartTime(formats strfmt.Registry) error {

	if err := validate.Required("local_start_time", "body", m.LocalStartTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateLocalUpdateTime(formats strfmt.Registry) error {

	if err := validate.Required("local_update_time", "body", m.LocalUpdateTime); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

func (m *Alert) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this alert based on the context it is used
func (m *Alert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Alert) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Alert) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Alert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Alert) UnmarshalBinary(b []byte) error {
	var res Alert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
