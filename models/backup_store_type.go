// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupStoreType backup store type
//
// swagger:model BackupStoreType
type BackupStoreType string

func NewBackupStoreType(value BackupStoreType) *BackupStoreType {
	v := value
	return &v
}

const (

	// BackupStoreTypeISCSI captures enum value "ISCSI"
	BackupStoreTypeISCSI BackupStoreType = "ISCSI"

	// BackupStoreTypeNFS3 captures enum value "NFS3"
	BackupStoreTypeNFS3 BackupStoreType = "NFS3"

	// BackupStoreTypeNFS4 captures enum value "NFS4"
	BackupStoreTypeNFS4 BackupStoreType = "NFS4"
)

// for schema
var backupStoreTypeEnum []interface{}

func init() {
	var res []BackupStoreType
	if err := json.Unmarshal([]byte(`["ISCSI","NFS3","NFS4"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupStoreTypeEnum = append(backupStoreTypeEnum, v)
	}
}

func (m BackupStoreType) validateBackupStoreTypeEnum(path, location string, value BackupStoreType) error {
	if err := validate.EnumCase(path, location, value, backupStoreTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup store type
func (m BackupStoreType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupStoreTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup store type based on context it is used
func (m BackupStoreType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
