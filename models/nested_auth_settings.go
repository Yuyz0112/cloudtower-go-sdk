// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NestedAuthSettings nested auth settings
//
// swagger:model NestedAuthSettings
type NestedAuthSettings struct {

	// access list
	AccessList []string `json:"access_list,omitempty"`

	// access mode
	AccessMode *AccessMode `json:"access_mode,omitempty"`

	// enable single session login
	EnableSingleSessionLogin *bool `json:"enable_single_session_login,omitempty"`

	// login miss num threshold
	LoginMissNumThreshold *float64 `json:"login_miss_num_threshold,omitempty"`

	// login miss time threshold
	LoginMissTimeThreshold *float64 `json:"login_miss_time_threshold,omitempty"`

	// password complexity
	PasswordComplexity *PasswordComplexity `json:"password_complexity,omitempty"`

	// password expire days
	PasswordExpireDays *float64 `json:"password_expire_days,omitempty"`

	// session max age
	SessionMaxAge *float64 `json:"session_max_age,omitempty"`
}

// Validate validates this nested auth settings
func (m *NestedAuthSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordComplexity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedAuthSettings) validateAccessMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessMode) { // not required
		return nil
	}

	if m.AccessMode != nil {
		if err := m.AccessMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_mode")
			}
			return err
		}
	}

	return nil
}

func (m *NestedAuthSettings) validatePasswordComplexity(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordComplexity) { // not required
		return nil
	}

	if m.PasswordComplexity != nil {
		if err := m.PasswordComplexity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_complexity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_complexity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this nested auth settings based on the context it is used
func (m *NestedAuthSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordComplexity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedAuthSettings) contextValidateAccessMode(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessMode != nil {
		if err := m.AccessMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_mode")
			}
			return err
		}
	}

	return nil
}

func (m *NestedAuthSettings) contextValidatePasswordComplexity(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordComplexity != nil {
		if err := m.PasswordComplexity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_complexity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_complexity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedAuthSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedAuthSettings) UnmarshalBinary(b []byte) error {
	var res NestedAuthSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
