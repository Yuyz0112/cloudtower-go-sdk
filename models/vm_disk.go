// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMDisk Vm disk
//
// swagger:model VmDisk
type VMDisk struct {

	// boot
	// Required: true
	Boot *float64 `json:"boot"`

	// bus
	// Required: true
	Bus *Bus `json:"bus"`

	// cloud init image name
	CloudInitImageName *string `json:"cloud_init_image_name,omitempty"`

	// cloud init image path
	CloudInitImagePath *string `json:"cloud_init_image_path,omitempty"`

	// device
	Device *string `json:"device,omitempty"`

	// disabled
	Disabled *bool `json:"disabled,omitempty"`

	// elf image
	ElfImage *VMDiskElfImage `json:"elf_image,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// key
	Key *float64 `json:"key,omitempty"`

	// max bandwidth
	MaxBandwidth *float64 `json:"max_bandwidth,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy interface{} `json:"max_bandwidth_policy,omitempty"`

	// max iops
	MaxIops *float64 `json:"max_iops,omitempty"`

	// max iops policy
	MaxIopsPolicy interface{} `json:"max_iops_policy,omitempty"`

	// serial
	Serial *string `json:"serial,omitempty"`

	// svt image
	SvtImage *VMDiskSvtImage `json:"svt_image,omitempty"`

	// type
	// Required: true
	Type *VMDiskType `json:"type"`

	// unsafe image path
	UnsafeImagePath *string `json:"unsafe_image_path,omitempty"`

	// unsafe image uuid
	UnsafeImageUUID *string `json:"unsafe_image_uuid,omitempty"`

	// unsafe provision
	UnsafeProvision *string `json:"unsafe_provision,omitempty"`

	// vm
	// Required: true
	VM *VMDiskVM `json:"vm"`

	// vm volume
	VMVolume *VMDiskVMVolume `json:"vm_volume,omitempty"`
}

// Validate validates this Vm disk
func (m *VMDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSvtImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDisk) validateBoot(formats strfmt.Registry) error {

	if err := validate.Required("boot", "body", m.Boot); err != nil {
		return err
	}

	return nil
}

func (m *VMDisk) validateBus(formats strfmt.Registry) error {

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if m.Bus != nil {
		if err := m.Bus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateElfImage(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImage) { // not required
		return nil
	}

	if m.ElfImage != nil {
		if err := m.ElfImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMDisk) validateSvtImage(formats strfmt.Registry) error {
	if swag.IsZero(m.SvtImage) { // not required
		return nil
	}

	if m.SvtImage != nil {
		if err := m.SvtImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svt_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateVM(formats strfmt.Registry) error {

	if err := validate.Required("vm", "body", m.VM); err != nil {
		return err
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) validateVMVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolume) { // not required
		return nil
	}

	if m.VMVolume != nil {
		if err := m.VMVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm disk based on the context it is used
func (m *VMDisk) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSvtImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDisk) contextValidateBus(ctx context.Context, formats strfmt.Registry) error {

	if m.Bus != nil {
		if err := m.Bus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateElfImage(ctx context.Context, formats strfmt.Registry) error {

	if m.ElfImage != nil {
		if err := m.ElfImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateSvtImage(ctx context.Context, formats strfmt.Registry) error {

	if m.SvtImage != nil {
		if err := m.SvtImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("svt_image")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

func (m *VMDisk) contextValidateVMVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolume != nil {
		if err := m.VMVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDisk) UnmarshalBinary(b []byte) error {
	var res VMDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMDiskElfImage VM disk elf image
//
// swagger:model VMDiskElfImage
type VMDiskElfImage struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM disk elf image
func (m *VMDiskElfImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskElfImage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("elf_image"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMDiskElfImage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("elf_image"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM disk elf image based on context it is used
func (m *VMDiskElfImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskElfImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskElfImage) UnmarshalBinary(b []byte) error {
	var res VMDiskElfImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMDiskSvtImage VM disk svt image
//
// swagger:model VMDiskSvtImage
type VMDiskSvtImage struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM disk svt image
func (m *VMDiskSvtImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskSvtImage) validateID(formats strfmt.Registry) error {

	if err := validate.Required("svt_image"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMDiskSvtImage) validateName(formats strfmt.Registry) error {

	if err := validate.Required("svt_image"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM disk svt image based on context it is used
func (m *VMDiskSvtImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskSvtImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskSvtImage) UnmarshalBinary(b []byte) error {
	var res VMDiskSvtImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMDiskVM VM disk VM
//
// swagger:model VMDiskVM
type VMDiskVM struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM disk VM
func (m *VMDiskVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskVM) validateID(formats strfmt.Registry) error {

	if err := validate.Required("vm"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMDiskVM) validateName(formats strfmt.Registry) error {

	if err := validate.Required("vm"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM disk VM based on context it is used
func (m *VMDiskVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskVM) UnmarshalBinary(b []byte) error {
	var res VMDiskVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMDiskVMVolume VM disk VM volume
//
// swagger:model VMDiskVMVolume
type VMDiskVMVolume struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM disk VM volume
func (m *VMDiskVMVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDiskVMVolume) validateID(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMDiskVMVolume) validateName(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM disk VM volume based on context it is used
func (m *VMDiskVMVolume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMDiskVMVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDiskVMVolume) UnmarshalBinary(b []byte) error {
	var res VMDiskVMVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
