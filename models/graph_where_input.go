// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GraphWhereInput graph where input
// Example: {"AND":"GraphWhereInput[]","NOT":"GraphWhereInput[]","OR":"GraphWhereInput[]","cluster":"ClusterWhereInput","disks_every":"DiskWhereInput","disks_none":"DiskWhereInput","disks_some":"DiskWhereInput","entityAsyncStatus":"CREATING","entityAsyncStatus_in":["CREATING"],"entityAsyncStatus_not":"CREATING","entityAsyncStatus_not_in":["CREATING"],"hosts_every":"HostWhereInput","hosts_none":"HostWhereInput","hosts_some":"HostWhereInput","id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","local_id":"string","local_id_contains":"string","local_id_ends_with":"string","local_id_gt":"string","local_id_gte":"string","local_id_in":["string"],"local_id_lt":"string","local_id_lte":"string","local_id_not":"string","local_id_not_contains":"string","local_id_not_ends_with":"string","local_id_not_in":["string"],"local_id_not_starts_with":"string","local_id_starts_with":"string","luns_every":"IscsiLunWhereInput","luns_none":"IscsiLunWhereInput","luns_some":"IscsiLunWhereInput","metric_count":0,"metric_count_gt":0,"metric_count_gte":0,"metric_count_in":[0],"metric_count_lt":0,"metric_count_lte":0,"metric_count_not":0,"metric_count_not_in":[0],"metric_name":"string","metric_name_contains":"string","metric_name_ends_with":"string","metric_name_gt":"string","metric_name_gte":"string","metric_name_in":["string"],"metric_name_lt":"string","metric_name_lte":"string","metric_name_not":"string","metric_name_not_contains":"string","metric_name_not_ends_with":"string","metric_name_not_in":["string"],"metric_name_not_starts_with":"string","metric_name_starts_with":"string","metric_type":"BOTTOMK","metric_type_in":["BOTTOMK"],"metric_type_not":"BOTTOMK","metric_type_not_in":["BOTTOMK"],"namespaces_every":"NvmfNamespaceWhereInput","namespaces_none":"NvmfNamespaceWhereInput","namespaces_some":"NvmfNamespaceWhereInput","network":"ACCESS","network_in":["ACCESS"],"network_not":"ACCESS","network_not_in":["ACCESS"],"nics_every":"NicWhereInput","nics_none":"NicWhereInput","nics_some":"NicWhereInput","resource_type":"string","resource_type_contains":"string","resource_type_ends_with":"string","resource_type_gt":"string","resource_type_gte":"string","resource_type_in":["string"],"resource_type_lt":"string","resource_type_lte":"string","resource_type_not":"string","resource_type_not_contains":"string","resource_type_not_ends_with":"string","resource_type_not_in":["string"],"resource_type_not_starts_with":"string","resource_type_starts_with":"string","service":"string","service_contains":"string","service_ends_with":"string","service_gt":"string","service_gte":"string","service_in":["string"],"service_lt":"string","service_lte":"string","service_not":"string","service_not_contains":"string","service_not_ends_with":"string","service_not_in":["string"],"service_not_starts_with":"string","service_starts_with":"string","title":"string","title_contains":"string","title_ends_with":"string","title_gt":"string","title_gte":"string","title_in":["string"],"title_lt":"string","title_lte":"string","title_not":"string","title_not_contains":"string","title_not_ends_with":"string","title_not_in":["string"],"title_not_starts_with":"string","title_starts_with":"string","type":"AREA","type_in":["AREA"],"type_not":"AREA","type_not_in":["AREA"],"view":"ViewWhereInput","vmNics_every":"VmNicWhereInput","vmNics_none":"VmNicWhereInput","vmNics_some":"VmNicWhereInput","vmVolumes_every":"VmVolumeWhereInput","vmVolumes_none":"VmVolumeWhereInput","vmVolumes_some":"VmVolumeWhereInput","vms_every":"VmWhereInput","vms_none":"VmWhereInput","vms_some":"VmWhereInput","witnesses_every":"WitnessWhereInput","witnesses_none":"WitnessWhereInput","witnesses_some":"WitnessWhereInput","zones_every":"ZoneWhereInput","zones_none":"ZoneWhereInput","zones_some":"ZoneWhereInput"}
//
// swagger:model GraphWhereInput
type GraphWhereInput struct {

	// a n d
	AND []*GraphWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*GraphWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*GraphWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// disks every
	DisksEvery *DiskWhereInput `json:"disks_every,omitempty"`

	// disks none
	DisksNone *DiskWhereInput `json:"disks_none,omitempty"`

	// disks some
	DisksSome *DiskWhereInput `json:"disks_some,omitempty"`

	// entity async status
	EntityAsyncStatus *EntityAsyncStatus `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot *EntityAsyncStatus `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// hosts every
	HostsEvery *HostWhereInput `json:"hosts_every,omitempty"`

	// hosts none
	HostsNone *HostWhereInput `json:"hosts_none,omitempty"`

	// hosts some
	HostsSome *HostWhereInput `json:"hosts_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// luns every
	LunsEvery *IscsiLunWhereInput `json:"luns_every,omitempty"`

	// luns none
	LunsNone *IscsiLunWhereInput `json:"luns_none,omitempty"`

	// luns some
	LunsSome *IscsiLunWhereInput `json:"luns_some,omitempty"`

	// metric count
	MetricCount *int32 `json:"metric_count,omitempty"`

	// metric count gt
	MetricCountGt *int32 `json:"metric_count_gt,omitempty"`

	// metric count gte
	MetricCountGte *int32 `json:"metric_count_gte,omitempty"`

	// metric count in
	MetricCountIn []int32 `json:"metric_count_in,omitempty"`

	// metric count lt
	MetricCountLt *int32 `json:"metric_count_lt,omitempty"`

	// metric count lte
	MetricCountLte *int32 `json:"metric_count_lte,omitempty"`

	// metric count not
	MetricCountNot *int32 `json:"metric_count_not,omitempty"`

	// metric count not in
	MetricCountNotIn []int32 `json:"metric_count_not_in,omitempty"`

	// metric name
	MetricName *string `json:"metric_name,omitempty"`

	// metric name contains
	MetricNameContains *string `json:"metric_name_contains,omitempty"`

	// metric name ends with
	MetricNameEndsWith *string `json:"metric_name_ends_with,omitempty"`

	// metric name gt
	MetricNameGt *string `json:"metric_name_gt,omitempty"`

	// metric name gte
	MetricNameGte *string `json:"metric_name_gte,omitempty"`

	// metric name in
	MetricNameIn []string `json:"metric_name_in,omitempty"`

	// metric name lt
	MetricNameLt *string `json:"metric_name_lt,omitempty"`

	// metric name lte
	MetricNameLte *string `json:"metric_name_lte,omitempty"`

	// metric name not
	MetricNameNot *string `json:"metric_name_not,omitempty"`

	// metric name not contains
	MetricNameNotContains *string `json:"metric_name_not_contains,omitempty"`

	// metric name not ends with
	MetricNameNotEndsWith *string `json:"metric_name_not_ends_with,omitempty"`

	// metric name not in
	MetricNameNotIn []string `json:"metric_name_not_in,omitempty"`

	// metric name not starts with
	MetricNameNotStartsWith *string `json:"metric_name_not_starts_with,omitempty"`

	// metric name starts with
	MetricNameStartsWith *string `json:"metric_name_starts_with,omitempty"`

	// metric type
	MetricType *MetricType `json:"metric_type,omitempty"`

	// metric type in
	MetricTypeIn []MetricType `json:"metric_type_in,omitempty"`

	// metric type not
	MetricTypeNot *MetricType `json:"metric_type_not,omitempty"`

	// metric type not in
	MetricTypeNotIn []MetricType `json:"metric_type_not_in,omitempty"`

	// namespaces every
	NamespacesEvery *NvmfNamespaceWhereInput `json:"namespaces_every,omitempty"`

	// namespaces none
	NamespacesNone *NvmfNamespaceWhereInput `json:"namespaces_none,omitempty"`

	// namespaces some
	NamespacesSome *NvmfNamespaceWhereInput `json:"namespaces_some,omitempty"`

	// network
	Network *NetworkType `json:"network,omitempty"`

	// network in
	NetworkIn []NetworkType `json:"network_in,omitempty"`

	// network not
	NetworkNot *NetworkType `json:"network_not,omitempty"`

	// network not in
	NetworkNotIn []NetworkType `json:"network_not_in,omitempty"`

	// nics every
	NicsEvery *NicWhereInput `json:"nics_every,omitempty"`

	// nics none
	NicsNone *NicWhereInput `json:"nics_none,omitempty"`

	// nics some
	NicsSome *NicWhereInput `json:"nics_some,omitempty"`

	// resource type
	ResourceType *string `json:"resource_type,omitempty"`

	// resource type contains
	ResourceTypeContains *string `json:"resource_type_contains,omitempty"`

	// resource type ends with
	ResourceTypeEndsWith *string `json:"resource_type_ends_with,omitempty"`

	// resource type gt
	ResourceTypeGt *string `json:"resource_type_gt,omitempty"`

	// resource type gte
	ResourceTypeGte *string `json:"resource_type_gte,omitempty"`

	// resource type in
	ResourceTypeIn []string `json:"resource_type_in,omitempty"`

	// resource type lt
	ResourceTypeLt *string `json:"resource_type_lt,omitempty"`

	// resource type lte
	ResourceTypeLte *string `json:"resource_type_lte,omitempty"`

	// resource type not
	ResourceTypeNot *string `json:"resource_type_not,omitempty"`

	// resource type not contains
	ResourceTypeNotContains *string `json:"resource_type_not_contains,omitempty"`

	// resource type not ends with
	ResourceTypeNotEndsWith *string `json:"resource_type_not_ends_with,omitempty"`

	// resource type not in
	ResourceTypeNotIn []string `json:"resource_type_not_in,omitempty"`

	// resource type not starts with
	ResourceTypeNotStartsWith *string `json:"resource_type_not_starts_with,omitempty"`

	// resource type starts with
	ResourceTypeStartsWith *string `json:"resource_type_starts_with,omitempty"`

	// service
	Service *string `json:"service,omitempty"`

	// service contains
	ServiceContains *string `json:"service_contains,omitempty"`

	// service ends with
	ServiceEndsWith *string `json:"service_ends_with,omitempty"`

	// service gt
	ServiceGt *string `json:"service_gt,omitempty"`

	// service gte
	ServiceGte *string `json:"service_gte,omitempty"`

	// service in
	ServiceIn []string `json:"service_in,omitempty"`

	// service lt
	ServiceLt *string `json:"service_lt,omitempty"`

	// service lte
	ServiceLte *string `json:"service_lte,omitempty"`

	// service not
	ServiceNot *string `json:"service_not,omitempty"`

	// service not contains
	ServiceNotContains *string `json:"service_not_contains,omitempty"`

	// service not ends with
	ServiceNotEndsWith *string `json:"service_not_ends_with,omitempty"`

	// service not in
	ServiceNotIn []string `json:"service_not_in,omitempty"`

	// service not starts with
	ServiceNotStartsWith *string `json:"service_not_starts_with,omitempty"`

	// service starts with
	ServiceStartsWith *string `json:"service_starts_with,omitempty"`

	// title
	Title *string `json:"title,omitempty"`

	// title contains
	TitleContains *string `json:"title_contains,omitempty"`

	// title ends with
	TitleEndsWith *string `json:"title_ends_with,omitempty"`

	// title gt
	TitleGt *string `json:"title_gt,omitempty"`

	// title gte
	TitleGte *string `json:"title_gte,omitempty"`

	// title in
	TitleIn []string `json:"title_in,omitempty"`

	// title lt
	TitleLt *string `json:"title_lt,omitempty"`

	// title lte
	TitleLte *string `json:"title_lte,omitempty"`

	// title not
	TitleNot *string `json:"title_not,omitempty"`

	// title not contains
	TitleNotContains *string `json:"title_not_contains,omitempty"`

	// title not ends with
	TitleNotEndsWith *string `json:"title_not_ends_with,omitempty"`

	// title not in
	TitleNotIn []string `json:"title_not_in,omitempty"`

	// title not starts with
	TitleNotStartsWith *string `json:"title_not_starts_with,omitempty"`

	// title starts with
	TitleStartsWith *string `json:"title_starts_with,omitempty"`

	// type
	Type *GraphType `json:"type,omitempty"`

	// type in
	TypeIn []GraphType `json:"type_in,omitempty"`

	// type not
	TypeNot *GraphType `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []GraphType `json:"type_not_in,omitempty"`

	// view
	View *ViewWhereInput `json:"view,omitempty"`

	// vm nics every
	VMNicsEvery *VMNicWhereInput `json:"vmNics_every,omitempty"`

	// vm nics none
	VMNicsNone *VMNicWhereInput `json:"vmNics_none,omitempty"`

	// vm nics some
	VMNicsSome *VMNicWhereInput `json:"vmNics_some,omitempty"`

	// vm volumes every
	VMVolumesEvery *VMVolumeWhereInput `json:"vmVolumes_every,omitempty"`

	// vm volumes none
	VMVolumesNone *VMVolumeWhereInput `json:"vmVolumes_none,omitempty"`

	// vm volumes some
	VMVolumesSome *VMVolumeWhereInput `json:"vmVolumes_some,omitempty"`

	// vms every
	VmsEvery *VMWhereInput `json:"vms_every,omitempty"`

	// vms none
	VmsNone *VMWhereInput `json:"vms_none,omitempty"`

	// vms some
	VmsSome *VMWhereInput `json:"vms_some,omitempty"`

	// witnesses every
	WitnessesEvery *WitnessWhereInput `json:"witnesses_every,omitempty"`

	// witnesses none
	WitnessesNone *WitnessWhereInput `json:"witnesses_none,omitempty"`

	// witnesses some
	WitnessesSome *WitnessWhereInput `json:"witnesses_some,omitempty"`

	// zones every
	ZonesEvery *ZoneWhereInput `json:"zones_every,omitempty"`

	// zones none
	ZonesNone *ZoneWhereInput `json:"zones_none,omitempty"`

	// zones some
	ZonesSome *ZoneWhereInput `json:"zones_some,omitempty"`
}

// Validate validates this graph where input
func (m *GraphWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLunsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespacesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNicsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitnessesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitnessesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWitnessesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZonesSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateDisksEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksEvery) { // not required
		return nil
	}

	if m.DisksEvery != nil {
		if err := m.DisksEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateDisksNone(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksNone) { // not required
		return nil
	}

	if m.DisksNone != nil {
		if err := m.DisksNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateDisksSome(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksSome) { // not required
		return nil
	}

	if m.DisksSome != nil {
		if err := m.DisksSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateHostsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsEvery) { // not required
		return nil
	}

	if m.HostsEvery != nil {
		if err := m.HostsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateHostsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsNone) { // not required
		return nil
	}

	if m.HostsNone != nil {
		if err := m.HostsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateHostsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsSome) { // not required
		return nil
	}

	if m.HostsSome != nil {
		if err := m.HostsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateLunsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LunsEvery) { // not required
		return nil
	}

	if m.LunsEvery != nil {
		if err := m.LunsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateLunsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LunsNone) { // not required
		return nil
	}

	if m.LunsNone != nil {
		if err := m.LunsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateLunsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LunsSome) { // not required
		return nil
	}

	if m.LunsSome != nil {
		if err := m.LunsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateMetricType(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricType) { // not required
		return nil
	}

	if m.MetricType != nil {
		if err := m.MetricType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateMetricTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricTypeIn); i++ {

		if err := m.MetricTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateMetricTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricTypeNot) { // not required
		return nil
	}

	if m.MetricTypeNot != nil {
		if err := m.MetricTypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateMetricTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricTypeNotIn); i++ {

		if err := m.MetricTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNamespacesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesEvery) { // not required
		return nil
	}

	if m.NamespacesEvery != nil {
		if err := m.NamespacesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNamespacesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesNone) { // not required
		return nil
	}

	if m.NamespacesNone != nil {
		if err := m.NamespacesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNamespacesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespacesSome) { // not required
		return nil
	}

	if m.NamespacesSome != nil {
		if err := m.NamespacesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNetworkIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkIn); i++ {

		if err := m.NetworkIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNetworkNot(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkNot) { // not required
		return nil
	}

	if m.NetworkNot != nil {
		if err := m.NetworkNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNetworkNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkNotIn); i++ {

		if err := m.NetworkNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateNicsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsEvery) { // not required
		return nil
	}

	if m.NicsEvery != nil {
		if err := m.NicsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNicsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsNone) { // not required
		return nil
	}

	if m.NicsNone != nil {
		if err := m.NicsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateNicsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsSome) { // not required
		return nil
	}

	if m.NicsSome != nil {
		if err := m.NicsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNot) { // not required
		return nil
	}

	if m.TypeNot != nil {
		if err := m.TypeNot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) validateView(formats strfmt.Registry) error {
	if swag.IsZero(m.View) { // not required
		return nil
	}

	if m.View != nil {
		if err := m.View.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMNicsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsEvery) { // not required
		return nil
	}

	if m.VMNicsEvery != nil {
		if err := m.VMNicsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMNicsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsNone) { // not required
		return nil
	}

	if m.VMNicsNone != nil {
		if err := m.VMNicsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMNicsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNicsSome) { // not required
		return nil
	}

	if m.VMNicsSome != nil {
		if err := m.VMNicsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMVolumesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesEvery) { // not required
		return nil
	}

	if m.VMVolumesEvery != nil {
		if err := m.VMVolumesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMVolumesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesNone) { // not required
		return nil
	}

	if m.VMVolumesNone != nil {
		if err := m.VMVolumesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVMVolumesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesSome) { // not required
		return nil
	}

	if m.VMVolumesSome != nil {
		if err := m.VMVolumesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	if m.VmsEvery != nil {
		if err := m.VmsEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	if m.VmsNone != nil {
		if err := m.VmsNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	if m.VmsSome != nil {
		if err := m.VmsSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateWitnessesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.WitnessesEvery) { // not required
		return nil
	}

	if m.WitnessesEvery != nil {
		if err := m.WitnessesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateWitnessesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.WitnessesNone) { // not required
		return nil
	}

	if m.WitnessesNone != nil {
		if err := m.WitnessesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateWitnessesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.WitnessesSome) { // not required
		return nil
	}

	if m.WitnessesSome != nil {
		if err := m.WitnessesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateZonesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ZonesEvery) { // not required
		return nil
	}

	if m.ZonesEvery != nil {
		if err := m.ZonesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateZonesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ZonesNone) { // not required
		return nil
	}

	if m.ZonesNone != nil {
		if err := m.ZonesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) validateZonesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ZonesSome) { // not required
		return nil
	}

	if m.ZonesSome != nil {
		if err := m.ZonesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this graph where input based on the context it is used
func (m *GraphWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLunsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLunsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLunsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespacesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNicsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitnessesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitnessesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWitnessesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZonesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZonesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZonesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateDisksEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.DisksEvery != nil {
		if err := m.DisksEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateDisksNone(ctx context.Context, formats strfmt.Registry) error {

	if m.DisksNone != nil {
		if err := m.DisksNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateDisksSome(ctx context.Context, formats strfmt.Registry) error {

	if m.DisksSome != nil {
		if err := m.DisksSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disks_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("disks_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatus != nil {
		if err := m.EntityAsyncStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityAsyncStatusNot != nil {
		if err := m.EntityAsyncStatusNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateHostsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsEvery != nil {
		if err := m.HostsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateHostsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsNone != nil {
		if err := m.HostsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateHostsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.HostsSome != nil {
		if err := m.HostsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateLunsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.LunsEvery != nil {
		if err := m.LunsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateLunsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.LunsNone != nil {
		if err := m.LunsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateLunsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.LunsSome != nil {
		if err := m.LunsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("luns_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("luns_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricType(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricType != nil {
		if err := m.MetricType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetricTypeIn); i++ {

		if err := m.MetricTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricTypeNot != nil {
		if err := m.MetricTypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateMetricTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MetricTypeNotIn); i++ {

		if err := m.MetricTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metric_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNamespacesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesEvery != nil {
		if err := m.NamespacesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNamespacesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesNone != nil {
		if err := m.NamespacesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNamespacesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespacesSome != nil {
		if err := m.NamespacesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaces_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaces_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetworkIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkIn); i++ {

		if err := m.NetworkIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetworkNot(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkNot != nil {
		if err := m.NetworkNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNetworkNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkNotIn); i++ {

		if err := m.NetworkNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("network_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateNicsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NicsEvery != nil {
		if err := m.NicsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNicsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NicsNone != nil {
		if err := m.NicsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateNicsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NicsSome != nil {
		if err := m.NicsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateTypeNot(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeNot != nil {
		if err := m.TypeNot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GraphWhereInput) contextValidateView(ctx context.Context, formats strfmt.Registry) error {

	if m.View != nil {
		if err := m.View.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMNicsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsEvery != nil {
		if err := m.VMNicsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMNicsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsNone != nil {
		if err := m.VMNicsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMNicsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VMNicsSome != nil {
		if err := m.VMNicsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmNics_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmNics_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMVolumesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumesEvery != nil {
		if err := m.VMVolumesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMVolumesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumesNone != nil {
		if err := m.VMVolumesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVMVolumesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolumesSome != nil {
		if err := m.VMVolumesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmVolumes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmVolumes_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsEvery != nil {
		if err := m.VmsEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsNone != nil {
		if err := m.VmsNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	if m.VmsSome != nil {
		if err := m.VmsSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vms_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vms_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateWitnessesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.WitnessesEvery != nil {
		if err := m.WitnessesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateWitnessesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.WitnessesNone != nil {
		if err := m.WitnessesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateWitnessesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.WitnessesSome != nil {
		if err := m.WitnessesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("witnesses_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("witnesses_some")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateZonesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ZonesEvery != nil {
		if err := m.ZonesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_every")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateZonesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ZonesNone != nil {
		if err := m.ZonesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_none")
			}
			return err
		}
	}

	return nil
}

func (m *GraphWhereInput) contextValidateZonesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ZonesSome != nil {
		if err := m.ZonesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zones_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zones_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphWhereInput) UnmarshalBinary(b []byte) error {
	var res GraphWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
