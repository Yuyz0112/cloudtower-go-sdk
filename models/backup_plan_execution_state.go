// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupPlanExecutionState backup plan execution state
//
// swagger:model BackupPlanExecutionState
type BackupPlanExecutionState string

func NewBackupPlanExecutionState(value BackupPlanExecutionState) *BackupPlanExecutionState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BackupPlanExecutionState.
func (m BackupPlanExecutionState) Pointer() *BackupPlanExecutionState {
	return &m
}

const (

	// BackupPlanExecutionStateFAILED captures enum value "FAILED"
	BackupPlanExecutionStateFAILED BackupPlanExecutionState = "FAILED"

	// BackupPlanExecutionStatePARTLYFAILED captures enum value "PARTLY_FAILED"
	BackupPlanExecutionStatePARTLYFAILED BackupPlanExecutionState = "PARTLY_FAILED"

	// BackupPlanExecutionStatePAUSED captures enum value "PAUSED"
	BackupPlanExecutionStatePAUSED BackupPlanExecutionState = "PAUSED"

	// BackupPlanExecutionStatePAUSING captures enum value "PAUSING"
	BackupPlanExecutionStatePAUSING BackupPlanExecutionState = "PAUSING"

	// BackupPlanExecutionStateRUNNING captures enum value "RUNNING"
	BackupPlanExecutionStateRUNNING BackupPlanExecutionState = "RUNNING"

	// BackupPlanExecutionStateSTARTING captures enum value "STARTING"
	BackupPlanExecutionStateSTARTING BackupPlanExecutionState = "STARTING"

	// BackupPlanExecutionStateSUCCEED captures enum value "SUCCEED"
	BackupPlanExecutionStateSUCCEED BackupPlanExecutionState = "SUCCEED"
)

// for schema
var backupPlanExecutionStateEnum []interface{}

func init() {
	var res []BackupPlanExecutionState
	if err := json.Unmarshal([]byte(`["FAILED","PARTLY_FAILED","PAUSED","PAUSING","RUNNING","STARTING","SUCCEED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupPlanExecutionStateEnum = append(backupPlanExecutionStateEnum, v)
	}
}

func (m BackupPlanExecutionState) validateBackupPlanExecutionStateEnum(path, location string, value BackupPlanExecutionState) error {
	if err := validate.EnumCase(path, location, value, backupPlanExecutionStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup plan execution state
func (m BackupPlanExecutionState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupPlanExecutionStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup plan execution state based on context it is used
func (m BackupPlanExecutionState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
