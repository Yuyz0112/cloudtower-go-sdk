// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupExecutionStatus backup execution status
//
// swagger:model BackupExecutionStatus
type BackupExecutionStatus string

func NewBackupExecutionStatus(value BackupExecutionStatus) *BackupExecutionStatus {
	v := value
	return &v
}

const (

	// BackupExecutionStatusABORTED captures enum value "ABORTED"
	BackupExecutionStatusABORTED BackupExecutionStatus = "ABORTED"

	// BackupExecutionStatusFAILED captures enum value "FAILED"
	BackupExecutionStatusFAILED BackupExecutionStatus = "FAILED"

	// BackupExecutionStatusINITIALIZING captures enum value "INITIALIZING"
	BackupExecutionStatusINITIALIZING BackupExecutionStatus = "INITIALIZING"

	// BackupExecutionStatusPAUSED captures enum value "PAUSED"
	BackupExecutionStatusPAUSED BackupExecutionStatus = "PAUSED"

	// BackupExecutionStatusRUNNING captures enum value "RUNNING"
	BackupExecutionStatusRUNNING BackupExecutionStatus = "RUNNING"

	// BackupExecutionStatusSUCCESS captures enum value "SUCCESS"
	BackupExecutionStatusSUCCESS BackupExecutionStatus = "SUCCESS"
)

// for schema
var backupExecutionStatusEnum []interface{}

func init() {
	var res []BackupExecutionStatus
	if err := json.Unmarshal([]byte(`["ABORTED","FAILED","INITIALIZING","PAUSED","RUNNING","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupExecutionStatusEnum = append(backupExecutionStatusEnum, v)
	}
}

func (m BackupExecutionStatus) validateBackupExecutionStatusEnum(path, location string, value BackupExecutionStatus) error {
	if err := validate.EnumCase(path, location, value, backupExecutionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup execution status
func (m BackupExecutionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupExecutionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup execution status based on context it is used
func (m BackupExecutionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
