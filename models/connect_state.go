// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConnectState connect state
//
// swagger:model ConnectState
type ConnectState string

func NewConnectState(value ConnectState) *ConnectState {
	v := value
	return &v
}

const (

	// ConnectStateCONNECTED captures enum value "CONNECTED"
	ConnectStateCONNECTED ConnectState = "CONNECTED"

	// ConnectStateDISCONNECTED captures enum value "DISCONNECTED"
	ConnectStateDISCONNECTED ConnectState = "DISCONNECTED"

	// ConnectStateINITIALIZING captures enum value "INITIALIZING"
	ConnectStateINITIALIZING ConnectState = "INITIALIZING"

	// ConnectStateREMOVING captures enum value "REMOVING"
	ConnectStateREMOVING ConnectState = "REMOVING"
)

// for schema
var connectStateEnum []interface{}

func init() {
	var res []ConnectState
	if err := json.Unmarshal([]byte(`["CONNECTED","DISCONNECTED","INITIALIZING","REMOVING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectStateEnum = append(connectStateEnum, v)
	}
}

func (m ConnectState) validateConnectStateEnum(path, location string, value ConnectState) error {
	if err := validate.EnumCase(path, location, value, connectStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this connect state
func (m ConnectState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConnectStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this connect state based on context it is used
func (m ConnectState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
