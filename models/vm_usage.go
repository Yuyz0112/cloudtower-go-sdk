// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMUsage Vm usage
//
// swagger:model VmUsage
type VMUsage string

func NewVMUsage(value VMUsage) *VMUsage {
	v := value
	return &v
}

const (

	// VMUsageEVEROUTECONTROLLER captures enum value "EVEROUTE_CONTROLLER"
	VMUsageEVEROUTECONTROLLER VMUsage = "EVEROUTE_CONTROLLER"
)

// for schema
var vmUsageEnum []interface{}

func init() {
	var res []VMUsage
	if err := json.Unmarshal([]byte(`["EVEROUTE_CONTROLLER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmUsageEnum = append(vmUsageEnum, v)
	}
}

func (m VMUsage) validateVMUsageEnum(path, location string, value VMUsage) error {
	if err := validate.EnumCase(path, location, value, vmUsageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm usage
func (m VMUsage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMUsageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm usage based on context it is used
func (m VMUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
