// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMFirmware Vm firmware
//
// swagger:model VmFirmware
type VMFirmware string

func NewVMFirmware(value VMFirmware) *VMFirmware {
	v := value
	return &v
}

const (

	// VMFirmwareBIOS captures enum value "BIOS"
	VMFirmwareBIOS VMFirmware = "BIOS"

	// VMFirmwareUEFI captures enum value "UEFI"
	VMFirmwareUEFI VMFirmware = "UEFI"
)

// for schema
var vmFirmwareEnum []interface{}

func init() {
	var res []VMFirmware
	if err := json.Unmarshal([]byte(`["BIOS","UEFI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmFirmwareEnum = append(vmFirmwareEnum, v)
	}
}

func (m VMFirmware) validateVMFirmwareEnum(path, location string, value VMFirmware) error {
	if err := validate.EnumCase(path, location, value, vmFirmwareEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm firmware
func (m VMFirmware) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMFirmwareEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm firmware based on context it is used
func (m VMFirmware) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
