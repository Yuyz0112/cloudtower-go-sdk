// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotPlan snapshot plan
//
// swagger:model SnapshotPlan
type SnapshotPlan struct {

	// auto delete num
	// Required: true
	AutoDeleteNum *int32 `json:"auto_delete_num"`

	// auto execute num
	// Required: true
	AutoExecuteNum *int32 `json:"auto_execute_num"`

	// cluster
	// Required: true
	Cluster *NestedCluster `json:"cluster"`

	// description
	// Required: true
	Description *string `json:"description"`

	// end time
	EndTime *string `json:"end_time,omitempty"`

	// entity async status
	EntityAsyncStatus struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus,omitempty"`

	// exec h m
	Exechm interface{} `json:"exec_h_m,omitempty"`

	// execute intervals
	// Required: true
	ExecuteIntervals []int32 `json:"execute_intervals"`

	// execute plan type
	// Required: true
	ExecutePlanType *SnapshotPlanExecuteType `json:"execute_plan_type"`

	// execution tasks
	ExecutionTasks []*NestedSnapshotPlanTask `json:"execution_tasks,omitempty"`

	// healthy
	// Required: true
	Healthy *bool `json:"healthy"`

	// id
	// Required: true
	ID *string `json:"id"`

	// last execute end time
	LastExecuteEndTime *string `json:"last_execute_end_time,omitempty"`

	// last execute status
	// Required: true
	LastExecuteStatus *SnapshotPlanExecuteStatus `json:"last_execute_status"`

	// last execute time
	LastExecuteTime *string `json:"last_execute_time,omitempty"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// logical size bytes
	// Required: true
	LogicalSizeBytes *float64 `json:"logical_size_bytes"`

	// manual delete num
	// Required: true
	ManualDeleteNum *int32 `json:"manual_delete_num"`

	// manual execute num
	// Required: true
	ManualExecuteNum *int32 `json:"manual_execute_num"`

	// mirror
	// Required: true
	Mirror *bool `json:"mirror"`

	// name
	// Required: true
	Name *string `json:"name"`

	// next execute time
	NextExecuteTime *string `json:"next_execute_time,omitempty"`

	// object num
	// Required: true
	ObjectNum *int32 `json:"object_num"`

	// physical size bytes
	// Required: true
	PhysicalSizeBytes *float64 `json:"physical_size_bytes"`

	// remain snapshot num
	// Required: true
	RemainSnapshotNum *int32 `json:"remain_snapshot_num"`

	// snapshot group num
	// Required: true
	SnapshotGroupNum *int32 `json:"snapshot_group_num"`

	// start time
	// Required: true
	StartTime *string `json:"start_time"`

	// status
	// Required: true
	Status *SnapshotPlanStatus `json:"status"`

	// vms
	Vms []*NestedVM `json:"vms,omitempty"`
}

// Validate validates this snapshot plan
func (m *SnapshotPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoDeleteNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoExecuteNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteIntervals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlanType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionTasks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalSizeBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManualDeleteNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManualExecuteNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMirror(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalSizeBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemainSnapshotNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotGroupNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlan) validateAutoDeleteNum(formats strfmt.Registry) error {

	if err := validate.Required("auto_delete_num", "body", m.AutoDeleteNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateAutoExecuteNum(formats strfmt.Registry) error {

	if err := validate.Required("auto_execute_num", "body", m.AutoExecuteNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlan) validateExecuteIntervals(formats strfmt.Registry) error {

	if err := validate.Required("execute_intervals", "body", m.ExecuteIntervals); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateExecutePlanType(formats strfmt.Registry) error {

	if err := validate.Required("execute_plan_type", "body", m.ExecutePlanType); err != nil {
		return err
	}

	if err := validate.Required("execute_plan_type", "body", m.ExecutePlanType); err != nil {
		return err
	}

	if m.ExecutePlanType != nil {
		if err := m.ExecutePlanType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_plan_type")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) validateExecutionTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionTasks) { // not required
		return nil
	}

	for i := 0; i < len(m.ExecutionTasks); i++ {
		if swag.IsZero(m.ExecutionTasks[i]) { // not required
			continue
		}

		if m.ExecutionTasks[i] != nil {
			if err := m.ExecutionTasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("execution_tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("execution_tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlan) validateHealthy(formats strfmt.Registry) error {

	if err := validate.Required("healthy", "body", m.Healthy); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateLastExecuteStatus(formats strfmt.Registry) error {

	if err := validate.Required("last_execute_status", "body", m.LastExecuteStatus); err != nil {
		return err
	}

	if err := validate.Required("last_execute_status", "body", m.LastExecuteStatus); err != nil {
		return err
	}

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateLogicalSizeBytes(formats strfmt.Registry) error {

	if err := validate.Required("logical_size_bytes", "body", m.LogicalSizeBytes); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateManualDeleteNum(formats strfmt.Registry) error {

	if err := validate.Required("manual_delete_num", "body", m.ManualDeleteNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateManualExecuteNum(formats strfmt.Registry) error {

	if err := validate.Required("manual_execute_num", "body", m.ManualExecuteNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateMirror(formats strfmt.Registry) error {

	if err := validate.Required("mirror", "body", m.Mirror); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateObjectNum(formats strfmt.Registry) error {

	if err := validate.Required("object_num", "body", m.ObjectNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validatePhysicalSizeBytes(formats strfmt.Registry) error {

	if err := validate.Required("physical_size_bytes", "body", m.PhysicalSizeBytes); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateRemainSnapshotNum(formats strfmt.Registry) error {

	if err := validate.Required("remain_snapshot_num", "body", m.RemainSnapshotNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateSnapshotGroupNum(formats strfmt.Registry) error {

	if err := validate.Required("snapshot_group_num", "body", m.SnapshotGroupNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlan) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) validateVms(formats strfmt.Registry) error {
	if swag.IsZero(m.Vms) { // not required
		return nil
	}

	for i := 0; i < len(m.Vms); i++ {
		if swag.IsZero(m.Vms[i]) { // not required
			continue
		}

		if m.Vms[i] != nil {
			if err := m.Vms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this snapshot plan based on the context it is used
func (m *SnapshotPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutePlanType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutionTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlan) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlan) contextValidateExecutePlanType(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecutePlanType != nil {
		if err := m.ExecutePlanType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_plan_type")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) contextValidateExecutionTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExecutionTasks); i++ {

		if m.ExecutionTasks[i] != nil {
			if err := m.ExecutionTasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("execution_tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("execution_tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlan) contextValidateLastExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.LastExecuteStatus != nil {
		if err := m.LastExecuteStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlan) contextValidateVms(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vms); i++ {

		if m.Vms[i] != nil {
			if err := m.Vms[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vms" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlan) UnmarshalBinary(b []byte) error {
	var res SnapshotPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
