// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MountNewCreateDisksParams mount new create disks params
//
// swagger:model MountNewCreateDisksParams
type MountNewCreateDisksParams []*MountNewCreateDisksParamsItems0

// Validate validates this mount new create disks params
func (m MountNewCreateDisksParams) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this mount new create disks params based on the context it is used
func (m MountNewCreateDisksParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MountNewCreateDisksParamsItems0 mount new create disks params items0
//
// swagger:model MountNewCreateDisksParamsItems0
type MountNewCreateDisksParamsItems0 struct {

	// boot
	// Required: true
	Boot *float64 `json:"boot"`

	// bus
	// Required: true
	Bus *Bus `json:"bus"`

	// index
	Index float64 `json:"index,omitempty"`

	// key
	Key float64 `json:"key,omitempty"`

	// max bandwidth
	MaxBandwidth float64 `json:"max_bandwidth,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy VMDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`

	// max iops
	MaxIops float64 `json:"max_iops,omitempty"`

	// max iops policy
	MaxIopsPolicy VMDiskIoRestrictType `json:"max_iops_policy,omitempty"`

	// vm volume
	// Required: true
	VMVolume *MountNewCreateDisksParamsItems0VMVolume `json:"vm_volume"`
}

// Validate validates this mount new create disks params items0
func (m *MountNewCreateDisksParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountNewCreateDisksParamsItems0) validateBoot(formats strfmt.Registry) error {

	if err := validate.Required("boot", "body", m.Boot); err != nil {
		return err
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0) validateBus(formats strfmt.Registry) error {

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if m.Bus != nil {
		if err := m.Bus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0) validateMaxBandwidthPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicy) { // not required
		return nil
	}

	if err := m.MaxBandwidthPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_bandwidth_policy")
		}
		return err
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0) validateMaxIopsPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicy) { // not required
		return nil
	}

	if err := m.MaxIopsPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_iops_policy")
		}
		return err
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0) validateVMVolume(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume", "body", m.VMVolume); err != nil {
		return err
	}

	if m.VMVolume != nil {
		if err := m.VMVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mount new create disks params items0 based on the context it is used
func (m *MountNewCreateDisksParamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountNewCreateDisksParamsItems0) contextValidateBus(ctx context.Context, formats strfmt.Registry) error {

	if m.Bus != nil {
		if err := m.Bus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0) contextValidateMaxBandwidthPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaxBandwidthPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_bandwidth_policy")
		}
		return err
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0) contextValidateMaxIopsPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaxIopsPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_iops_policy")
		}
		return err
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0) contextValidateVMVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.VMVolume != nil {
		if err := m.VMVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountNewCreateDisksParamsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountNewCreateDisksParamsItems0) UnmarshalBinary(b []byte) error {
	var res MountNewCreateDisksParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MountNewCreateDisksParamsItems0VMVolume mount new create disks params items0 VM volume
//
// swagger:model MountNewCreateDisksParamsItems0VMVolume
type MountNewCreateDisksParamsItems0VMVolume struct {

	// elf storage policy
	// Required: true
	ElfStoragePolicy *VMVolumeElfStoragePolicyType `json:"elf_storage_policy"`

	// name
	// Required: true
	Name *string `json:"name"`

	// path
	Path string `json:"path,omitempty"`

	// size
	// Required: true
	Size *float64 `json:"size"`
}

// Validate validates this mount new create disks params items0 VM volume
func (m *MountNewCreateDisksParamsItems0VMVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateElfStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountNewCreateDisksParamsItems0VMVolume) validateElfStoragePolicy(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume"+"."+"elf_storage_policy", "body", m.ElfStoragePolicy); err != nil {
		return err
	}

	if err := validate.Required("vm_volume"+"."+"elf_storage_policy", "body", m.ElfStoragePolicy); err != nil {
		return err
	}

	if m.ElfStoragePolicy != nil {
		if err := m.ElfStoragePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume" + "." + "elf_storage_policy")
			}
			return err
		}
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0VMVolume) validateName(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MountNewCreateDisksParamsItems0VMVolume) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume"+"."+"size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mount new create disks params items0 VM volume based on the context it is used
func (m *MountNewCreateDisksParamsItems0VMVolume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateElfStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountNewCreateDisksParamsItems0VMVolume) contextValidateElfStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ElfStoragePolicy != nil {
		if err := m.ElfStoragePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_volume" + "." + "elf_storage_policy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountNewCreateDisksParamsItems0VMVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountNewCreateDisksParamsItems0VMVolume) UnmarshalBinary(b []byte) error {
	var res MountNewCreateDisksParamsItems0VMVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
