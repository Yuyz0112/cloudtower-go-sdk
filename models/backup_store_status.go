// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupStoreStatus backup store status
//
// swagger:model BackupStoreStatus
type BackupStoreStatus string

func NewBackupStoreStatus(value BackupStoreStatus) *BackupStoreStatus {
	v := value
	return &v
}

const (

	// BackupStoreStatusCONNECTED captures enum value "CONNECTED"
	BackupStoreStatusCONNECTED BackupStoreStatus = "CONNECTED"

	// BackupStoreStatusCONNECTING captures enum value "CONNECTING"
	BackupStoreStatusCONNECTING BackupStoreStatus = "CONNECTING"

	// BackupStoreStatusDISABLED captures enum value "DISABLED"
	BackupStoreStatusDISABLED BackupStoreStatus = "DISABLED"

	// BackupStoreStatusERROR captures enum value "ERROR"
	BackupStoreStatusERROR BackupStoreStatus = "ERROR"

	// BackupStoreStatusINIT captures enum value "INIT"
	BackupStoreStatusINIT BackupStoreStatus = "INIT"
)

// for schema
var backupStoreStatusEnum []interface{}

func init() {
	var res []BackupStoreStatus
	if err := json.Unmarshal([]byte(`["CONNECTED","CONNECTING","DISABLED","ERROR","INIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupStoreStatusEnum = append(backupStoreStatusEnum, v)
	}
}

func (m BackupStoreStatus) validateBackupStoreStatusEnum(path, location string, value BackupStoreStatus) error {
	if err := validate.EnumCase(path, location, value, backupStoreStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup store status
func (m BackupStoreStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupStoreStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup store status based on context it is used
func (m BackupStoreStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
