// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LabelWhereInput label where input
// Example: {"AND":"LabelWhereInput[]","NOT":"LabelWhereInput[]","OR":"LabelWhereInput[]","cluster_num":0,"cluster_num_gt":0,"cluster_num_gte":0,"cluster_num_in":[0],"cluster_num_lt":0,"cluster_num_lte":0,"cluster_num_not":0,"cluster_num_not_in":[0],"clusters_every":"ClusterWhereInput","clusters_none":"ClusterWhereInput","clusters_some":"ClusterWhereInput","consistency_group_num":0,"consistency_group_num_gt":0,"consistency_group_num_gte":0,"consistency_group_num_in":[0],"consistency_group_num_lt":0,"consistency_group_num_lte":0,"consistency_group_num_not":0,"consistency_group_num_not_in":[0],"consistency_group_snapshot_num":0,"consistency_group_snapshot_num_gt":0,"consistency_group_snapshot_num_gte":0,"consistency_group_snapshot_num_in":[0],"consistency_group_snapshot_num_lt":0,"consistency_group_snapshot_num_lte":0,"consistency_group_snapshot_num_not":0,"consistency_group_snapshot_num_not_in":[0],"consistency_group_snapshots_every":"ConsistencyGroupSnapshotWhereInput","consistency_group_snapshots_none":"ConsistencyGroupSnapshotWhereInput","consistency_group_snapshots_some":"ConsistencyGroupSnapshotWhereInput","consistency_groups_every":"ConsistencyGroupWhereInput","consistency_groups_none":"ConsistencyGroupWhereInput","consistency_groups_some":"ConsistencyGroupWhereInput","content_library_image_num":0,"content_library_image_num_gt":0,"content_library_image_num_gte":0,"content_library_image_num_in":[0],"content_library_image_num_lt":0,"content_library_image_num_lte":0,"content_library_image_num_not":0,"content_library_image_num_not_in":[0],"content_library_images_every":"ContentLibraryImageWhereInput","content_library_images_none":"ContentLibraryImageWhereInput","content_library_images_some":"ContentLibraryImageWhereInput","content_library_vm_template_num":0,"content_library_vm_template_num_gt":0,"content_library_vm_template_num_gte":0,"content_library_vm_template_num_in":[0],"content_library_vm_template_num_lt":0,"content_library_vm_template_num_lte":0,"content_library_vm_template_num_not":0,"content_library_vm_template_num_not_in":[0],"content_library_vm_templates_every":"ContentLibraryVmTemplateWhereInput","content_library_vm_templates_none":"ContentLibraryVmTemplateWhereInput","content_library_vm_templates_some":"ContentLibraryVmTemplateWhereInput","createdAt":"string","createdAt_gt":"string","createdAt_gte":"string","createdAt_in":["string"],"createdAt_lt":"string","createdAt_lte":"string","createdAt_not":"string","createdAt_not_in":["string"],"datacenter_num":0,"datacenter_num_gt":0,"datacenter_num_gte":0,"datacenter_num_in":[0],"datacenter_num_lt":0,"datacenter_num_lte":0,"datacenter_num_not":0,"datacenter_num_not_in":[0],"datacenters_every":"DatacenterWhereInput","datacenters_none":"DatacenterWhereInput","datacenters_some":"DatacenterWhereInput","disk_num":0,"disk_num_gt":0,"disk_num_gte":0,"disk_num_in":[0],"disk_num_lt":0,"disk_num_lte":0,"disk_num_not":0,"disk_num_not_in":[0],"disks_every":"DiskWhereInput","disks_none":"DiskWhereInput","disks_some":"DiskWhereInput","elf_image_num":0,"elf_image_num_gt":0,"elf_image_num_gte":0,"elf_image_num_in":[0],"elf_image_num_lt":0,"elf_image_num_lte":0,"elf_image_num_not":0,"elf_image_num_not_in":[0],"elf_images_every":"ElfImageWhereInput","elf_images_none":"ElfImageWhereInput","elf_images_some":"ElfImageWhereInput","host_num":0,"host_num_gt":0,"host_num_gte":0,"host_num_in":[0],"host_num_lt":0,"host_num_lte":0,"host_num_not":0,"host_num_not_in":[0],"hosts_every":"HostWhereInput","hosts_none":"HostWhereInput","hosts_some":"HostWhereInput","id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","iscsi_lun_num":0,"iscsi_lun_num_gt":0,"iscsi_lun_num_gte":0,"iscsi_lun_num_in":[0],"iscsi_lun_num_lt":0,"iscsi_lun_num_lte":0,"iscsi_lun_num_not":0,"iscsi_lun_num_not_in":[0],"iscsi_lun_snapshot_num":0,"iscsi_lun_snapshot_num_gt":0,"iscsi_lun_snapshot_num_gte":0,"iscsi_lun_snapshot_num_in":[0],"iscsi_lun_snapshot_num_lt":0,"iscsi_lun_snapshot_num_lte":0,"iscsi_lun_snapshot_num_not":0,"iscsi_lun_snapshot_num_not_in":[0],"iscsi_lun_snapshots_every":"IscsiLunSnapshotWhereInput","iscsi_lun_snapshots_none":"IscsiLunSnapshotWhereInput","iscsi_lun_snapshots_some":"IscsiLunSnapshotWhereInput","iscsi_luns_every":"IscsiLunWhereInput","iscsi_luns_none":"IscsiLunWhereInput","iscsi_luns_some":"IscsiLunWhereInput","iscsi_target_num":0,"iscsi_target_num_gt":0,"iscsi_target_num_gte":0,"iscsi_target_num_in":[0],"iscsi_target_num_lt":0,"iscsi_target_num_lte":0,"iscsi_target_num_not":0,"iscsi_target_num_not_in":[0],"iscsi_targets_every":"IscsiTargetWhereInput","iscsi_targets_none":"IscsiTargetWhereInput","iscsi_targets_some":"IscsiTargetWhereInput","isolation_policies_every":"IsolationPolicyWhereInput","isolation_policies_none":"IsolationPolicyWhereInput","isolation_policies_some":"IsolationPolicyWhereInput","isolation_policy_num":0,"isolation_policy_num_gt":0,"isolation_policy_num_gte":0,"isolation_policy_num_in":[0],"isolation_policy_num_lt":0,"isolation_policy_num_lte":0,"isolation_policy_num_not":0,"isolation_policy_num_not_in":[0],"key":"string","key_contains":"string","key_ends_with":"string","key_gt":"string","key_gte":"string","key_in":["string"],"key_lt":"string","key_lte":"string","key_not":"string","key_not_contains":"string","key_not_ends_with":"string","key_not_in":["string"],"key_not_starts_with":"string","key_starts_with":"string","namespace_group_num":0,"namespace_group_num_gt":0,"namespace_group_num_gte":0,"namespace_group_num_in":[0],"namespace_group_num_lt":0,"namespace_group_num_lte":0,"namespace_group_num_not":0,"namespace_group_num_not_in":[0],"namespace_groups_every":"NamespaceGroupWhereInput","namespace_groups_none":"NamespaceGroupWhereInput","namespace_groups_some":"NamespaceGroupWhereInput","nfs_export_num":0,"nfs_export_num_gt":0,"nfs_export_num_gte":0,"nfs_export_num_in":[0],"nfs_export_num_lt":0,"nfs_export_num_lte":0,"nfs_export_num_not":0,"nfs_export_num_not_in":[0],"nfs_exports_every":"NfsExportWhereInput","nfs_exports_none":"NfsExportWhereInput","nfs_exports_some":"NfsExportWhereInput","nfs_inode_num":0,"nfs_inode_num_gt":0,"nfs_inode_num_gte":0,"nfs_inode_num_in":[0],"nfs_inode_num_lt":0,"nfs_inode_num_lte":0,"nfs_inode_num_not":0,"nfs_inode_num_not_in":[0],"nfs_inodes_every":"NfsInodeWhereInput","nfs_inodes_none":"NfsInodeWhereInput","nfs_inodes_some":"NfsInodeWhereInput","nic_num":0,"nic_num_gt":0,"nic_num_gte":0,"nic_num_in":[0],"nic_num_lt":0,"nic_num_lte":0,"nic_num_not":0,"nic_num_not_in":[0],"nics_every":"NicWhereInput","nics_none":"NicWhereInput","nics_some":"NicWhereInput","nvmf_namespace_num":0,"nvmf_namespace_num_gt":0,"nvmf_namespace_num_gte":0,"nvmf_namespace_num_in":[0],"nvmf_namespace_num_lt":0,"nvmf_namespace_num_lte":0,"nvmf_namespace_num_not":0,"nvmf_namespace_num_not_in":[0],"nvmf_namespace_snapshot_num":0,"nvmf_namespace_snapshot_num_gt":0,"nvmf_namespace_snapshot_num_gte":0,"nvmf_namespace_snapshot_num_in":[0],"nvmf_namespace_snapshot_num_lt":0,"nvmf_namespace_snapshot_num_lte":0,"nvmf_namespace_snapshot_num_not":0,"nvmf_namespace_snapshot_num_not_in":[0],"nvmf_namespace_snapshots_every":"NvmfNamespaceSnapshotWhereInput","nvmf_namespace_snapshots_none":"NvmfNamespaceSnapshotWhereInput","nvmf_namespace_snapshots_some":"NvmfNamespaceSnapshotWhereInput","nvmf_namespaces_every":"NvmfNamespaceWhereInput","nvmf_namespaces_none":"NvmfNamespaceWhereInput","nvmf_namespaces_some":"NvmfNamespaceWhereInput","nvmf_subsystem_num":0,"nvmf_subsystem_num_gt":0,"nvmf_subsystem_num_gte":0,"nvmf_subsystem_num_in":[0],"nvmf_subsystem_num_lt":0,"nvmf_subsystem_num_lte":0,"nvmf_subsystem_num_not":0,"nvmf_subsystem_num_not_in":[0],"nvmf_subsystems_every":"NvmfSubsystemWhereInput","nvmf_subsystems_none":"NvmfSubsystemWhereInput","nvmf_subsystems_some":"NvmfSubsystemWhereInput","security_policies_every":"SecurityPolicyWhereInput","security_policies_none":"SecurityPolicyWhereInput","security_policies_some":"SecurityPolicyWhereInput","security_policy_num":0,"security_policy_num_gt":0,"security_policy_num_gte":0,"security_policy_num_in":[0],"security_policy_num_lt":0,"security_policy_num_lte":0,"security_policy_num_not":0,"security_policy_num_not_in":[0],"system_vlan_num":0,"system_vlan_num_gt":0,"system_vlan_num_gte":0,"system_vlan_num_in":[0],"system_vlan_num_lt":0,"system_vlan_num_lte":0,"system_vlan_num_not":0,"system_vlan_num_not_in":[0],"total_num":0,"total_num_gt":0,"total_num_gte":0,"total_num_in":[0],"total_num_lt":0,"total_num_lte":0,"total_num_not":0,"total_num_not_in":[0],"value":"string","value_contains":"string","value_ends_with":"string","value_gt":"string","value_gte":"string","value_in":["string"],"value_lt":"string","value_lte":"string","value_not":"string","value_not_contains":"string","value_not_ends_with":"string","value_not_in":["string"],"value_not_starts_with":"string","value_starts_with":"string","vds_num":0,"vds_num_gt":0,"vds_num_gte":0,"vds_num_in":[0],"vds_num_lt":0,"vds_num_lte":0,"vds_num_not":0,"vds_num_not_in":[0],"vdses_every":"VdsWhereInput","vdses_none":"VdsWhereInput","vdses_some":"VdsWhereInput","vlans_every":"VlanWhereInput","vlans_none":"VlanWhereInput","vlans_some":"VlanWhereInput","vm_num":0,"vm_num_gt":0,"vm_num_gte":0,"vm_num_in":[0],"vm_num_lt":0,"vm_num_lte":0,"vm_num_not":0,"vm_num_not_in":[0],"vm_snapshot_num":0,"vm_snapshot_num_gt":0,"vm_snapshot_num_gte":0,"vm_snapshot_num_in":[0],"vm_snapshot_num_lt":0,"vm_snapshot_num_lte":0,"vm_snapshot_num_not":0,"vm_snapshot_num_not_in":[0],"vm_snapshots_every":"VmSnapshotWhereInput","vm_snapshots_none":"VmSnapshotWhereInput","vm_snapshots_some":"VmSnapshotWhereInput","vm_template_num":0,"vm_template_num_gt":0,"vm_template_num_gte":0,"vm_template_num_in":[0],"vm_template_num_lt":0,"vm_template_num_lte":0,"vm_template_num_not":0,"vm_template_num_not_in":[0],"vm_templates_every":"VmTemplateWhereInput","vm_templates_none":"VmTemplateWhereInput","vm_templates_some":"VmTemplateWhereInput","vm_vlan_num":0,"vm_vlan_num_gt":0,"vm_vlan_num_gte":0,"vm_vlan_num_in":[0],"vm_vlan_num_lt":0,"vm_vlan_num_lte":0,"vm_vlan_num_not":0,"vm_vlan_num_not_in":[0],"vm_volume_num":0,"vm_volume_num_gt":0,"vm_volume_num_gte":0,"vm_volume_num_in":[0],"vm_volume_num_lt":0,"vm_volume_num_lte":0,"vm_volume_num_not":0,"vm_volume_num_not_in":[0],"vm_volumes_every":"VmVolumeWhereInput","vm_volumes_none":"VmVolumeWhereInput","vm_volumes_some":"VmVolumeWhereInput","vms_every":"VmWhereInput","vms_none":"VmWhereInput","vms_some":"VmWhereInput"}
//
// swagger:model LabelWhereInput
type LabelWhereInput struct {

	// a n d
	AND []*LabelWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*LabelWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*LabelWhereInput `json:"OR,omitempty"`

	// cluster num
	ClusterNum *int32 `json:"cluster_num,omitempty"`

	// cluster num gt
	ClusterNumGt *int32 `json:"cluster_num_gt,omitempty"`

	// cluster num gte
	ClusterNumGte *int32 `json:"cluster_num_gte,omitempty"`

	// cluster num in
	ClusterNumIn []int32 `json:"cluster_num_in,omitempty"`

	// cluster num lt
	ClusterNumLt *int32 `json:"cluster_num_lt,omitempty"`

	// cluster num lte
	ClusterNumLte *int32 `json:"cluster_num_lte,omitempty"`

	// cluster num not
	ClusterNumNot *int32 `json:"cluster_num_not,omitempty"`

	// cluster num not in
	ClusterNumNotIn []int32 `json:"cluster_num_not_in,omitempty"`

	// clusters every
	ClustersEvery struct {
		ClusterWhereInput
	} `json:"clusters_every,omitempty"`

	// clusters none
	ClustersNone struct {
		ClusterWhereInput
	} `json:"clusters_none,omitempty"`

	// clusters some
	ClustersSome struct {
		ClusterWhereInput
	} `json:"clusters_some,omitempty"`

	// consistency group num
	ConsistencyGroupNum *int32 `json:"consistency_group_num,omitempty"`

	// consistency group num gt
	ConsistencyGroupNumGt *int32 `json:"consistency_group_num_gt,omitempty"`

	// consistency group num gte
	ConsistencyGroupNumGte *int32 `json:"consistency_group_num_gte,omitempty"`

	// consistency group num in
	ConsistencyGroupNumIn []int32 `json:"consistency_group_num_in,omitempty"`

	// consistency group num lt
	ConsistencyGroupNumLt *int32 `json:"consistency_group_num_lt,omitempty"`

	// consistency group num lte
	ConsistencyGroupNumLte *int32 `json:"consistency_group_num_lte,omitempty"`

	// consistency group num not
	ConsistencyGroupNumNot *int32 `json:"consistency_group_num_not,omitempty"`

	// consistency group num not in
	ConsistencyGroupNumNotIn []int32 `json:"consistency_group_num_not_in,omitempty"`

	// consistency group snapshot num
	ConsistencyGroupSnapshotNum *int32 `json:"consistency_group_snapshot_num,omitempty"`

	// consistency group snapshot num gt
	ConsistencyGroupSnapshotNumGt *int32 `json:"consistency_group_snapshot_num_gt,omitempty"`

	// consistency group snapshot num gte
	ConsistencyGroupSnapshotNumGte *int32 `json:"consistency_group_snapshot_num_gte,omitempty"`

	// consistency group snapshot num in
	ConsistencyGroupSnapshotNumIn []int32 `json:"consistency_group_snapshot_num_in,omitempty"`

	// consistency group snapshot num lt
	ConsistencyGroupSnapshotNumLt *int32 `json:"consistency_group_snapshot_num_lt,omitempty"`

	// consistency group snapshot num lte
	ConsistencyGroupSnapshotNumLte *int32 `json:"consistency_group_snapshot_num_lte,omitempty"`

	// consistency group snapshot num not
	ConsistencyGroupSnapshotNumNot *int32 `json:"consistency_group_snapshot_num_not,omitempty"`

	// consistency group snapshot num not in
	ConsistencyGroupSnapshotNumNotIn []int32 `json:"consistency_group_snapshot_num_not_in,omitempty"`

	// consistency group snapshots every
	ConsistencyGroupSnapshotsEvery struct {
		ConsistencyGroupSnapshotWhereInput
	} `json:"consistency_group_snapshots_every,omitempty"`

	// consistency group snapshots none
	ConsistencyGroupSnapshotsNone struct {
		ConsistencyGroupSnapshotWhereInput
	} `json:"consistency_group_snapshots_none,omitempty"`

	// consistency group snapshots some
	ConsistencyGroupSnapshotsSome struct {
		ConsistencyGroupSnapshotWhereInput
	} `json:"consistency_group_snapshots_some,omitempty"`

	// consistency groups every
	ConsistencyGroupsEvery struct {
		ConsistencyGroupWhereInput
	} `json:"consistency_groups_every,omitempty"`

	// consistency groups none
	ConsistencyGroupsNone struct {
		ConsistencyGroupWhereInput
	} `json:"consistency_groups_none,omitempty"`

	// consistency groups some
	ConsistencyGroupsSome struct {
		ConsistencyGroupWhereInput
	} `json:"consistency_groups_some,omitempty"`

	// content library image num
	ContentLibraryImageNum *int32 `json:"content_library_image_num,omitempty"`

	// content library image num gt
	ContentLibraryImageNumGt *int32 `json:"content_library_image_num_gt,omitempty"`

	// content library image num gte
	ContentLibraryImageNumGte *int32 `json:"content_library_image_num_gte,omitempty"`

	// content library image num in
	ContentLibraryImageNumIn []int32 `json:"content_library_image_num_in,omitempty"`

	// content library image num lt
	ContentLibraryImageNumLt *int32 `json:"content_library_image_num_lt,omitempty"`

	// content library image num lte
	ContentLibraryImageNumLte *int32 `json:"content_library_image_num_lte,omitempty"`

	// content library image num not
	ContentLibraryImageNumNot *int32 `json:"content_library_image_num_not,omitempty"`

	// content library image num not in
	ContentLibraryImageNumNotIn []int32 `json:"content_library_image_num_not_in,omitempty"`

	// content library images every
	ContentLibraryImagesEvery struct {
		ContentLibraryImageWhereInput
	} `json:"content_library_images_every,omitempty"`

	// content library images none
	ContentLibraryImagesNone struct {
		ContentLibraryImageWhereInput
	} `json:"content_library_images_none,omitempty"`

	// content library images some
	ContentLibraryImagesSome struct {
		ContentLibraryImageWhereInput
	} `json:"content_library_images_some,omitempty"`

	// content library vm template num
	ContentLibraryVMTemplateNum *int32 `json:"content_library_vm_template_num,omitempty"`

	// content library vm template num gt
	ContentLibraryVMTemplateNumGt *int32 `json:"content_library_vm_template_num_gt,omitempty"`

	// content library vm template num gte
	ContentLibraryVMTemplateNumGte *int32 `json:"content_library_vm_template_num_gte,omitempty"`

	// content library vm template num in
	ContentLibraryVMTemplateNumIn []int32 `json:"content_library_vm_template_num_in,omitempty"`

	// content library vm template num lt
	ContentLibraryVMTemplateNumLt *int32 `json:"content_library_vm_template_num_lt,omitempty"`

	// content library vm template num lte
	ContentLibraryVMTemplateNumLte *int32 `json:"content_library_vm_template_num_lte,omitempty"`

	// content library vm template num not
	ContentLibraryVMTemplateNumNot *int32 `json:"content_library_vm_template_num_not,omitempty"`

	// content library vm template num not in
	ContentLibraryVMTemplateNumNotIn []int32 `json:"content_library_vm_template_num_not_in,omitempty"`

	// content library vm templates every
	ContentLibraryVMTemplatesEvery struct {
		ContentLibraryVMTemplateWhereInput
	} `json:"content_library_vm_templates_every,omitempty"`

	// content library vm templates none
	ContentLibraryVMTemplatesNone struct {
		ContentLibraryVMTemplateWhereInput
	} `json:"content_library_vm_templates_none,omitempty"`

	// content library vm templates some
	ContentLibraryVMTemplatesSome struct {
		ContentLibraryVMTemplateWhereInput
	} `json:"content_library_vm_templates_some,omitempty"`

	// created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// created at gt
	CreatedAtGt *string `json:"createdAt_gt,omitempty"`

	// created at gte
	CreatedAtGte *string `json:"createdAt_gte,omitempty"`

	// created at in
	CreatedAtIn []string `json:"createdAt_in,omitempty"`

	// created at lt
	CreatedAtLt *string `json:"createdAt_lt,omitempty"`

	// created at lte
	CreatedAtLte *string `json:"createdAt_lte,omitempty"`

	// created at not
	CreatedAtNot *string `json:"createdAt_not,omitempty"`

	// created at not in
	CreatedAtNotIn []string `json:"createdAt_not_in,omitempty"`

	// datacenter num
	DatacenterNum *int32 `json:"datacenter_num,omitempty"`

	// datacenter num gt
	DatacenterNumGt *int32 `json:"datacenter_num_gt,omitempty"`

	// datacenter num gte
	DatacenterNumGte *int32 `json:"datacenter_num_gte,omitempty"`

	// datacenter num in
	DatacenterNumIn []int32 `json:"datacenter_num_in,omitempty"`

	// datacenter num lt
	DatacenterNumLt *int32 `json:"datacenter_num_lt,omitempty"`

	// datacenter num lte
	DatacenterNumLte *int32 `json:"datacenter_num_lte,omitempty"`

	// datacenter num not
	DatacenterNumNot *int32 `json:"datacenter_num_not,omitempty"`

	// datacenter num not in
	DatacenterNumNotIn []int32 `json:"datacenter_num_not_in,omitempty"`

	// datacenters every
	DatacentersEvery struct {
		DatacenterWhereInput
	} `json:"datacenters_every,omitempty"`

	// datacenters none
	DatacentersNone struct {
		DatacenterWhereInput
	} `json:"datacenters_none,omitempty"`

	// datacenters some
	DatacentersSome struct {
		DatacenterWhereInput
	} `json:"datacenters_some,omitempty"`

	// disk num
	DiskNum *int32 `json:"disk_num,omitempty"`

	// disk num gt
	DiskNumGt *int32 `json:"disk_num_gt,omitempty"`

	// disk num gte
	DiskNumGte *int32 `json:"disk_num_gte,omitempty"`

	// disk num in
	DiskNumIn []int32 `json:"disk_num_in,omitempty"`

	// disk num lt
	DiskNumLt *int32 `json:"disk_num_lt,omitempty"`

	// disk num lte
	DiskNumLte *int32 `json:"disk_num_lte,omitempty"`

	// disk num not
	DiskNumNot *int32 `json:"disk_num_not,omitempty"`

	// disk num not in
	DiskNumNotIn []int32 `json:"disk_num_not_in,omitempty"`

	// disks every
	DisksEvery struct {
		DiskWhereInput
	} `json:"disks_every,omitempty"`

	// disks none
	DisksNone struct {
		DiskWhereInput
	} `json:"disks_none,omitempty"`

	// disks some
	DisksSome struct {
		DiskWhereInput
	} `json:"disks_some,omitempty"`

	// elf image num
	ElfImageNum *int32 `json:"elf_image_num,omitempty"`

	// elf image num gt
	ElfImageNumGt *int32 `json:"elf_image_num_gt,omitempty"`

	// elf image num gte
	ElfImageNumGte *int32 `json:"elf_image_num_gte,omitempty"`

	// elf image num in
	ElfImageNumIn []int32 `json:"elf_image_num_in,omitempty"`

	// elf image num lt
	ElfImageNumLt *int32 `json:"elf_image_num_lt,omitempty"`

	// elf image num lte
	ElfImageNumLte *int32 `json:"elf_image_num_lte,omitempty"`

	// elf image num not
	ElfImageNumNot *int32 `json:"elf_image_num_not,omitempty"`

	// elf image num not in
	ElfImageNumNotIn []int32 `json:"elf_image_num_not_in,omitempty"`

	// elf images every
	ElfImagesEvery struct {
		ElfImageWhereInput
	} `json:"elf_images_every,omitempty"`

	// elf images none
	ElfImagesNone struct {
		ElfImageWhereInput
	} `json:"elf_images_none,omitempty"`

	// elf images some
	ElfImagesSome struct {
		ElfImageWhereInput
	} `json:"elf_images_some,omitempty"`

	// host num
	HostNum *int32 `json:"host_num,omitempty"`

	// host num gt
	HostNumGt *int32 `json:"host_num_gt,omitempty"`

	// host num gte
	HostNumGte *int32 `json:"host_num_gte,omitempty"`

	// host num in
	HostNumIn []int32 `json:"host_num_in,omitempty"`

	// host num lt
	HostNumLt *int32 `json:"host_num_lt,omitempty"`

	// host num lte
	HostNumLte *int32 `json:"host_num_lte,omitempty"`

	// host num not
	HostNumNot *int32 `json:"host_num_not,omitempty"`

	// host num not in
	HostNumNotIn []int32 `json:"host_num_not_in,omitempty"`

	// hosts every
	HostsEvery struct {
		HostWhereInput
	} `json:"hosts_every,omitempty"`

	// hosts none
	HostsNone struct {
		HostWhereInput
	} `json:"hosts_none,omitempty"`

	// hosts some
	HostsSome struct {
		HostWhereInput
	} `json:"hosts_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// iscsi lun num
	IscsiLunNum *int32 `json:"iscsi_lun_num,omitempty"`

	// iscsi lun num gt
	IscsiLunNumGt *int32 `json:"iscsi_lun_num_gt,omitempty"`

	// iscsi lun num gte
	IscsiLunNumGte *int32 `json:"iscsi_lun_num_gte,omitempty"`

	// iscsi lun num in
	IscsiLunNumIn []int32 `json:"iscsi_lun_num_in,omitempty"`

	// iscsi lun num lt
	IscsiLunNumLt *int32 `json:"iscsi_lun_num_lt,omitempty"`

	// iscsi lun num lte
	IscsiLunNumLte *int32 `json:"iscsi_lun_num_lte,omitempty"`

	// iscsi lun num not
	IscsiLunNumNot *int32 `json:"iscsi_lun_num_not,omitempty"`

	// iscsi lun num not in
	IscsiLunNumNotIn []int32 `json:"iscsi_lun_num_not_in,omitempty"`

	// iscsi lun snapshot num
	IscsiLunSnapshotNum *int32 `json:"iscsi_lun_snapshot_num,omitempty"`

	// iscsi lun snapshot num gt
	IscsiLunSnapshotNumGt *int32 `json:"iscsi_lun_snapshot_num_gt,omitempty"`

	// iscsi lun snapshot num gte
	IscsiLunSnapshotNumGte *int32 `json:"iscsi_lun_snapshot_num_gte,omitempty"`

	// iscsi lun snapshot num in
	IscsiLunSnapshotNumIn []int32 `json:"iscsi_lun_snapshot_num_in,omitempty"`

	// iscsi lun snapshot num lt
	IscsiLunSnapshotNumLt *int32 `json:"iscsi_lun_snapshot_num_lt,omitempty"`

	// iscsi lun snapshot num lte
	IscsiLunSnapshotNumLte *int32 `json:"iscsi_lun_snapshot_num_lte,omitempty"`

	// iscsi lun snapshot num not
	IscsiLunSnapshotNumNot *int32 `json:"iscsi_lun_snapshot_num_not,omitempty"`

	// iscsi lun snapshot num not in
	IscsiLunSnapshotNumNotIn []int32 `json:"iscsi_lun_snapshot_num_not_in,omitempty"`

	// iscsi lun snapshots every
	IscsiLunSnapshotsEvery struct {
		IscsiLunSnapshotWhereInput
	} `json:"iscsi_lun_snapshots_every,omitempty"`

	// iscsi lun snapshots none
	IscsiLunSnapshotsNone struct {
		IscsiLunSnapshotWhereInput
	} `json:"iscsi_lun_snapshots_none,omitempty"`

	// iscsi lun snapshots some
	IscsiLunSnapshotsSome struct {
		IscsiLunSnapshotWhereInput
	} `json:"iscsi_lun_snapshots_some,omitempty"`

	// iscsi luns every
	IscsiLunsEvery struct {
		IscsiLunWhereInput
	} `json:"iscsi_luns_every,omitempty"`

	// iscsi luns none
	IscsiLunsNone struct {
		IscsiLunWhereInput
	} `json:"iscsi_luns_none,omitempty"`

	// iscsi luns some
	IscsiLunsSome struct {
		IscsiLunWhereInput
	} `json:"iscsi_luns_some,omitempty"`

	// iscsi target num
	IscsiTargetNum *int32 `json:"iscsi_target_num,omitempty"`

	// iscsi target num gt
	IscsiTargetNumGt *int32 `json:"iscsi_target_num_gt,omitempty"`

	// iscsi target num gte
	IscsiTargetNumGte *int32 `json:"iscsi_target_num_gte,omitempty"`

	// iscsi target num in
	IscsiTargetNumIn []int32 `json:"iscsi_target_num_in,omitempty"`

	// iscsi target num lt
	IscsiTargetNumLt *int32 `json:"iscsi_target_num_lt,omitempty"`

	// iscsi target num lte
	IscsiTargetNumLte *int32 `json:"iscsi_target_num_lte,omitempty"`

	// iscsi target num not
	IscsiTargetNumNot *int32 `json:"iscsi_target_num_not,omitempty"`

	// iscsi target num not in
	IscsiTargetNumNotIn []int32 `json:"iscsi_target_num_not_in,omitempty"`

	// iscsi targets every
	IscsiTargetsEvery struct {
		IscsiTargetWhereInput
	} `json:"iscsi_targets_every,omitempty"`

	// iscsi targets none
	IscsiTargetsNone struct {
		IscsiTargetWhereInput
	} `json:"iscsi_targets_none,omitempty"`

	// iscsi targets some
	IscsiTargetsSome struct {
		IscsiTargetWhereInput
	} `json:"iscsi_targets_some,omitempty"`

	// isolation policies every
	IsolationPoliciesEvery struct {
		IsolationPolicyWhereInput
	} `json:"isolation_policies_every,omitempty"`

	// isolation policies none
	IsolationPoliciesNone struct {
		IsolationPolicyWhereInput
	} `json:"isolation_policies_none,omitempty"`

	// isolation policies some
	IsolationPoliciesSome struct {
		IsolationPolicyWhereInput
	} `json:"isolation_policies_some,omitempty"`

	// isolation policy num
	IsolationPolicyNum *int32 `json:"isolation_policy_num,omitempty"`

	// isolation policy num gt
	IsolationPolicyNumGt *int32 `json:"isolation_policy_num_gt,omitempty"`

	// isolation policy num gte
	IsolationPolicyNumGte *int32 `json:"isolation_policy_num_gte,omitempty"`

	// isolation policy num in
	IsolationPolicyNumIn []int32 `json:"isolation_policy_num_in,omitempty"`

	// isolation policy num lt
	IsolationPolicyNumLt *int32 `json:"isolation_policy_num_lt,omitempty"`

	// isolation policy num lte
	IsolationPolicyNumLte *int32 `json:"isolation_policy_num_lte,omitempty"`

	// isolation policy num not
	IsolationPolicyNumNot *int32 `json:"isolation_policy_num_not,omitempty"`

	// isolation policy num not in
	IsolationPolicyNumNotIn []int32 `json:"isolation_policy_num_not_in,omitempty"`

	// key
	Key *string `json:"key,omitempty"`

	// key contains
	KeyContains *string `json:"key_contains,omitempty"`

	// key ends with
	KeyEndsWith *string `json:"key_ends_with,omitempty"`

	// key gt
	KeyGt *string `json:"key_gt,omitempty"`

	// key gte
	KeyGte *string `json:"key_gte,omitempty"`

	// key in
	KeyIn []string `json:"key_in,omitempty"`

	// key lt
	KeyLt *string `json:"key_lt,omitempty"`

	// key lte
	KeyLte *string `json:"key_lte,omitempty"`

	// key not
	KeyNot *string `json:"key_not,omitempty"`

	// key not contains
	KeyNotContains *string `json:"key_not_contains,omitempty"`

	// key not ends with
	KeyNotEndsWith *string `json:"key_not_ends_with,omitempty"`

	// key not in
	KeyNotIn []string `json:"key_not_in,omitempty"`

	// key not starts with
	KeyNotStartsWith *string `json:"key_not_starts_with,omitempty"`

	// key starts with
	KeyStartsWith *string `json:"key_starts_with,omitempty"`

	// namespace group num
	NamespaceGroupNum *int32 `json:"namespace_group_num,omitempty"`

	// namespace group num gt
	NamespaceGroupNumGt *int32 `json:"namespace_group_num_gt,omitempty"`

	// namespace group num gte
	NamespaceGroupNumGte *int32 `json:"namespace_group_num_gte,omitempty"`

	// namespace group num in
	NamespaceGroupNumIn []int32 `json:"namespace_group_num_in,omitempty"`

	// namespace group num lt
	NamespaceGroupNumLt *int32 `json:"namespace_group_num_lt,omitempty"`

	// namespace group num lte
	NamespaceGroupNumLte *int32 `json:"namespace_group_num_lte,omitempty"`

	// namespace group num not
	NamespaceGroupNumNot *int32 `json:"namespace_group_num_not,omitempty"`

	// namespace group num not in
	NamespaceGroupNumNotIn []int32 `json:"namespace_group_num_not_in,omitempty"`

	// namespace groups every
	NamespaceGroupsEvery struct {
		NamespaceGroupWhereInput
	} `json:"namespace_groups_every,omitempty"`

	// namespace groups none
	NamespaceGroupsNone struct {
		NamespaceGroupWhereInput
	} `json:"namespace_groups_none,omitempty"`

	// namespace groups some
	NamespaceGroupsSome struct {
		NamespaceGroupWhereInput
	} `json:"namespace_groups_some,omitempty"`

	// nfs export num
	NfsExportNum *int32 `json:"nfs_export_num,omitempty"`

	// nfs export num gt
	NfsExportNumGt *int32 `json:"nfs_export_num_gt,omitempty"`

	// nfs export num gte
	NfsExportNumGte *int32 `json:"nfs_export_num_gte,omitempty"`

	// nfs export num in
	NfsExportNumIn []int32 `json:"nfs_export_num_in,omitempty"`

	// nfs export num lt
	NfsExportNumLt *int32 `json:"nfs_export_num_lt,omitempty"`

	// nfs export num lte
	NfsExportNumLte *int32 `json:"nfs_export_num_lte,omitempty"`

	// nfs export num not
	NfsExportNumNot *int32 `json:"nfs_export_num_not,omitempty"`

	// nfs export num not in
	NfsExportNumNotIn []int32 `json:"nfs_export_num_not_in,omitempty"`

	// nfs exports every
	NfsExportsEvery struct {
		NfsExportWhereInput
	} `json:"nfs_exports_every,omitempty"`

	// nfs exports none
	NfsExportsNone struct {
		NfsExportWhereInput
	} `json:"nfs_exports_none,omitempty"`

	// nfs exports some
	NfsExportsSome struct {
		NfsExportWhereInput
	} `json:"nfs_exports_some,omitempty"`

	// nfs inode num
	NfsInodeNum *int32 `json:"nfs_inode_num,omitempty"`

	// nfs inode num gt
	NfsInodeNumGt *int32 `json:"nfs_inode_num_gt,omitempty"`

	// nfs inode num gte
	NfsInodeNumGte *int32 `json:"nfs_inode_num_gte,omitempty"`

	// nfs inode num in
	NfsInodeNumIn []int32 `json:"nfs_inode_num_in,omitempty"`

	// nfs inode num lt
	NfsInodeNumLt *int32 `json:"nfs_inode_num_lt,omitempty"`

	// nfs inode num lte
	NfsInodeNumLte *int32 `json:"nfs_inode_num_lte,omitempty"`

	// nfs inode num not
	NfsInodeNumNot *int32 `json:"nfs_inode_num_not,omitempty"`

	// nfs inode num not in
	NfsInodeNumNotIn []int32 `json:"nfs_inode_num_not_in,omitempty"`

	// nfs inodes every
	NfsInodesEvery struct {
		NfsInodeWhereInput
	} `json:"nfs_inodes_every,omitempty"`

	// nfs inodes none
	NfsInodesNone struct {
		NfsInodeWhereInput
	} `json:"nfs_inodes_none,omitempty"`

	// nfs inodes some
	NfsInodesSome struct {
		NfsInodeWhereInput
	} `json:"nfs_inodes_some,omitempty"`

	// nic num
	NicNum *int32 `json:"nic_num,omitempty"`

	// nic num gt
	NicNumGt *int32 `json:"nic_num_gt,omitempty"`

	// nic num gte
	NicNumGte *int32 `json:"nic_num_gte,omitempty"`

	// nic num in
	NicNumIn []int32 `json:"nic_num_in,omitempty"`

	// nic num lt
	NicNumLt *int32 `json:"nic_num_lt,omitempty"`

	// nic num lte
	NicNumLte *int32 `json:"nic_num_lte,omitempty"`

	// nic num not
	NicNumNot *int32 `json:"nic_num_not,omitempty"`

	// nic num not in
	NicNumNotIn []int32 `json:"nic_num_not_in,omitempty"`

	// nics every
	NicsEvery struct {
		NicWhereInput
	} `json:"nics_every,omitempty"`

	// nics none
	NicsNone struct {
		NicWhereInput
	} `json:"nics_none,omitempty"`

	// nics some
	NicsSome struct {
		NicWhereInput
	} `json:"nics_some,omitempty"`

	// nvmf namespace num
	NvmfNamespaceNum *int32 `json:"nvmf_namespace_num,omitempty"`

	// nvmf namespace num gt
	NvmfNamespaceNumGt *int32 `json:"nvmf_namespace_num_gt,omitempty"`

	// nvmf namespace num gte
	NvmfNamespaceNumGte *int32 `json:"nvmf_namespace_num_gte,omitempty"`

	// nvmf namespace num in
	NvmfNamespaceNumIn []int32 `json:"nvmf_namespace_num_in,omitempty"`

	// nvmf namespace num lt
	NvmfNamespaceNumLt *int32 `json:"nvmf_namespace_num_lt,omitempty"`

	// nvmf namespace num lte
	NvmfNamespaceNumLte *int32 `json:"nvmf_namespace_num_lte,omitempty"`

	// nvmf namespace num not
	NvmfNamespaceNumNot *int32 `json:"nvmf_namespace_num_not,omitempty"`

	// nvmf namespace num not in
	NvmfNamespaceNumNotIn []int32 `json:"nvmf_namespace_num_not_in,omitempty"`

	// nvmf namespace snapshot num
	NvmfNamespaceSnapshotNum *int32 `json:"nvmf_namespace_snapshot_num,omitempty"`

	// nvmf namespace snapshot num gt
	NvmfNamespaceSnapshotNumGt *int32 `json:"nvmf_namespace_snapshot_num_gt,omitempty"`

	// nvmf namespace snapshot num gte
	NvmfNamespaceSnapshotNumGte *int32 `json:"nvmf_namespace_snapshot_num_gte,omitempty"`

	// nvmf namespace snapshot num in
	NvmfNamespaceSnapshotNumIn []int32 `json:"nvmf_namespace_snapshot_num_in,omitempty"`

	// nvmf namespace snapshot num lt
	NvmfNamespaceSnapshotNumLt *int32 `json:"nvmf_namespace_snapshot_num_lt,omitempty"`

	// nvmf namespace snapshot num lte
	NvmfNamespaceSnapshotNumLte *int32 `json:"nvmf_namespace_snapshot_num_lte,omitempty"`

	// nvmf namespace snapshot num not
	NvmfNamespaceSnapshotNumNot *int32 `json:"nvmf_namespace_snapshot_num_not,omitempty"`

	// nvmf namespace snapshot num not in
	NvmfNamespaceSnapshotNumNotIn []int32 `json:"nvmf_namespace_snapshot_num_not_in,omitempty"`

	// nvmf namespace snapshots every
	NvmfNamespaceSnapshotsEvery struct {
		NvmfNamespaceSnapshotWhereInput
	} `json:"nvmf_namespace_snapshots_every,omitempty"`

	// nvmf namespace snapshots none
	NvmfNamespaceSnapshotsNone struct {
		NvmfNamespaceSnapshotWhereInput
	} `json:"nvmf_namespace_snapshots_none,omitempty"`

	// nvmf namespace snapshots some
	NvmfNamespaceSnapshotsSome struct {
		NvmfNamespaceSnapshotWhereInput
	} `json:"nvmf_namespace_snapshots_some,omitempty"`

	// nvmf namespaces every
	NvmfNamespacesEvery struct {
		NvmfNamespaceWhereInput
	} `json:"nvmf_namespaces_every,omitempty"`

	// nvmf namespaces none
	NvmfNamespacesNone struct {
		NvmfNamespaceWhereInput
	} `json:"nvmf_namespaces_none,omitempty"`

	// nvmf namespaces some
	NvmfNamespacesSome struct {
		NvmfNamespaceWhereInput
	} `json:"nvmf_namespaces_some,omitempty"`

	// nvmf subsystem num
	NvmfSubsystemNum *int32 `json:"nvmf_subsystem_num,omitempty"`

	// nvmf subsystem num gt
	NvmfSubsystemNumGt *int32 `json:"nvmf_subsystem_num_gt,omitempty"`

	// nvmf subsystem num gte
	NvmfSubsystemNumGte *int32 `json:"nvmf_subsystem_num_gte,omitempty"`

	// nvmf subsystem num in
	NvmfSubsystemNumIn []int32 `json:"nvmf_subsystem_num_in,omitempty"`

	// nvmf subsystem num lt
	NvmfSubsystemNumLt *int32 `json:"nvmf_subsystem_num_lt,omitempty"`

	// nvmf subsystem num lte
	NvmfSubsystemNumLte *int32 `json:"nvmf_subsystem_num_lte,omitempty"`

	// nvmf subsystem num not
	NvmfSubsystemNumNot *int32 `json:"nvmf_subsystem_num_not,omitempty"`

	// nvmf subsystem num not in
	NvmfSubsystemNumNotIn []int32 `json:"nvmf_subsystem_num_not_in,omitempty"`

	// nvmf subsystems every
	NvmfSubsystemsEvery struct {
		NvmfSubsystemWhereInput
	} `json:"nvmf_subsystems_every,omitempty"`

	// nvmf subsystems none
	NvmfSubsystemsNone struct {
		NvmfSubsystemWhereInput
	} `json:"nvmf_subsystems_none,omitempty"`

	// nvmf subsystems some
	NvmfSubsystemsSome struct {
		NvmfSubsystemWhereInput
	} `json:"nvmf_subsystems_some,omitempty"`

	// security policies every
	SecurityPoliciesEvery struct {
		SecurityPolicyWhereInput
	} `json:"security_policies_every,omitempty"`

	// security policies none
	SecurityPoliciesNone struct {
		SecurityPolicyWhereInput
	} `json:"security_policies_none,omitempty"`

	// security policies some
	SecurityPoliciesSome struct {
		SecurityPolicyWhereInput
	} `json:"security_policies_some,omitempty"`

	// security policy num
	SecurityPolicyNum *int32 `json:"security_policy_num,omitempty"`

	// security policy num gt
	SecurityPolicyNumGt *int32 `json:"security_policy_num_gt,omitempty"`

	// security policy num gte
	SecurityPolicyNumGte *int32 `json:"security_policy_num_gte,omitempty"`

	// security policy num in
	SecurityPolicyNumIn []int32 `json:"security_policy_num_in,omitempty"`

	// security policy num lt
	SecurityPolicyNumLt *int32 `json:"security_policy_num_lt,omitempty"`

	// security policy num lte
	SecurityPolicyNumLte *int32 `json:"security_policy_num_lte,omitempty"`

	// security policy num not
	SecurityPolicyNumNot *int32 `json:"security_policy_num_not,omitempty"`

	// security policy num not in
	SecurityPolicyNumNotIn []int32 `json:"security_policy_num_not_in,omitempty"`

	// system vlan num
	SystemVlanNum *int32 `json:"system_vlan_num,omitempty"`

	// system vlan num gt
	SystemVlanNumGt *int32 `json:"system_vlan_num_gt,omitempty"`

	// system vlan num gte
	SystemVlanNumGte *int32 `json:"system_vlan_num_gte,omitempty"`

	// system vlan num in
	SystemVlanNumIn []int32 `json:"system_vlan_num_in,omitempty"`

	// system vlan num lt
	SystemVlanNumLt *int32 `json:"system_vlan_num_lt,omitempty"`

	// system vlan num lte
	SystemVlanNumLte *int32 `json:"system_vlan_num_lte,omitempty"`

	// system vlan num not
	SystemVlanNumNot *int32 `json:"system_vlan_num_not,omitempty"`

	// system vlan num not in
	SystemVlanNumNotIn []int32 `json:"system_vlan_num_not_in,omitempty"`

	// total num
	TotalNum *int32 `json:"total_num,omitempty"`

	// total num gt
	TotalNumGt *int32 `json:"total_num_gt,omitempty"`

	// total num gte
	TotalNumGte *int32 `json:"total_num_gte,omitempty"`

	// total num in
	TotalNumIn []int32 `json:"total_num_in,omitempty"`

	// total num lt
	TotalNumLt *int32 `json:"total_num_lt,omitempty"`

	// total num lte
	TotalNumLte *int32 `json:"total_num_lte,omitempty"`

	// total num not
	TotalNumNot *int32 `json:"total_num_not,omitempty"`

	// total num not in
	TotalNumNotIn []int32 `json:"total_num_not_in,omitempty"`

	// value
	Value *string `json:"value,omitempty"`

	// value contains
	ValueContains *string `json:"value_contains,omitempty"`

	// value ends with
	ValueEndsWith *string `json:"value_ends_with,omitempty"`

	// value gt
	ValueGt *string `json:"value_gt,omitempty"`

	// value gte
	ValueGte *string `json:"value_gte,omitempty"`

	// value in
	ValueIn []string `json:"value_in,omitempty"`

	// value lt
	ValueLt *string `json:"value_lt,omitempty"`

	// value lte
	ValueLte *string `json:"value_lte,omitempty"`

	// value not
	ValueNot *string `json:"value_not,omitempty"`

	// value not contains
	ValueNotContains *string `json:"value_not_contains,omitempty"`

	// value not ends with
	ValueNotEndsWith *string `json:"value_not_ends_with,omitempty"`

	// value not in
	ValueNotIn []string `json:"value_not_in,omitempty"`

	// value not starts with
	ValueNotStartsWith *string `json:"value_not_starts_with,omitempty"`

	// value starts with
	ValueStartsWith *string `json:"value_starts_with,omitempty"`

	// vds num
	VdsNum *int32 `json:"vds_num,omitempty"`

	// vds num gt
	VdsNumGt *int32 `json:"vds_num_gt,omitempty"`

	// vds num gte
	VdsNumGte *int32 `json:"vds_num_gte,omitempty"`

	// vds num in
	VdsNumIn []int32 `json:"vds_num_in,omitempty"`

	// vds num lt
	VdsNumLt *int32 `json:"vds_num_lt,omitempty"`

	// vds num lte
	VdsNumLte *int32 `json:"vds_num_lte,omitempty"`

	// vds num not
	VdsNumNot *int32 `json:"vds_num_not,omitempty"`

	// vds num not in
	VdsNumNotIn []int32 `json:"vds_num_not_in,omitempty"`

	// vdses every
	VdsesEvery struct {
		VdsWhereInput
	} `json:"vdses_every,omitempty"`

	// vdses none
	VdsesNone struct {
		VdsWhereInput
	} `json:"vdses_none,omitempty"`

	// vdses some
	VdsesSome struct {
		VdsWhereInput
	} `json:"vdses_some,omitempty"`

	// vlans every
	VlansEvery struct {
		VlanWhereInput
	} `json:"vlans_every,omitempty"`

	// vlans none
	VlansNone struct {
		VlanWhereInput
	} `json:"vlans_none,omitempty"`

	// vlans some
	VlansSome struct {
		VlanWhereInput
	} `json:"vlans_some,omitempty"`

	// vm num
	VMNum *int32 `json:"vm_num,omitempty"`

	// vm num gt
	VMNumGt *int32 `json:"vm_num_gt,omitempty"`

	// vm num gte
	VMNumGte *int32 `json:"vm_num_gte,omitempty"`

	// vm num in
	VMNumIn []int32 `json:"vm_num_in,omitempty"`

	// vm num lt
	VMNumLt *int32 `json:"vm_num_lt,omitempty"`

	// vm num lte
	VMNumLte *int32 `json:"vm_num_lte,omitempty"`

	// vm num not
	VMNumNot *int32 `json:"vm_num_not,omitempty"`

	// vm num not in
	VMNumNotIn []int32 `json:"vm_num_not_in,omitempty"`

	// vm snapshot num
	VMSnapshotNum *int32 `json:"vm_snapshot_num,omitempty"`

	// vm snapshot num gt
	VMSnapshotNumGt *int32 `json:"vm_snapshot_num_gt,omitempty"`

	// vm snapshot num gte
	VMSnapshotNumGte *int32 `json:"vm_snapshot_num_gte,omitempty"`

	// vm snapshot num in
	VMSnapshotNumIn []int32 `json:"vm_snapshot_num_in,omitempty"`

	// vm snapshot num lt
	VMSnapshotNumLt *int32 `json:"vm_snapshot_num_lt,omitempty"`

	// vm snapshot num lte
	VMSnapshotNumLte *int32 `json:"vm_snapshot_num_lte,omitempty"`

	// vm snapshot num not
	VMSnapshotNumNot *int32 `json:"vm_snapshot_num_not,omitempty"`

	// vm snapshot num not in
	VMSnapshotNumNotIn []int32 `json:"vm_snapshot_num_not_in,omitempty"`

	// vm snapshots every
	VMSnapshotsEvery struct {
		VMSnapshotWhereInput
	} `json:"vm_snapshots_every,omitempty"`

	// vm snapshots none
	VMSnapshotsNone struct {
		VMSnapshotWhereInput
	} `json:"vm_snapshots_none,omitempty"`

	// vm snapshots some
	VMSnapshotsSome struct {
		VMSnapshotWhereInput
	} `json:"vm_snapshots_some,omitempty"`

	// vm template num
	VMTemplateNum *int32 `json:"vm_template_num,omitempty"`

	// vm template num gt
	VMTemplateNumGt *int32 `json:"vm_template_num_gt,omitempty"`

	// vm template num gte
	VMTemplateNumGte *int32 `json:"vm_template_num_gte,omitempty"`

	// vm template num in
	VMTemplateNumIn []int32 `json:"vm_template_num_in,omitempty"`

	// vm template num lt
	VMTemplateNumLt *int32 `json:"vm_template_num_lt,omitempty"`

	// vm template num lte
	VMTemplateNumLte *int32 `json:"vm_template_num_lte,omitempty"`

	// vm template num not
	VMTemplateNumNot *int32 `json:"vm_template_num_not,omitempty"`

	// vm template num not in
	VMTemplateNumNotIn []int32 `json:"vm_template_num_not_in,omitempty"`

	// vm templates every
	VMTemplatesEvery struct {
		VMTemplateWhereInput
	} `json:"vm_templates_every,omitempty"`

	// vm templates none
	VMTemplatesNone struct {
		VMTemplateWhereInput
	} `json:"vm_templates_none,omitempty"`

	// vm templates some
	VMTemplatesSome struct {
		VMTemplateWhereInput
	} `json:"vm_templates_some,omitempty"`

	// vm vlan num
	VMVlanNum *int32 `json:"vm_vlan_num,omitempty"`

	// vm vlan num gt
	VMVlanNumGt *int32 `json:"vm_vlan_num_gt,omitempty"`

	// vm vlan num gte
	VMVlanNumGte *int32 `json:"vm_vlan_num_gte,omitempty"`

	// vm vlan num in
	VMVlanNumIn []int32 `json:"vm_vlan_num_in,omitempty"`

	// vm vlan num lt
	VMVlanNumLt *int32 `json:"vm_vlan_num_lt,omitempty"`

	// vm vlan num lte
	VMVlanNumLte *int32 `json:"vm_vlan_num_lte,omitempty"`

	// vm vlan num not
	VMVlanNumNot *int32 `json:"vm_vlan_num_not,omitempty"`

	// vm vlan num not in
	VMVlanNumNotIn []int32 `json:"vm_vlan_num_not_in,omitempty"`

	// vm volume num
	VMVolumeNum *int32 `json:"vm_volume_num,omitempty"`

	// vm volume num gt
	VMVolumeNumGt *int32 `json:"vm_volume_num_gt,omitempty"`

	// vm volume num gte
	VMVolumeNumGte *int32 `json:"vm_volume_num_gte,omitempty"`

	// vm volume num in
	VMVolumeNumIn []int32 `json:"vm_volume_num_in,omitempty"`

	// vm volume num lt
	VMVolumeNumLt *int32 `json:"vm_volume_num_lt,omitempty"`

	// vm volume num lte
	VMVolumeNumLte *int32 `json:"vm_volume_num_lte,omitempty"`

	// vm volume num not
	VMVolumeNumNot *int32 `json:"vm_volume_num_not,omitempty"`

	// vm volume num not in
	VMVolumeNumNotIn []int32 `json:"vm_volume_num_not_in,omitempty"`

	// vm volumes every
	VMVolumesEvery struct {
		VMVolumeWhereInput
	} `json:"vm_volumes_every,omitempty"`

	// vm volumes none
	VMVolumesNone struct {
		VMVolumeWhereInput
	} `json:"vm_volumes_none,omitempty"`

	// vm volumes some
	VMVolumesSome struct {
		VMVolumeWhereInput
	} `json:"vm_volumes_some,omitempty"`

	// vms every
	VmsEvery struct {
		VMWhereInput
	} `json:"vms_every,omitempty"`

	// vms none
	VmsNone struct {
		VMWhereInput
	} `json:"vms_none,omitempty"`

	// vms some
	VmsSome struct {
		VMWhereInput
	} `json:"vms_some,omitempty"`
}

// Validate validates this label where input
func (m *LabelWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClustersSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshotsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshotsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupSnapshotsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsistencyGroupsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryImagesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryImagesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryImagesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryVMTemplatesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryVMTemplatesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentLibraryVMTemplatesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacentersEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacentersNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatacentersSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImagesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImagesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfImagesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunSnapshotsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunSnapshotsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunSnapshotsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiLunsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargetsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargetsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIscsiTargetsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsolationPoliciesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroupsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroupsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceGroupsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExportsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExportsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsExportsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsInodesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsInodesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsInodesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNicsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaceSnapshotsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaceSnapshotsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespaceSnapshotsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespacesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespacesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfNamespacesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystemsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystemsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNvmfSubsystemsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityPoliciesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVdsesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlansEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlansNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlansSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshotsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshotsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSnapshotsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplatesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplatesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMTemplatesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LabelWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LabelWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LabelWhereInput) validateClustersEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateClustersNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateClustersSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ClustersSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateConsistencyGroupSnapshotsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshotsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateConsistencyGroupSnapshotsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshotsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateConsistencyGroupSnapshotsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupSnapshotsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateConsistencyGroupsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateConsistencyGroupsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateConsistencyGroupsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsistencyGroupsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateContentLibraryImagesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryImagesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateContentLibraryImagesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryImagesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateContentLibraryImagesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryImagesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateContentLibraryVMTemplatesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryVMTemplatesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateContentLibraryVMTemplatesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryVMTemplatesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateContentLibraryVMTemplatesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentLibraryVMTemplatesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateDatacentersEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.DatacentersEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateDatacentersNone(formats strfmt.Registry) error {
	if swag.IsZero(m.DatacentersNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateDatacentersSome(formats strfmt.Registry) error {
	if swag.IsZero(m.DatacentersSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateDisksEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateDisksNone(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateDisksSome(formats strfmt.Registry) error {
	if swag.IsZero(m.DisksSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateElfImagesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImagesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateElfImagesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImagesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateElfImagesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfImagesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateHostsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateHostsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateHostsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.HostsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiLunSnapshotsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunSnapshotsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiLunSnapshotsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunSnapshotsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiLunSnapshotsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunSnapshotsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiLunsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiLunsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiLunsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiLunsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiTargetsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargetsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiTargetsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargetsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIscsiTargetsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.IscsiTargetsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIsolationPoliciesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIsolationPoliciesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateIsolationPoliciesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.IsolationPoliciesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNamespaceGroupsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroupsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNamespaceGroupsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroupsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNamespaceGroupsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceGroupsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNfsExportsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExportsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNfsExportsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExportsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNfsExportsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsExportsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNfsInodesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInodesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNfsInodesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInodesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNfsInodesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsInodesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNicsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNicsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNicsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NicsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfNamespaceSnapshotsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaceSnapshotsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfNamespaceSnapshotsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaceSnapshotsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfNamespaceSnapshotsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespaceSnapshotsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfNamespacesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespacesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfNamespacesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespacesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfNamespacesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfNamespacesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfSubsystemsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystemsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfSubsystemsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystemsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateNvmfSubsystemsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NvmfSubsystemsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateSecurityPoliciesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateSecurityPoliciesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateSecurityPoliciesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityPoliciesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVdsesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVdsesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVdsesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VdsesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVlansEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VlansEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVlansNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VlansNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVlansSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VlansSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMSnapshotsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshotsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMSnapshotsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshotsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMSnapshotsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSnapshotsSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMTemplatesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplatesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMTemplatesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplatesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMTemplatesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMTemplatesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMVolumesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMVolumesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVMVolumesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVolumesSome) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	return nil
}

func (m *LabelWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this label where input based on the context it is used
func (m *LabelWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClustersSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshotsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshotsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupSnapshotsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsistencyGroupsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryImagesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryImagesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryImagesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryVMTemplatesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryVMTemplatesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentLibraryVMTemplatesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacentersEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacentersNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDatacentersSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisksSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImagesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImagesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfImagesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunSnapshotsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunSnapshotsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunSnapshotsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiLunsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargetsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargetsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIscsiTargetsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsolationPoliciesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroupsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroupsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceGroupsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExportsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExportsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsExportsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsInodesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsInodesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsInodesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNicsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaceSnapshotsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaceSnapshotsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespaceSnapshotsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespacesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespacesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfNamespacesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystemsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystemsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNvmfSubsystemsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityPoliciesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdsesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdsesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVdsesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlansEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlansNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlansSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshotsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshotsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSnapshotsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplatesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplatesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMTemplatesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVolumesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LabelWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LabelWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LabelWhereInput) contextValidateClustersEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateClustersNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateClustersSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateConsistencyGroupSnapshotsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateConsistencyGroupSnapshotsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateConsistencyGroupSnapshotsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateConsistencyGroupsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateConsistencyGroupsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateConsistencyGroupsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateContentLibraryImagesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateContentLibraryImagesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateContentLibraryImagesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateContentLibraryVMTemplatesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateContentLibraryVMTemplatesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateContentLibraryVMTemplatesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateDatacentersEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateDatacentersNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateDatacentersSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateDisksEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateDisksNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateDisksSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateElfImagesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateElfImagesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateElfImagesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateHostsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateHostsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateHostsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiLunSnapshotsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiLunSnapshotsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiLunSnapshotsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiLunsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiLunsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiLunsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiTargetsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiTargetsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIscsiTargetsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIsolationPoliciesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIsolationPoliciesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateIsolationPoliciesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNamespaceGroupsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNamespaceGroupsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNamespaceGroupsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNfsExportsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNfsExportsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNfsExportsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNfsInodesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNfsInodesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNfsInodesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNicsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNicsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNicsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfNamespaceSnapshotsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfNamespaceSnapshotsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfNamespaceSnapshotsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfNamespacesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfNamespacesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfNamespacesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfSubsystemsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfSubsystemsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateNvmfSubsystemsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateSecurityPoliciesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateSecurityPoliciesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateSecurityPoliciesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVdsesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVdsesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVdsesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVlansEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVlansNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVlansSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMSnapshotsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMSnapshotsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMSnapshotsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMTemplatesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMTemplatesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMTemplatesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMVolumesEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMVolumesNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVMVolumesSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *LabelWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *LabelWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelWhereInput) UnmarshalBinary(b []byte) error {
	var res LabelWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
