// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterTopoWhereInput cluster topo where input
// Example: {"AND":"ClusterTopoWhereInput[]","NOT":"ClusterTopoWhereInput[]","OR":"ClusterTopoWhereInput[]","brick_topoes_every":"BrickTopoWhereInput","brick_topoes_none":"BrickTopoWhereInput","brick_topoes_some":"BrickTopoWhereInput","cluster":"ClusterWhereInput","id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","local_id":"string","local_id_contains":"string","local_id_ends_with":"string","local_id_gt":"string","local_id_gte":"string","local_id_in":["string"],"local_id_lt":"string","local_id_lte":"string","local_id_not":"string","local_id_not_contains":"string","local_id_not_ends_with":"string","local_id_not_in":["string"],"local_id_not_starts_with":"string","local_id_starts_with":"string","name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","node_topoes_every":"NodeTopoWhereInput","node_topoes_none":"NodeTopoWhereInput","node_topoes_some":"NodeTopoWhereInput","zone_topoes_every":"ZoneTopoWhereInput","zone_topoes_none":"ZoneTopoWhereInput","zone_topoes_some":"ZoneTopoWhereInput"}
//
// swagger:model ClusterTopoWhereInput
type ClusterTopoWhereInput struct {

	// a n d
	AND []*ClusterTopoWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ClusterTopoWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ClusterTopoWhereInput `json:"OR,omitempty"`

	// brick topoes every
	BrickTopoesEvery *BrickTopoWhereInput `json:"brick_topoes_every,omitempty"`

	// brick topoes none
	BrickTopoesNone *BrickTopoWhereInput `json:"brick_topoes_none,omitempty"`

	// brick topoes some
	BrickTopoesSome *BrickTopoWhereInput `json:"brick_topoes_some,omitempty"`

	// cluster
	Cluster *ClusterWhereInput `json:"cluster,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// node topoes every
	NodeTopoesEvery *NodeTopoWhereInput `json:"node_topoes_every,omitempty"`

	// node topoes none
	NodeTopoesNone *NodeTopoWhereInput `json:"node_topoes_none,omitempty"`

	// node topoes some
	NodeTopoesSome *NodeTopoWhereInput `json:"node_topoes_some,omitempty"`

	// zone topoes every
	ZoneTopoesEvery *ZoneTopoWhereInput `json:"zone_topoes_every,omitempty"`

	// zone topoes none
	ZoneTopoesNone *ZoneTopoWhereInput `json:"zone_topoes_none,omitempty"`

	// zone topoes some
	ZoneTopoesSome *ZoneTopoWhereInput `json:"zone_topoes_some,omitempty"`
}

// Validate validates this cluster topo where input
func (m *ClusterTopoWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrickTopoesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrickTopoesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBrickTopoesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoesSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneTopoesEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneTopoesNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneTopoesSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterTopoWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterTopoWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterTopoWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterTopoWhereInput) validateBrickTopoesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.BrickTopoesEvery) { // not required
		return nil
	}

	if m.BrickTopoesEvery != nil {
		if err := m.BrickTopoesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brick_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brick_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateBrickTopoesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.BrickTopoesNone) { // not required
		return nil
	}

	if m.BrickTopoesNone != nil {
		if err := m.BrickTopoesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brick_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brick_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateBrickTopoesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.BrickTopoesSome) { // not required
		return nil
	}

	if m.BrickTopoesSome != nil {
		if err := m.BrickTopoesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brick_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brick_topoes_some")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateNodeTopoesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoesEvery) { // not required
		return nil
	}

	if m.NodeTopoesEvery != nil {
		if err := m.NodeTopoesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateNodeTopoesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoesNone) { // not required
		return nil
	}

	if m.NodeTopoesNone != nil {
		if err := m.NodeTopoesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateNodeTopoesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoesSome) { // not required
		return nil
	}

	if m.NodeTopoesSome != nil {
		if err := m.NodeTopoesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_some")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateZoneTopoesEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneTopoesEvery) { // not required
		return nil
	}

	if m.ZoneTopoesEvery != nil {
		if err := m.ZoneTopoesEvery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateZoneTopoesNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneTopoesNone) { // not required
		return nil
	}

	if m.ZoneTopoesNone != nil {
		if err := m.ZoneTopoesNone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) validateZoneTopoesSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneTopoesSome) { // not required
		return nil
	}

	if m.ZoneTopoesSome != nil {
		if err := m.ZoneTopoesSome.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_topoes_some")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster topo where input based on the context it is used
func (m *ClusterTopoWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBrickTopoesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBrickTopoesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBrickTopoesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneTopoesEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneTopoesNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneTopoesSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterTopoWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateBrickTopoesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.BrickTopoesEvery != nil {
		if err := m.BrickTopoesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brick_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brick_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateBrickTopoesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.BrickTopoesNone != nil {
		if err := m.BrickTopoesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brick_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brick_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateBrickTopoesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.BrickTopoesSome != nil {
		if err := m.BrickTopoesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brick_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brick_topoes_some")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateNodeTopoesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeTopoesEvery != nil {
		if err := m.NodeTopoesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateNodeTopoesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeTopoesNone != nil {
		if err := m.NodeTopoesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateNodeTopoesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeTopoesSome != nil {
		if err := m.NodeTopoesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("node_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("node_topoes_some")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateZoneTopoesEvery(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneTopoesEvery != nil {
		if err := m.ZoneTopoesEvery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_topoes_every")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_topoes_every")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateZoneTopoesNone(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneTopoesNone != nil {
		if err := m.ZoneTopoesNone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_topoes_none")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_topoes_none")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterTopoWhereInput) contextValidateZoneTopoesSome(ctx context.Context, formats strfmt.Registry) error {

	if m.ZoneTopoesSome != nil {
		if err := m.ZoneTopoesSome.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zone_topoes_some")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zone_topoes_some")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterTopoWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterTopoWhereInput) UnmarshalBinary(b []byte) error {
	var res ClusterTopoWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
