// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LicenseType license type
//
// swagger:model LicenseType
type LicenseType string

func NewLicenseType(value LicenseType) *LicenseType {
	v := value
	return &v
}

const (

	// LicenseTypePERPETUAL captures enum value "PERPETUAL"
	LicenseTypePERPETUAL LicenseType = "PERPETUAL"

	// LicenseTypeSUBSCRIPTION captures enum value "SUBSCRIPTION"
	LicenseTypeSUBSCRIPTION LicenseType = "SUBSCRIPTION"

	// LicenseTypeTRIAL captures enum value "TRIAL"
	LicenseTypeTRIAL LicenseType = "TRIAL"
)

// for schema
var licenseTypeEnum []interface{}

func init() {
	var res []LicenseType
	if err := json.Unmarshal([]byte(`["PERPETUAL","SUBSCRIPTION","TRIAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseTypeEnum = append(licenseTypeEnum, v)
	}
}

func (m LicenseType) validateLicenseTypeEnum(path, location string, value LicenseType) error {
	if err := validate.EnumCase(path, location, value, licenseTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this license type
func (m LicenseType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLicenseTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this license type based on context it is used
func (m LicenseType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
