// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UserRoleNextWhereInput user role next where input
//
// swagger:model UserRoleNextWhereInput
type UserRoleNextWhereInput struct {

	// a n d
	AND []*UserRoleNextWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*UserRoleNextWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*UserRoleNextWhereInput `json:"OR,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// platform
	Platform interface{} `json:"platform,omitempty"`

	// platform in
	PlatformIn []UserRolePlatform `json:"platform_in,omitempty"`

	// platform not
	PlatformNot interface{} `json:"platform_not,omitempty"`

	// platform not in
	PlatformNotIn []UserRolePlatform `json:"platform_not_in,omitempty"`

	// preset
	Preset interface{} `json:"preset,omitempty"`

	// preset in
	PresetIn []UserRolePreset `json:"preset_in,omitempty"`

	// preset not
	PresetNot interface{} `json:"preset_not,omitempty"`

	// preset not in
	PresetNotIn []UserRolePreset `json:"preset_not_in,omitempty"`

	// users every
	UsersEvery interface{} `json:"users_every,omitempty"`

	// users none
	UsersNone interface{} `json:"users_none,omitempty"`

	// users some
	UsersSome interface{} `json:"users_some,omitempty"`
}

// Validate validates this user role next where input
func (m *UserRoleNextWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresetIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePresetNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRoleNextWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) validatePlatformIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PlatformIn); i++ {

		if err := m.PlatformIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) validatePlatformNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PlatformNotIn); i++ {

		if err := m.PlatformNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) validatePresetIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PresetIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PresetIn); i++ {

		if err := m.PresetIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preset_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) validatePresetNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.PresetNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.PresetNotIn); i++ {

		if err := m.PresetNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preset_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this user role next where input based on the context it is used
func (m *UserRoleNextWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlatformIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlatformNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresetIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePresetNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserRoleNextWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) contextValidatePlatformIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PlatformIn); i++ {

		if err := m.PlatformIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) contextValidatePlatformNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PlatformNotIn); i++ {

		if err := m.PlatformNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platform_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) contextValidatePresetIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PresetIn); i++ {

		if err := m.PresetIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preset_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *UserRoleNextWhereInput) contextValidatePresetNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PresetNotIn); i++ {

		if err := m.PresetNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preset_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserRoleNextWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserRoleNextWhereInput) UnmarshalBinary(b []byte) error {
	var res UserRoleNextWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
