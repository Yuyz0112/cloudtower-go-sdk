// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMCommonParams Vm common params
//
// swagger:model VmCommonParams
type VMCommonParams struct {

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// cpu cores
	CPUCores float64 `json:"cpu_cores,omitempty"`

	// cpu sockets
	CPUSockets float64 `json:"cpu_sockets,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// firmware
	Firmware VMFirmware `json:"firmware,omitempty"`

	// folder id
	FolderID string `json:"folder_id,omitempty"`

	// guest os type
	GuestOsType string `json:"guest_os_type,omitempty"`

	// ha
	Ha bool `json:"ha,omitempty"`

	// host id
	HostID string `json:"host_id,omitempty"`

	// io policy
	IoPolicy string `json:"io_policy,omitempty"`

	// memory
	Memory float64 `json:"memory,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// status
	Status VMStatus `json:"status,omitempty"`

	// vcpu
	Vcpu float64 `json:"vcpu,omitempty"`

	// vm disks
	VMDisks *VMDiskParams `json:"vm_disks,omitempty"`

	// vm nics
	VMNics VMNicParams `json:"vm_nics,omitempty"`
}

// Validate validates this Vm common params
func (m *VMCommonParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmware(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMNics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMCommonParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *VMCommonParams) validateFirmware(formats strfmt.Registry) error {
	if swag.IsZero(m.Firmware) { // not required
		return nil
	}

	if err := m.Firmware.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("firmware")
		}
		return err
	}

	return nil
}

func (m *VMCommonParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VMCommonParams) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *VMCommonParams) validateVMDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.VMDisks) { // not required
		return nil
	}

	if m.VMDisks != nil {
		if err := m.VMDisks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_disks")
			}
			return err
		}
	}

	return nil
}

func (m *VMCommonParams) validateVMNics(formats strfmt.Registry) error {
	if swag.IsZero(m.VMNics) { // not required
		return nil
	}

	if err := m.VMNics.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_nics")
		}
		return err
	}

	return nil
}

// ContextValidate validate this Vm common params based on the context it is used
func (m *VMCommonParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFirmware(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMCommonParams) contextValidateFirmware(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Firmware.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("firmware")
		}
		return err
	}

	return nil
}

func (m *VMCommonParams) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *VMCommonParams) contextValidateVMDisks(ctx context.Context, formats strfmt.Registry) error {

	if m.VMDisks != nil {
		if err := m.VMDisks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_disks")
			}
			return err
		}
	}

	return nil
}

func (m *VMCommonParams) contextValidateVMNics(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VMNics.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_nics")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMCommonParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMCommonParams) UnmarshalBinary(b []byte) error {
	var res VMCommonParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
