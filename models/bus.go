// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Bus bus
//
// swagger:model Bus
type Bus string

func NewBus(value Bus) *Bus {
	v := value
	return &v
}

const (

	// BusIDE captures enum value "IDE"
	BusIDE Bus = "IDE"

	// BusSCSI captures enum value "SCSI"
	BusSCSI Bus = "SCSI"

	// BusVIRTIO captures enum value "VIRTIO"
	BusVIRTIO Bus = "VIRTIO"
)

// for schema
var busEnum []interface{}

func init() {
	var res []Bus
	if err := json.Unmarshal([]byte(`["IDE","SCSI","VIRTIO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		busEnum = append(busEnum, v)
	}
}

func (m Bus) validateBusEnum(path, location string, value Bus) error {
	if err := validate.EnumCase(path, location, value, busEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this bus
func (m Bus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this bus based on context it is used
func (m Bus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
