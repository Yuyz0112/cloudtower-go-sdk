// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMVolumeWhereInput Vm volume where input
// Example: {"AND":"VmVolumeWhereInput[]","NOT":"VmVolumeWhereInput[]","OR":"VmVolumeWhereInput[]","cluster":"ClusterWhereInput","description":"string","description_contains":"string","description_ends_with":"string","description_gt":"string","description_gte":"string","description_in":["string"],"description_lt":"string","description_lte":"string","description_not":"string","description_not_contains":"string","description_not_ends_with":"string","description_not_in":["string"],"description_not_starts_with":"string","description_starts_with":"string","elf_storage_policy":"REPLICA_1_THICK_PROVISION","elf_storage_policy_in":["REPLICA_1_THICK_PROVISION"],"elf_storage_policy_not":"REPLICA_1_THICK_PROVISION","elf_storage_policy_not_in":["REPLICA_1_THICK_PROVISION"],"guest_size_usage":0,"guest_size_usage_gt":0,"guest_size_usage_gte":0,"guest_size_usage_in":[0],"guest_size_usage_lt":0,"guest_size_usage_lte":0,"guest_size_usage_not":0,"guest_size_usage_not_in":[0],"guest_used_size":0,"guest_used_size_gt":0,"guest_used_size_gte":0,"guest_used_size_in":[0],"guest_used_size_lt":0,"guest_used_size_lte":0,"guest_used_size_not":0,"guest_used_size_not_in":[0],"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","labels_every":"LabelWhereInput","labels_none":"LabelWhereInput","labels_some":"LabelWhereInput","local_created_at":"string","local_created_at_gt":"string","local_created_at_gte":"string","local_created_at_in":["string"],"local_created_at_lt":"string","local_created_at_lte":"string","local_created_at_not":"string","local_created_at_not_in":["string"],"local_id":"string","local_id_contains":"string","local_id_ends_with":"string","local_id_gt":"string","local_id_gte":"string","local_id_in":["string"],"local_id_lt":"string","local_id_lte":"string","local_id_not":"string","local_id_not_contains":"string","local_id_not_ends_with":"string","local_id_not_in":["string"],"local_id_not_starts_with":"string","local_id_starts_with":"string","lun":"IscsiLunWhereInput","mounting":false,"mounting_not":false,"name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","path":"string","path_contains":"string","path_ends_with":"string","path_gt":"string","path_gte":"string","path_in":["string"],"path_lt":"string","path_lte":"string","path_not":"string","path_not_contains":"string","path_not_ends_with":"string","path_not_in":["string"],"path_not_starts_with":"string","path_starts_with":"string","sharing":false,"sharing_not":false,"size":0,"size_gt":0,"size_gte":0,"size_in":[0],"size_lt":0,"size_lte":0,"size_not":0,"size_not_in":[0],"unique_size":0,"unique_size_gt":0,"unique_size_gte":0,"unique_size_in":[0],"unique_size_lt":0,"unique_size_lte":0,"unique_size_not":0,"unique_size_not_in":[0],"vm_disks_every":"VmDiskWhereInput","vm_disks_none":"VmDiskWhereInput","vm_disks_some":"VmDiskWhereInput"}
//
// swagger:model VmVolumeWhereInput
type VMVolumeWhereInput struct {

	// a n d
	AND []*VMVolumeWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VMVolumeWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VMVolumeWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster struct {
		ClusterWhereInput
	} `json:"cluster,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// elf storage policy
	ElfStoragePolicy struct {
		VMVolumeElfStoragePolicyType
	} `json:"elf_storage_policy,omitempty"`

	// elf storage policy in
	ElfStoragePolicyIn []VMVolumeElfStoragePolicyType `json:"elf_storage_policy_in,omitempty"`

	// elf storage policy not
	ElfStoragePolicyNot struct {
		VMVolumeElfStoragePolicyType
	} `json:"elf_storage_policy_not,omitempty"`

	// elf storage policy not in
	ElfStoragePolicyNotIn []VMVolumeElfStoragePolicyType `json:"elf_storage_policy_not_in,omitempty"`

	// guest size usage
	GuestSizeUsage *float64 `json:"guest_size_usage,omitempty"`

	// guest size usage gt
	GuestSizeUsageGt *float64 `json:"guest_size_usage_gt,omitempty"`

	// guest size usage gte
	GuestSizeUsageGte *float64 `json:"guest_size_usage_gte,omitempty"`

	// guest size usage in
	GuestSizeUsageIn []float64 `json:"guest_size_usage_in,omitempty"`

	// guest size usage lt
	GuestSizeUsageLt *float64 `json:"guest_size_usage_lt,omitempty"`

	// guest size usage lte
	GuestSizeUsageLte *float64 `json:"guest_size_usage_lte,omitempty"`

	// guest size usage not
	GuestSizeUsageNot *float64 `json:"guest_size_usage_not,omitempty"`

	// guest size usage not in
	GuestSizeUsageNotIn []float64 `json:"guest_size_usage_not_in,omitempty"`

	// guest used size
	GuestUsedSize *float64 `json:"guest_used_size,omitempty"`

	// guest used size gt
	GuestUsedSizeGt *float64 `json:"guest_used_size_gt,omitempty"`

	// guest used size gte
	GuestUsedSizeGte *float64 `json:"guest_used_size_gte,omitempty"`

	// guest used size in
	GuestUsedSizeIn []float64 `json:"guest_used_size_in,omitempty"`

	// guest used size lt
	GuestUsedSizeLt *float64 `json:"guest_used_size_lt,omitempty"`

	// guest used size lte
	GuestUsedSizeLte *float64 `json:"guest_used_size_lte,omitempty"`

	// guest used size not
	GuestUsedSizeNot *float64 `json:"guest_used_size_not,omitempty"`

	// guest used size not in
	GuestUsedSizeNotIn []float64 `json:"guest_used_size_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// labels every
	LabelsEvery struct {
		LabelWhereInput
	} `json:"labels_every,omitempty"`

	// labels none
	LabelsNone struct {
		LabelWhereInput
	} `json:"labels_none,omitempty"`

	// labels some
	LabelsSome struct {
		LabelWhereInput
	} `json:"labels_some,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local created at gt
	LocalCreatedAtGt *string `json:"local_created_at_gt,omitempty"`

	// local created at gte
	LocalCreatedAtGte *string `json:"local_created_at_gte,omitempty"`

	// local created at in
	LocalCreatedAtIn []string `json:"local_created_at_in,omitempty"`

	// local created at lt
	LocalCreatedAtLt *string `json:"local_created_at_lt,omitempty"`

	// local created at lte
	LocalCreatedAtLte *string `json:"local_created_at_lte,omitempty"`

	// local created at not
	LocalCreatedAtNot *string `json:"local_created_at_not,omitempty"`

	// local created at not in
	LocalCreatedAtNotIn []string `json:"local_created_at_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// lun
	Lun struct {
		IscsiLunWhereInput
	} `json:"lun,omitempty"`

	// mounting
	Mounting *bool `json:"mounting,omitempty"`

	// mounting not
	MountingNot *bool `json:"mounting_not,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// path
	Path *string `json:"path,omitempty"`

	// path contains
	PathContains *string `json:"path_contains,omitempty"`

	// path ends with
	PathEndsWith *string `json:"path_ends_with,omitempty"`

	// path gt
	PathGt *string `json:"path_gt,omitempty"`

	// path gte
	PathGte *string `json:"path_gte,omitempty"`

	// path in
	PathIn []string `json:"path_in,omitempty"`

	// path lt
	PathLt *string `json:"path_lt,omitempty"`

	// path lte
	PathLte *string `json:"path_lte,omitempty"`

	// path not
	PathNot *string `json:"path_not,omitempty"`

	// path not contains
	PathNotContains *string `json:"path_not_contains,omitempty"`

	// path not ends with
	PathNotEndsWith *string `json:"path_not_ends_with,omitempty"`

	// path not in
	PathNotIn []string `json:"path_not_in,omitempty"`

	// path not starts with
	PathNotStartsWith *string `json:"path_not_starts_with,omitempty"`

	// path starts with
	PathStartsWith *string `json:"path_starts_with,omitempty"`

	// sharing
	Sharing *bool `json:"sharing,omitempty"`

	// sharing not
	SharingNot *bool `json:"sharing_not,omitempty"`

	// size
	Size *float64 `json:"size,omitempty"`

	// size gt
	SizeGt *float64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *float64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []float64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *float64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *float64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *float64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []float64 `json:"size_not_in,omitempty"`

	// unique size
	UniqueSize *float64 `json:"unique_size,omitempty"`

	// unique size gt
	UniqueSizeGt *float64 `json:"unique_size_gt,omitempty"`

	// unique size gte
	UniqueSizeGte *float64 `json:"unique_size_gte,omitempty"`

	// unique size in
	UniqueSizeIn []float64 `json:"unique_size_in,omitempty"`

	// unique size lt
	UniqueSizeLt *float64 `json:"unique_size_lt,omitempty"`

	// unique size lte
	UniqueSizeLte *float64 `json:"unique_size_lte,omitempty"`

	// unique size not
	UniqueSizeNot *float64 `json:"unique_size_not,omitempty"`

	// unique size not in
	UniqueSizeNotIn []float64 `json:"unique_size_not_in,omitempty"`

	// vm disks every
	VMDisksEvery struct {
		VMDiskWhereInput
	} `json:"vm_disks_every,omitempty"`

	// vm disks none
	VMDisksNone struct {
		VMDiskWhereInput
	} `json:"vm_disks_none,omitempty"`

	// vm disks some
	VMDisksSome struct {
		VMDiskWhereInput
	} `json:"vm_disks_some,omitempty"`
}

// Validate validates this Vm volume where input
func (m *VMVolumeWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfStoragePolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfStoragePolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfStoragePolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMDisksEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMDisksNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMDisksSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVolumeWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateElfStoragePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfStoragePolicy) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateElfStoragePolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfStoragePolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ElfStoragePolicyIn); i++ {

		if err := m.ElfStoragePolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_storage_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elf_storage_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) validateElfStoragePolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfStoragePolicyNot) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateElfStoragePolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ElfStoragePolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ElfStoragePolicyNotIn); i++ {

		if err := m.ElfStoragePolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_storage_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elf_storage_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) validateLabelsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsEvery) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateLabelsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsNone) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateLabelsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelsSome) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateLun(formats strfmt.Registry) error {
	if swag.IsZero(m.Lun) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateVMDisksEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMDisksEvery) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateVMDisksNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMDisksNone) { // not required
		return nil
	}

	return nil
}

func (m *VMVolumeWhereInput) validateVMDisksSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMDisksSome) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this Vm volume where input based on the context it is used
func (m *VMVolumeWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfStoragePolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfStoragePolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElfStoragePolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMDisksEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMDisksNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMDisksSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMVolumeWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateElfStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateElfStoragePolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ElfStoragePolicyIn); i++ {

		if err := m.ElfStoragePolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_storage_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elf_storage_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) contextValidateElfStoragePolicyNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateElfStoragePolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ElfStoragePolicyNotIn); i++ {

		if err := m.ElfStoragePolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elf_storage_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elf_storage_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMVolumeWhereInput) contextValidateLabelsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateLabelsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateLabelsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateLun(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateVMDisksEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateVMDisksNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMVolumeWhereInput) contextValidateVMDisksSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *VMVolumeWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMVolumeWhereInput) UnmarshalBinary(b []byte) error {
	var res VMVolumeWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
