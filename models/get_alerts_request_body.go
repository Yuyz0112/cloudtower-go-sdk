// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetAlertsRequestBody get alerts request body
// Example: {"after":"alerts-id-string","before":"alerts-id-string","first":0,"last":0,"orderBy":"cause_ASC","skip":0,"where":{"AND":"AlertWhereInput[]","NOT":"AlertWhereInput[]","OR":"AlertWhereInput[]","alert_rule":"AlertRuleWhereInput","cause":"string","cause_contains":"string","cause_ends_with":"string","cause_gt":"string","cause_gte":"string","cause_in":["string"],"cause_lt":"string","cause_lte":"string","cause_not":"string","cause_not_contains":"string","cause_not_ends_with":"string","cause_not_in":["string"],"cause_not_starts_with":"string","cause_starts_with":"string","cluster":"ClusterWhereInput","create_time":"string","create_time_gt":"string","create_time_gte":"string","create_time_in":["string"],"create_time_lt":"string","create_time_lte":"string","create_time_not":"string","create_time_not_in":["string"],"disk":"DiskWhereInput","ended":false,"ended_not":false,"host":"HostWhereInput","id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","impact":"string","impact_contains":"string","impact_ends_with":"string","impact_gt":"string","impact_gte":"string","impact_in":["string"],"impact_lt":"string","impact_lte":"string","impact_not":"string","impact_not_contains":"string","impact_not_ends_with":"string","impact_not_in":["string"],"impact_not_starts_with":"string","impact_starts_with":"string","local_create_time":"string","local_create_time_gt":"string","local_create_time_gte":"string","local_create_time_in":["string"],"local_create_time_lt":"string","local_create_time_lte":"string","local_create_time_not":"string","local_create_time_not_in":["string"],"local_end_time":"string","local_end_time_contains":"string","local_end_time_ends_with":"string","local_end_time_gt":"string","local_end_time_gte":"string","local_end_time_in":["string"],"local_end_time_lt":"string","local_end_time_lte":"string","local_end_time_not":"string","local_end_time_not_contains":"string","local_end_time_not_ends_with":"string","local_end_time_not_in":["string"],"local_end_time_not_starts_with":"string","local_end_time_starts_with":"string","local_id":"string","local_id_contains":"string","local_id_ends_with":"string","local_id_gt":"string","local_id_gte":"string","local_id_in":["string"],"local_id_lt":"string","local_id_lte":"string","local_id_not":"string","local_id_not_contains":"string","local_id_not_ends_with":"string","local_id_not_in":["string"],"local_id_not_starts_with":"string","local_id_starts_with":"string","local_start_time":"string","local_start_time_contains":"string","local_start_time_ends_with":"string","local_start_time_gt":"string","local_start_time_gte":"string","local_start_time_in":["string"],"local_start_time_lt":"string","local_start_time_lte":"string","local_start_time_not":"string","local_start_time_not_contains":"string","local_start_time_not_ends_with":"string","local_start_time_not_in":["string"],"local_start_time_not_starts_with":"string","local_start_time_starts_with":"string","local_update_time":"string","local_update_time_contains":"string","local_update_time_ends_with":"string","local_update_time_gt":"string","local_update_time_gte":"string","local_update_time_in":["string"],"local_update_time_lt":"string","local_update_time_lte":"string","local_update_time_not":"string","local_update_time_not_contains":"string","local_update_time_not_ends_with":"string","local_update_time_not_in":["string"],"local_update_time_not_starts_with":"string","local_update_time_starts_with":"string","message":"string","message_contains":"string","message_ends_with":"string","message_gt":"string","message_gte":"string","message_in":["string"],"message_lt":"string","message_lte":"string","message_not":"string","message_not_contains":"string","message_not_ends_with":"string","message_not_in":["string"],"message_not_starts_with":"string","message_starts_with":"string","severity":"string","severity_contains":"string","severity_ends_with":"string","severity_gt":"string","severity_gte":"string","severity_in":["string"],"severity_lt":"string","severity_lte":"string","severity_not":"string","severity_not_contains":"string","severity_not_ends_with":"string","severity_not_in":["string"],"severity_not_starts_with":"string","severity_starts_with":"string","solution":"string","solution_contains":"string","solution_ends_with":"string","solution_gt":"string","solution_gte":"string","solution_in":["string"],"solution_lt":"string","solution_lte":"string","solution_not":"string","solution_not_contains":"string","solution_not_ends_with":"string","solution_not_in":["string"],"solution_not_starts_with":"string","solution_starts_with":"string","threshold":0,"threshold_gt":0,"threshold_gte":0,"threshold_in":[0],"threshold_lt":0,"threshold_lte":0,"threshold_not":0,"threshold_not_in":[0],"value":0,"value_gt":0,"value_gte":0,"value_in":[0],"value_lt":0,"value_lte":0,"value_not":0,"value_not_in":[0],"vms_every":"VmWhereInput","vms_none":"VmWhereInput","vms_some":"VmWhereInput"}}
//
// swagger:model GetAlertsRequestBody
type GetAlertsRequestBody struct {

	// after
	After *string `json:"after,omitempty"`

	// before
	Before *string `json:"before,omitempty"`

	// first
	First *int32 `json:"first,omitempty"`

	// last
	Last *int32 `json:"last,omitempty"`

	// order by
	OrderBy interface{} `json:"orderBy,omitempty"`

	// skip
	Skip *int32 `json:"skip,omitempty"`

	// where
	Where interface{} `json:"where,omitempty"`
}

// Validate validates this get alerts request body
func (m *GetAlertsRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get alerts request body based on context it is used
func (m *GetAlertsRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetAlertsRequestBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAlertsRequestBody) UnmarshalBinary(b []byte) error {
	var res GetAlertsRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
