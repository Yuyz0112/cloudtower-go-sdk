// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PartitionUsage partition usage
//
// swagger:model PartitionUsage
type PartitionUsage string

func NewPartitionUsage(value PartitionUsage) *PartitionUsage {
	v := value
	return &v
}

const (

	// PartitionUsageBOOT captures enum value "BOOT"
	PartitionUsageBOOT PartitionUsage = "BOOT"

	// PartitionUsageCACHE captures enum value "CACHE"
	PartitionUsageCACHE PartitionUsage = "CACHE"

	// PartitionUsageJOURNAL captures enum value "JOURNAL"
	PartitionUsageJOURNAL PartitionUsage = "JOURNAL"

	// PartitionUsageMETAD captures enum value "METAD"
	PartitionUsageMETAD PartitionUsage = "METAD"

	// PartitionUsagePARTITION captures enum value "PARTITION"
	PartitionUsagePARTITION PartitionUsage = "PARTITION"

	// PartitionUsageSWAP captures enum value "SWAP"
	PartitionUsageSWAP PartitionUsage = "SWAP"

	// PartitionUsageSYSTEM captures enum value "SYSTEM"
	PartitionUsageSYSTEM PartitionUsage = "SYSTEM"

	// PartitionUsageUNMOUNTED captures enum value "UNMOUNTED"
	PartitionUsageUNMOUNTED PartitionUsage = "UNMOUNTED"

	// PartitionUsageUNPARTED captures enum value "UNPARTED"
	PartitionUsageUNPARTED PartitionUsage = "UNPARTED"

	// PartitionUsageZOOKEEPER captures enum value "ZOOKEEPER"
	PartitionUsageZOOKEEPER PartitionUsage = "ZOOKEEPER"
)

// for schema
var partitionUsageEnum []interface{}

func init() {
	var res []PartitionUsage
	if err := json.Unmarshal([]byte(`["BOOT","CACHE","JOURNAL","METAD","PARTITION","SWAP","SYSTEM","UNMOUNTED","UNPARTED","ZOOKEEPER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partitionUsageEnum = append(partitionUsageEnum, v)
	}
}

func (m PartitionUsage) validatePartitionUsageEnum(path, location string, value PartitionUsage) error {
	if err := validate.EnumCase(path, location, value, partitionUsageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this partition usage
func (m PartitionUsage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePartitionUsageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this partition usage based on context it is used
func (m PartitionUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
