// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EverouteLicenseOrderByInput everoute license order by input
//
// swagger:model EverouteLicenseOrderByInput
type EverouteLicenseOrderByInput string

func NewEverouteLicenseOrderByInput(value EverouteLicenseOrderByInput) *EverouteLicenseOrderByInput {
	v := value
	return &v
}

const (

	// EverouteLicenseOrderByInputCodeASC captures enum value "code_ASC"
	EverouteLicenseOrderByInputCodeASC EverouteLicenseOrderByInput = "code_ASC"

	// EverouteLicenseOrderByInputCodeDESC captures enum value "code_DESC"
	EverouteLicenseOrderByInputCodeDESC EverouteLicenseOrderByInput = "code_DESC"

	// EverouteLicenseOrderByInputCreatedAtASC captures enum value "createdAt_ASC"
	EverouteLicenseOrderByInputCreatedAtASC EverouteLicenseOrderByInput = "createdAt_ASC"

	// EverouteLicenseOrderByInputCreatedAtDESC captures enum value "createdAt_DESC"
	EverouteLicenseOrderByInputCreatedAtDESC EverouteLicenseOrderByInput = "createdAt_DESC"

	// EverouteLicenseOrderByInputExpireDateASC captures enum value "expire_date_ASC"
	EverouteLicenseOrderByInputExpireDateASC EverouteLicenseOrderByInput = "expire_date_ASC"

	// EverouteLicenseOrderByInputExpireDateDESC captures enum value "expire_date_DESC"
	EverouteLicenseOrderByInputExpireDateDESC EverouteLicenseOrderByInput = "expire_date_DESC"

	// EverouteLicenseOrderByInputIDASC captures enum value "id_ASC"
	EverouteLicenseOrderByInputIDASC EverouteLicenseOrderByInput = "id_ASC"

	// EverouteLicenseOrderByInputIDDESC captures enum value "id_DESC"
	EverouteLicenseOrderByInputIDDESC EverouteLicenseOrderByInput = "id_DESC"

	// EverouteLicenseOrderByInputMaxSocketNumASC captures enum value "max_socket_num_ASC"
	EverouteLicenseOrderByInputMaxSocketNumASC EverouteLicenseOrderByInput = "max_socket_num_ASC"

	// EverouteLicenseOrderByInputMaxSocketNumDESC captures enum value "max_socket_num_DESC"
	EverouteLicenseOrderByInputMaxSocketNumDESC EverouteLicenseOrderByInput = "max_socket_num_DESC"

	// EverouteLicenseOrderByInputSerialASC captures enum value "serial_ASC"
	EverouteLicenseOrderByInputSerialASC EverouteLicenseOrderByInput = "serial_ASC"

	// EverouteLicenseOrderByInputSerialDESC captures enum value "serial_DESC"
	EverouteLicenseOrderByInputSerialDESC EverouteLicenseOrderByInput = "serial_DESC"

	// EverouteLicenseOrderByInputSignDateASC captures enum value "sign_date_ASC"
	EverouteLicenseOrderByInputSignDateASC EverouteLicenseOrderByInput = "sign_date_ASC"

	// EverouteLicenseOrderByInputSignDateDESC captures enum value "sign_date_DESC"
	EverouteLicenseOrderByInputSignDateDESC EverouteLicenseOrderByInput = "sign_date_DESC"

	// EverouteLicenseOrderByInputSoftwareEditionASC captures enum value "software_edition_ASC"
	EverouteLicenseOrderByInputSoftwareEditionASC EverouteLicenseOrderByInput = "software_edition_ASC"

	// EverouteLicenseOrderByInputSoftwareEditionDESC captures enum value "software_edition_DESC"
	EverouteLicenseOrderByInputSoftwareEditionDESC EverouteLicenseOrderByInput = "software_edition_DESC"

	// EverouteLicenseOrderByInputTypeASC captures enum value "type_ASC"
	EverouteLicenseOrderByInputTypeASC EverouteLicenseOrderByInput = "type_ASC"

	// EverouteLicenseOrderByInputTypeDESC captures enum value "type_DESC"
	EverouteLicenseOrderByInputTypeDESC EverouteLicenseOrderByInput = "type_DESC"

	// EverouteLicenseOrderByInputUIDASC captures enum value "uid_ASC"
	EverouteLicenseOrderByInputUIDASC EverouteLicenseOrderByInput = "uid_ASC"

	// EverouteLicenseOrderByInputUIDDESC captures enum value "uid_DESC"
	EverouteLicenseOrderByInputUIDDESC EverouteLicenseOrderByInput = "uid_DESC"

	// EverouteLicenseOrderByInputUpdatedAtASC captures enum value "updatedAt_ASC"
	EverouteLicenseOrderByInputUpdatedAtASC EverouteLicenseOrderByInput = "updatedAt_ASC"

	// EverouteLicenseOrderByInputUpdatedAtDESC captures enum value "updatedAt_DESC"
	EverouteLicenseOrderByInputUpdatedAtDESC EverouteLicenseOrderByInput = "updatedAt_DESC"
)

// for schema
var everouteLicenseOrderByInputEnum []interface{}

func init() {
	var res []EverouteLicenseOrderByInput
	if err := json.Unmarshal([]byte(`["code_ASC","code_DESC","createdAt_ASC","createdAt_DESC","expire_date_ASC","expire_date_DESC","id_ASC","id_DESC","max_socket_num_ASC","max_socket_num_DESC","serial_ASC","serial_DESC","sign_date_ASC","sign_date_DESC","software_edition_ASC","software_edition_DESC","type_ASC","type_DESC","uid_ASC","uid_DESC","updatedAt_ASC","updatedAt_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		everouteLicenseOrderByInputEnum = append(everouteLicenseOrderByInputEnum, v)
	}
}

func (m EverouteLicenseOrderByInput) validateEverouteLicenseOrderByInputEnum(path, location string, value EverouteLicenseOrderByInput) error {
	if err := validate.EnumCase(path, location, value, everouteLicenseOrderByInputEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this everoute license order by input
func (m EverouteLicenseOrderByInput) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEverouteLicenseOrderByInputEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this everoute license order by input based on context it is used
func (m EverouteLicenseOrderByInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
