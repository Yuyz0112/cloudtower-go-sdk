// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BrickTopo brick topo
//
// swagger:model BrickTopo
type BrickTopo struct {

	// capacity
	// Required: true
	Capacity *BrickTopoCapacity `json:"capacity"`

	// cluster
	// Required: true
	Cluster *BrickTopoCluster `json:"cluster"`

	// cluster topo
	ClusterTopo *BrickTopoClusterTopo `json:"cluster_topo,omitempty"`

	// disk layout
	DiskLayout *BrickTopoDiskLayout `json:"disk_layout,omitempty"`

	// height
	// Required: true
	Height *float64 `json:"height"`

	// id
	// Required: true
	ID *string `json:"id"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// model
	Model *string `json:"model,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// node topoes
	NodeTopoes []*BrickTopoNodeTopoesItems0 `json:"node_topoes,omitempty"`

	// position
	// Required: true
	Position *float64 `json:"position"`

	// power layout
	PowerLayout interface{} `json:"power_layout,omitempty"`

	// power position
	PowerPosition interface{} `json:"power_position,omitempty"`

	// powers
	Powers []*BrickTopoPowersItems0 `json:"powers,omitempty"`

	// rack topo
	RackTopo *BrickTopoRackTopo `json:"rack_topo,omitempty"`

	// tag position in brick
	TagPositionInBrick []*BrickTopoTagPositionInBrickItems0 `json:"tag_position_in_brick,omitempty"`
}

// Validate validates this brick topo
func (m *BrickTopo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterTopo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskLayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTopoes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRackTopo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagPositionInBrick(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopo) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("capacity", "body", m.Capacity); err != nil {
		return err
	}

	if m.Capacity != nil {
		if err := m.Capacity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateClusterTopo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterTopo) { // not required
		return nil
	}

	if m.ClusterTopo != nil {
		if err := m.ClusterTopo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateDiskLayout(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskLayout) { // not required
		return nil
	}

	if m.DiskLayout != nil {
		if err := m.DiskLayout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validateNodeTopoes(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTopoes) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeTopoes); i++ {
		if swag.IsZero(m.NodeTopoes[i]) { // not required
			continue
		}

		if m.NodeTopoes[i] != nil {
			if err := m.NodeTopoes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_topoes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopo) validatePowers(formats strfmt.Registry) error {
	if swag.IsZero(m.Powers) { // not required
		return nil
	}

	for i := 0; i < len(m.Powers); i++ {
		if swag.IsZero(m.Powers[i]) { // not required
			continue
		}

		if m.Powers[i] != nil {
			if err := m.Powers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("powers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) validateRackTopo(formats strfmt.Registry) error {
	if swag.IsZero(m.RackTopo) { // not required
		return nil
	}

	if m.RackTopo != nil {
		if err := m.RackTopo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rack_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) validateTagPositionInBrick(formats strfmt.Registry) error {
	if swag.IsZero(m.TagPositionInBrick) { // not required
		return nil
	}

	for i := 0; i < len(m.TagPositionInBrick); i++ {
		if swag.IsZero(m.TagPositionInBrick[i]) { // not required
			continue
		}

		if m.TagPositionInBrick[i] != nil {
			if err := m.TagPositionInBrick[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_position_in_brick" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this brick topo based on the context it is used
func (m *BrickTopo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterTopo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiskLayout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTopoes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePowers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRackTopo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagPositionInBrick(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopo) contextValidateCapacity(ctx context.Context, formats strfmt.Registry) error {

	if m.Capacity != nil {
		if err := m.Capacity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacity")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateClusterTopo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterTopo != nil {
		if err := m.ClusterTopo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateDiskLayout(ctx context.Context, formats strfmt.Registry) error {

	if m.DiskLayout != nil {
		if err := m.DiskLayout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateNodeTopoes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeTopoes); i++ {

		if m.NodeTopoes[i] != nil {
			if err := m.NodeTopoes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("node_topoes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) contextValidatePowers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Powers); i++ {

		if m.Powers[i] != nil {
			if err := m.Powers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("powers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BrickTopo) contextValidateRackTopo(ctx context.Context, formats strfmt.Registry) error {

	if m.RackTopo != nil {
		if err := m.RackTopo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rack_topo")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopo) contextValidateTagPositionInBrick(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagPositionInBrick); i++ {

		if m.TagPositionInBrick[i] != nil {
			if err := m.TagPositionInBrick[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_position_in_brick" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopo) UnmarshalBinary(b []byte) error {
	var res BrickTopo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoCapacity brick topo capacity
//
// swagger:model BrickTopoCapacity
type BrickTopoCapacity struct {

	// column
	Column *float64 `json:"column,omitempty"`

	// row
	Row *float64 `json:"row,omitempty"`
}

// Validate validates this brick topo capacity
func (m *BrickTopoCapacity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this brick topo capacity based on context it is used
func (m *BrickTopoCapacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoCapacity) UnmarshalBinary(b []byte) error {
	var res BrickTopoCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoCluster brick topo cluster
//
// swagger:model BrickTopoCluster
type BrickTopoCluster struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this brick topo cluster
func (m *BrickTopoCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoCluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopoCluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this brick topo cluster based on context it is used
func (m *BrickTopoCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoCluster) UnmarshalBinary(b []byte) error {
	var res BrickTopoCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoClusterTopo brick topo cluster topo
//
// swagger:model BrickTopoClusterTopo
type BrickTopoClusterTopo struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this brick topo cluster topo
func (m *BrickTopoClusterTopo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoClusterTopo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_topo"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopoClusterTopo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster_topo"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this brick topo cluster topo based on context it is used
func (m *BrickTopoClusterTopo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoClusterTopo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoClusterTopo) UnmarshalBinary(b []byte) error {
	var res BrickTopoClusterTopo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoDiskLayout brick topo disk layout
//
// swagger:model BrickTopoDiskLayout
type BrickTopoDiskLayout struct {

	// column
	// Required: true
	Column *float64 `json:"column"`

	// direction
	// Required: true
	Direction *Direction `json:"direction"`

	// phase
	// Required: true
	Phase *BrickPhaseEnum `json:"phase"`

	// row
	// Required: true
	Row *float64 `json:"row"`
}

// Validate validates this brick topo disk layout
func (m *BrickTopoDiskLayout) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoDiskLayout) validateColumn(formats strfmt.Registry) error {

	if err := validate.Required("disk_layout"+"."+"column", "body", m.Column); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopoDiskLayout) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("disk_layout"+"."+"direction", "body", m.Direction); err != nil {
		return err
	}

	if err := validate.Required("disk_layout"+"."+"direction", "body", m.Direction); err != nil {
		return err
	}

	if m.Direction != nil {
		if err := m.Direction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout" + "." + "direction")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoDiskLayout) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("disk_layout"+"."+"phase", "body", m.Phase); err != nil {
		return err
	}

	if err := validate.Required("disk_layout"+"."+"phase", "body", m.Phase); err != nil {
		return err
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout" + "." + "phase")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoDiskLayout) validateRow(formats strfmt.Registry) error {

	if err := validate.Required("disk_layout"+"."+"row", "body", m.Row); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this brick topo disk layout based on the context it is used
func (m *BrickTopoDiskLayout) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoDiskLayout) contextValidateDirection(ctx context.Context, formats strfmt.Registry) error {

	if m.Direction != nil {
		if err := m.Direction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout" + "." + "direction")
			}
			return err
		}
	}

	return nil
}

func (m *BrickTopoDiskLayout) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk_layout" + "." + "phase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoDiskLayout) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoDiskLayout) UnmarshalBinary(b []byte) error {
	var res BrickTopoDiskLayout
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoNodeTopoesItems0 brick topo node topoes items0
//
// swagger:model BrickTopoNodeTopoesItems0
type BrickTopoNodeTopoesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this brick topo node topoes items0
func (m *BrickTopoNodeTopoesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoNodeTopoesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopoNodeTopoesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this brick topo node topoes items0 based on context it is used
func (m *BrickTopoNodeTopoesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoNodeTopoesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoNodeTopoesItems0) UnmarshalBinary(b []byte) error {
	var res BrickTopoNodeTopoesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoPowersItems0 brick topo powers items0
//
// swagger:model BrickTopoPowersItems0
type BrickTopoPowersItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this brick topo powers items0
func (m *BrickTopoPowersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoPowersItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this brick topo powers items0 based on context it is used
func (m *BrickTopoPowersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoPowersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoPowersItems0) UnmarshalBinary(b []byte) error {
	var res BrickTopoPowersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoRackTopo brick topo rack topo
//
// swagger:model BrickTopoRackTopo
type BrickTopoRackTopo struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this brick topo rack topo
func (m *BrickTopoRackTopo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoRackTopo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("rack_topo"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopoRackTopo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("rack_topo"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this brick topo rack topo based on context it is used
func (m *BrickTopoRackTopo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoRackTopo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoRackTopo) UnmarshalBinary(b []byte) error {
	var res BrickTopoRackTopo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrickTopoTagPositionInBrickItems0 brick topo tag position in brick items0
//
// swagger:model BrickTopoTagPositionInBrickItems0
type BrickTopoTagPositionInBrickItems0 struct {

	// column
	// Required: true
	Column *float64 `json:"column"`

	// row
	// Required: true
	Row *float64 `json:"row"`

	// tag
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this brick topo tag position in brick items0
func (m *BrickTopoTagPositionInBrickItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrickTopoTagPositionInBrickItems0) validateColumn(formats strfmt.Registry) error {

	if err := validate.Required("column", "body", m.Column); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopoTagPositionInBrickItems0) validateRow(formats strfmt.Registry) error {

	if err := validate.Required("row", "body", m.Row); err != nil {
		return err
	}

	return nil
}

func (m *BrickTopoTagPositionInBrickItems0) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this brick topo tag position in brick items0 based on context it is used
func (m *BrickTopoTagPositionInBrickItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrickTopoTagPositionInBrickItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrickTopoTagPositionInBrickItems0) UnmarshalBinary(b []byte) error {
	var res BrickTopoTagPositionInBrickItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
