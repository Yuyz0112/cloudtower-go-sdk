// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupPlanWhereInput backup plan where input
// Example: {"AND":"BackupPlanWhereInput[]","NOT":"BackupPlanWhereInput[]","OR":"BackupPlanWhereInput[]","backup_delay_option":"KEEP_GO_ON","backup_delay_option_in":["KEEP_GO_ON"],"backup_delay_option_not":"KEEP_GO_ON","backup_delay_option_not_in":["KEEP_GO_ON"],"backup_plan_executions_every":"BackupPlanExecutionWhereInput","backup_plan_executions_none":"BackupPlanExecutionWhereInput","backup_plan_executions_some":"BackupPlanExecutionWhereInput","backup_restore_point_count":0,"backup_restore_point_count_gt":0,"backup_restore_point_count_gte":0,"backup_restore_point_count_in":[0],"backup_restore_point_count_lt":0,"backup_restore_point_count_lte":0,"backup_restore_point_count_not":0,"backup_restore_point_count_not_in":[0],"backup_restore_points_every":"BackupRestorePointWhereInput","backup_restore_points_none":"BackupRestorePointWhereInput","backup_restore_points_some":"BackupRestorePointWhereInput","backup_service":"BackupServiceWhereInput","backup_store_repository":"BackupStoreRepositoryWhereInput","backup_total_size":0,"backup_total_size_gt":0,"backup_total_size_gte":0,"backup_total_size_in":[0],"backup_total_size_lt":0,"backup_total_size_lte":0,"backup_total_size_not":0,"backup_total_size_not_in":[0],"compression":false,"compression_not":false,"delete_strategy":"DELETE_RESTORE_POINT","delete_strategy_in":["DELETE_RESTORE_POINT"],"delete_strategy_not":"DELETE_RESTORE_POINT","delete_strategy_not_in":["DELETE_RESTORE_POINT"],"description":"string","description_contains":"string","description_ends_with":"string","description_gt":"string","description_gte":"string","description_in":["string"],"description_lt":"string","description_lte":"string","description_not":"string","description_not_contains":"string","description_not_ends_with":"string","description_not_in":["string"],"description_not_starts_with":"string","description_starts_with":"string","enable_window":false,"enable_window_not":false,"entityAsyncStatus":"CREATING","entityAsyncStatus_in":["CREATING"],"entityAsyncStatus_not":"CREATING","entityAsyncStatus_not_in":["CREATING"],"full_interval":0,"full_interval_gt":0,"full_interval_gte":0,"full_interval_in":[0],"full_interval_lt":0,"full_interval_lte":0,"full_interval_not":0,"full_interval_not_in":[0],"full_period":"DAILY","full_period_in":["DAILY"],"full_period_not":"DAILY","full_period_not_in":["DAILY"],"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","incremental_period":"DAILY","incremental_period_in":["DAILY"],"incremental_period_not":"DAILY","incremental_period_not_in":["DAILY"],"keep_policy":"COUNT","keep_policy_in":["COUNT"],"keep_policy_not":"COUNT","keep_policy_not_in":["COUNT"],"keep_policy_value":0,"keep_policy_value_gt":0,"keep_policy_value_gte":0,"keep_policy_value_in":[0],"keep_policy_value_lt":0,"keep_policy_value_lte":0,"keep_policy_value_not":0,"keep_policy_value_not_in":[0],"last_execute_status":"FAILED","last_execute_status_in":["FAILED"],"last_execute_status_message":"string","last_execute_status_message_contains":"string","last_execute_status_message_ends_with":"string","last_execute_status_message_gt":"string","last_execute_status_message_gte":"string","last_execute_status_message_in":["string"],"last_execute_status_message_lt":"string","last_execute_status_message_lte":"string","last_execute_status_message_not":"string","last_execute_status_message_not_contains":"string","last_execute_status_message_not_ends_with":"string","last_execute_status_message_not_in":["string"],"last_execute_status_message_not_starts_with":"string","last_execute_status_message_starts_with":"string","last_execute_status_not":"FAILED","last_execute_status_not_in":["FAILED"],"last_execute_success_job_count":0,"last_execute_success_job_count_gt":0,"last_execute_success_job_count_gte":0,"last_execute_success_job_count_in":[0],"last_execute_success_job_count_lt":0,"last_execute_success_job_count_lte":0,"last_execute_success_job_count_not":0,"last_execute_success_job_count_not_in":[0],"last_execute_total_job_count":0,"last_execute_total_job_count_gt":0,"last_execute_total_job_count_gte":0,"last_execute_total_job_count_in":[0],"last_execute_total_job_count_lt":0,"last_execute_total_job_count_lte":0,"last_execute_total_job_count_not":0,"last_execute_total_job_count_not_in":[0],"last_executed_at":"string","last_executed_at_gt":"string","last_executed_at_gte":"string","last_executed_at_in":["string"],"last_executed_at_lt":"string","last_executed_at_lte":"string","last_executed_at_not":"string","last_executed_at_not_in":["string"],"name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","namespace":"string","namespace_contains":"string","namespace_ends_with":"string","namespace_gt":"string","namespace_gte":"string","namespace_in":["string"],"namespace_lt":"string","namespace_lte":"string","namespace_not":"string","namespace_not_contains":"string","namespace_not_ends_with":"string","namespace_not_in":["string"],"namespace_not_starts_with":"string","namespace_starts_with":"string","next_execute_time":"string","next_execute_time_gt":"string","next_execute_time_gte":"string","next_execute_time_in":["string"],"next_execute_time_lt":"string","next_execute_time_lte":"string","next_execute_time_not":"string","next_execute_time_not_in":["string"],"resource_version_gt":0,"resource_version_gte":0,"resource_version_in":[0],"resource_version_lt":0,"resource_version_lte":0,"resource_version_not":0,"resource_version_not_in":[0],"status":"PAUSED","status_in":["PAUSED"],"status_not":"PAUSED","status_not_in":["PAUSED"],"vms_every":"VmWhereInput","vms_none":"VmWhereInput","vms_some":"VmWhereInput","window_end":"string","window_end_contains":"string","window_end_ends_with":"string","window_end_gt":"string","window_end_gte":"string","window_end_in":["string"],"window_end_lt":"string","window_end_lte":"string","window_end_not":"string","window_end_not_contains":"string","window_end_not_ends_with":"string","window_end_not_in":["string"],"window_end_not_starts_with":"string","window_end_starts_with":"string","window_start":"string","window_start_contains":"string","window_start_ends_with":"string","window_start_gt":"string","window_start_gte":"string","window_start_in":["string"],"window_start_lt":"string","window_start_lte":"string","window_start_not":"string","window_start_not_contains":"string","window_start_not_ends_with":"string","window_start_not_in":["string"],"window_start_not_starts_with":"string","window_start_starts_with":"string"}
//
// swagger:model BackupPlanWhereInput
type BackupPlanWhereInput struct {

	// a n d
	AND []*BackupPlanWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*BackupPlanWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*BackupPlanWhereInput `json:"OR,omitempty"`

	// backup delay option
	BackupDelayOption interface{} `json:"backup_delay_option,omitempty"`

	// backup delay option in
	BackupDelayOptionIn []BackupPlanDelayOption `json:"backup_delay_option_in,omitempty"`

	// backup delay option not
	BackupDelayOptionNot interface{} `json:"backup_delay_option_not,omitempty"`

	// backup delay option not in
	BackupDelayOptionNotIn []BackupPlanDelayOption `json:"backup_delay_option_not_in,omitempty"`

	// backup plan executions every
	BackupPlanExecutionsEvery interface{} `json:"backup_plan_executions_every,omitempty"`

	// backup plan executions none
	BackupPlanExecutionsNone interface{} `json:"backup_plan_executions_none,omitempty"`

	// backup plan executions some
	BackupPlanExecutionsSome interface{} `json:"backup_plan_executions_some,omitempty"`

	// backup restore point count
	BackupRestorePointCount *int32 `json:"backup_restore_point_count,omitempty"`

	// backup restore point count gt
	BackupRestorePointCountGt *int32 `json:"backup_restore_point_count_gt,omitempty"`

	// backup restore point count gte
	BackupRestorePointCountGte *int32 `json:"backup_restore_point_count_gte,omitempty"`

	// backup restore point count in
	BackupRestorePointCountIn []int32 `json:"backup_restore_point_count_in,omitempty"`

	// backup restore point count lt
	BackupRestorePointCountLt *int32 `json:"backup_restore_point_count_lt,omitempty"`

	// backup restore point count lte
	BackupRestorePointCountLte *int32 `json:"backup_restore_point_count_lte,omitempty"`

	// backup restore point count not
	BackupRestorePointCountNot *int32 `json:"backup_restore_point_count_not,omitempty"`

	// backup restore point count not in
	BackupRestorePointCountNotIn []int32 `json:"backup_restore_point_count_not_in,omitempty"`

	// backup restore points every
	BackupRestorePointsEvery interface{} `json:"backup_restore_points_every,omitempty"`

	// backup restore points none
	BackupRestorePointsNone interface{} `json:"backup_restore_points_none,omitempty"`

	// backup restore points some
	BackupRestorePointsSome interface{} `json:"backup_restore_points_some,omitempty"`

	// backup service
	BackupService interface{} `json:"backup_service,omitempty"`

	// backup store repository
	BackupStoreRepository interface{} `json:"backup_store_repository,omitempty"`

	// backup total size
	BackupTotalSize *float64 `json:"backup_total_size,omitempty"`

	// backup total size gt
	BackupTotalSizeGt *float64 `json:"backup_total_size_gt,omitempty"`

	// backup total size gte
	BackupTotalSizeGte *float64 `json:"backup_total_size_gte,omitempty"`

	// backup total size in
	BackupTotalSizeIn []float64 `json:"backup_total_size_in,omitempty"`

	// backup total size lt
	BackupTotalSizeLt *float64 `json:"backup_total_size_lt,omitempty"`

	// backup total size lte
	BackupTotalSizeLte *float64 `json:"backup_total_size_lte,omitempty"`

	// backup total size not
	BackupTotalSizeNot *float64 `json:"backup_total_size_not,omitempty"`

	// backup total size not in
	BackupTotalSizeNotIn []float64 `json:"backup_total_size_not_in,omitempty"`

	// compression
	Compression *bool `json:"compression,omitempty"`

	// compression not
	CompressionNot *bool `json:"compression_not,omitempty"`

	// delete strategy
	DeleteStrategy interface{} `json:"delete_strategy,omitempty"`

	// delete strategy in
	DeleteStrategyIn []BackupPlanDeleteStrategy `json:"delete_strategy_in,omitempty"`

	// delete strategy not
	DeleteStrategyNot interface{} `json:"delete_strategy_not,omitempty"`

	// delete strategy not in
	DeleteStrategyNotIn []BackupPlanDeleteStrategy `json:"delete_strategy_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// enable window
	EnableWindow *bool `json:"enable_window,omitempty"`

	// enable window not
	EnableWindowNot *bool `json:"enable_window_not,omitempty"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot interface{} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// full interval
	FullInterval *int32 `json:"full_interval,omitempty"`

	// full interval gt
	FullIntervalGt *int32 `json:"full_interval_gt,omitempty"`

	// full interval gte
	FullIntervalGte *int32 `json:"full_interval_gte,omitempty"`

	// full interval in
	FullIntervalIn []int32 `json:"full_interval_in,omitempty"`

	// full interval lt
	FullIntervalLt *int32 `json:"full_interval_lt,omitempty"`

	// full interval lte
	FullIntervalLte *int32 `json:"full_interval_lte,omitempty"`

	// full interval not
	FullIntervalNot *int32 `json:"full_interval_not,omitempty"`

	// full interval not in
	FullIntervalNotIn []int32 `json:"full_interval_not_in,omitempty"`

	// full period
	FullPeriod interface{} `json:"full_period,omitempty"`

	// full period in
	FullPeriodIn []BackupPlanPeriod `json:"full_period_in,omitempty"`

	// full period not
	FullPeriodNot interface{} `json:"full_period_not,omitempty"`

	// full period not in
	FullPeriodNotIn []BackupPlanPeriod `json:"full_period_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// incremental period
	IncrementalPeriod interface{} `json:"incremental_period,omitempty"`

	// incremental period in
	IncrementalPeriodIn []BackupPlanPeriod `json:"incremental_period_in,omitempty"`

	// incremental period not
	IncrementalPeriodNot interface{} `json:"incremental_period_not,omitempty"`

	// incremental period not in
	IncrementalPeriodNotIn []BackupPlanPeriod `json:"incremental_period_not_in,omitempty"`

	// keep policy
	KeepPolicy interface{} `json:"keep_policy,omitempty"`

	// keep policy in
	KeepPolicyIn []BackupPlanKeepPolicy `json:"keep_policy_in,omitempty"`

	// keep policy not
	KeepPolicyNot interface{} `json:"keep_policy_not,omitempty"`

	// keep policy not in
	KeepPolicyNotIn []BackupPlanKeepPolicy `json:"keep_policy_not_in,omitempty"`

	// keep policy value
	KeepPolicyValue *int32 `json:"keep_policy_value,omitempty"`

	// keep policy value gt
	KeepPolicyValueGt *int32 `json:"keep_policy_value_gt,omitempty"`

	// keep policy value gte
	KeepPolicyValueGte *int32 `json:"keep_policy_value_gte,omitempty"`

	// keep policy value in
	KeepPolicyValueIn []int32 `json:"keep_policy_value_in,omitempty"`

	// keep policy value lt
	KeepPolicyValueLt *int32 `json:"keep_policy_value_lt,omitempty"`

	// keep policy value lte
	KeepPolicyValueLte *int32 `json:"keep_policy_value_lte,omitempty"`

	// keep policy value not
	KeepPolicyValueNot *int32 `json:"keep_policy_value_not,omitempty"`

	// keep policy value not in
	KeepPolicyValueNotIn []int32 `json:"keep_policy_value_not_in,omitempty"`

	// last execute status
	LastExecuteStatus interface{} `json:"last_execute_status,omitempty"`

	// last execute status in
	LastExecuteStatusIn []BackupPlanExecutionStatus `json:"last_execute_status_in,omitempty"`

	// last execute status message
	LastExecuteStatusMessage *string `json:"last_execute_status_message,omitempty"`

	// last execute status message contains
	LastExecuteStatusMessageContains *string `json:"last_execute_status_message_contains,omitempty"`

	// last execute status message ends with
	LastExecuteStatusMessageEndsWith *string `json:"last_execute_status_message_ends_with,omitempty"`

	// last execute status message gt
	LastExecuteStatusMessageGt *string `json:"last_execute_status_message_gt,omitempty"`

	// last execute status message gte
	LastExecuteStatusMessageGte *string `json:"last_execute_status_message_gte,omitempty"`

	// last execute status message in
	LastExecuteStatusMessageIn []string `json:"last_execute_status_message_in,omitempty"`

	// last execute status message lt
	LastExecuteStatusMessageLt *string `json:"last_execute_status_message_lt,omitempty"`

	// last execute status message lte
	LastExecuteStatusMessageLte *string `json:"last_execute_status_message_lte,omitempty"`

	// last execute status message not
	LastExecuteStatusMessageNot *string `json:"last_execute_status_message_not,omitempty"`

	// last execute status message not contains
	LastExecuteStatusMessageNotContains *string `json:"last_execute_status_message_not_contains,omitempty"`

	// last execute status message not ends with
	LastExecuteStatusMessageNotEndsWith *string `json:"last_execute_status_message_not_ends_with,omitempty"`

	// last execute status message not in
	LastExecuteStatusMessageNotIn []string `json:"last_execute_status_message_not_in,omitempty"`

	// last execute status message not starts with
	LastExecuteStatusMessageNotStartsWith *string `json:"last_execute_status_message_not_starts_with,omitempty"`

	// last execute status message starts with
	LastExecuteStatusMessageStartsWith *string `json:"last_execute_status_message_starts_with,omitempty"`

	// last execute status not
	LastExecuteStatusNot interface{} `json:"last_execute_status_not,omitempty"`

	// last execute status not in
	LastExecuteStatusNotIn []BackupPlanExecutionStatus `json:"last_execute_status_not_in,omitempty"`

	// last execute success job count
	LastExecuteSuccessJobCount *int32 `json:"last_execute_success_job_count,omitempty"`

	// last execute success job count gt
	LastExecuteSuccessJobCountGt *int32 `json:"last_execute_success_job_count_gt,omitempty"`

	// last execute success job count gte
	LastExecuteSuccessJobCountGte *int32 `json:"last_execute_success_job_count_gte,omitempty"`

	// last execute success job count in
	LastExecuteSuccessJobCountIn []int32 `json:"last_execute_success_job_count_in,omitempty"`

	// last execute success job count lt
	LastExecuteSuccessJobCountLt *int32 `json:"last_execute_success_job_count_lt,omitempty"`

	// last execute success job count lte
	LastExecuteSuccessJobCountLte *int32 `json:"last_execute_success_job_count_lte,omitempty"`

	// last execute success job count not
	LastExecuteSuccessJobCountNot *int32 `json:"last_execute_success_job_count_not,omitempty"`

	// last execute success job count not in
	LastExecuteSuccessJobCountNotIn []int32 `json:"last_execute_success_job_count_not_in,omitempty"`

	// last execute total job count
	LastExecuteTotalJobCount *int32 `json:"last_execute_total_job_count,omitempty"`

	// last execute total job count gt
	LastExecuteTotalJobCountGt *int32 `json:"last_execute_total_job_count_gt,omitempty"`

	// last execute total job count gte
	LastExecuteTotalJobCountGte *int32 `json:"last_execute_total_job_count_gte,omitempty"`

	// last execute total job count in
	LastExecuteTotalJobCountIn []int32 `json:"last_execute_total_job_count_in,omitempty"`

	// last execute total job count lt
	LastExecuteTotalJobCountLt *int32 `json:"last_execute_total_job_count_lt,omitempty"`

	// last execute total job count lte
	LastExecuteTotalJobCountLte *int32 `json:"last_execute_total_job_count_lte,omitempty"`

	// last execute total job count not
	LastExecuteTotalJobCountNot *int32 `json:"last_execute_total_job_count_not,omitempty"`

	// last execute total job count not in
	LastExecuteTotalJobCountNotIn []int32 `json:"last_execute_total_job_count_not_in,omitempty"`

	// last executed at
	LastExecutedAt *string `json:"last_executed_at,omitempty"`

	// last executed at gt
	LastExecutedAtGt *string `json:"last_executed_at_gt,omitempty"`

	// last executed at gte
	LastExecutedAtGte *string `json:"last_executed_at_gte,omitempty"`

	// last executed at in
	LastExecutedAtIn []string `json:"last_executed_at_in,omitempty"`

	// last executed at lt
	LastExecutedAtLt *string `json:"last_executed_at_lt,omitempty"`

	// last executed at lte
	LastExecutedAtLte *string `json:"last_executed_at_lte,omitempty"`

	// last executed at not
	LastExecutedAtNot *string `json:"last_executed_at_not,omitempty"`

	// last executed at not in
	LastExecutedAtNotIn []string `json:"last_executed_at_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// namespace
	Namespace *string `json:"namespace,omitempty"`

	// namespace contains
	NamespaceContains *string `json:"namespace_contains,omitempty"`

	// namespace ends with
	NamespaceEndsWith *string `json:"namespace_ends_with,omitempty"`

	// namespace gt
	NamespaceGt *string `json:"namespace_gt,omitempty"`

	// namespace gte
	NamespaceGte *string `json:"namespace_gte,omitempty"`

	// namespace in
	NamespaceIn []string `json:"namespace_in,omitempty"`

	// namespace lt
	NamespaceLt *string `json:"namespace_lt,omitempty"`

	// namespace lte
	NamespaceLte *string `json:"namespace_lte,omitempty"`

	// namespace not
	NamespaceNot *string `json:"namespace_not,omitempty"`

	// namespace not contains
	NamespaceNotContains *string `json:"namespace_not_contains,omitempty"`

	// namespace not ends with
	NamespaceNotEndsWith *string `json:"namespace_not_ends_with,omitempty"`

	// namespace not in
	NamespaceNotIn []string `json:"namespace_not_in,omitempty"`

	// namespace not starts with
	NamespaceNotStartsWith *string `json:"namespace_not_starts_with,omitempty"`

	// namespace starts with
	NamespaceStartsWith *string `json:"namespace_starts_with,omitempty"`

	// next execute time
	NextExecuteTime *string `json:"next_execute_time,omitempty"`

	// next execute time gt
	NextExecuteTimeGt *string `json:"next_execute_time_gt,omitempty"`

	// next execute time gte
	NextExecuteTimeGte *string `json:"next_execute_time_gte,omitempty"`

	// next execute time in
	NextExecuteTimeIn []string `json:"next_execute_time_in,omitempty"`

	// next execute time lt
	NextExecuteTimeLt *string `json:"next_execute_time_lt,omitempty"`

	// next execute time lte
	NextExecuteTimeLte *string `json:"next_execute_time_lte,omitempty"`

	// next execute time not
	NextExecuteTimeNot *string `json:"next_execute_time_not,omitempty"`

	// next execute time not in
	NextExecuteTimeNotIn []string `json:"next_execute_time_not_in,omitempty"`

	// resource version gt
	ResourceVersionGt *int32 `json:"resource_version_gt,omitempty"`

	// resource version gte
	ResourceVersionGte *int32 `json:"resource_version_gte,omitempty"`

	// resource version in
	ResourceVersionIn []int32 `json:"resource_version_in,omitempty"`

	// resource version lt
	ResourceVersionLt *int32 `json:"resource_version_lt,omitempty"`

	// resource version lte
	ResourceVersionLte *int32 `json:"resource_version_lte,omitempty"`

	// resource version not
	ResourceVersionNot *int32 `json:"resource_version_not,omitempty"`

	// resource version not in
	ResourceVersionNotIn []int32 `json:"resource_version_not_in,omitempty"`

	// status
	Status interface{} `json:"status,omitempty"`

	// status in
	StatusIn []BackupPlanStatus `json:"status_in,omitempty"`

	// status not
	StatusNot interface{} `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []BackupPlanStatus `json:"status_not_in,omitempty"`

	// vms every
	VmsEvery interface{} `json:"vms_every,omitempty"`

	// vms none
	VmsNone interface{} `json:"vms_none,omitempty"`

	// vms some
	VmsSome interface{} `json:"vms_some,omitempty"`

	// window end
	WindowEnd *string `json:"window_end,omitempty"`

	// window end contains
	WindowEndContains *string `json:"window_end_contains,omitempty"`

	// window end ends with
	WindowEndEndsWith *string `json:"window_end_ends_with,omitempty"`

	// window end gt
	WindowEndGt *string `json:"window_end_gt,omitempty"`

	// window end gte
	WindowEndGte *string `json:"window_end_gte,omitempty"`

	// window end in
	WindowEndIn []string `json:"window_end_in,omitempty"`

	// window end lt
	WindowEndLt *string `json:"window_end_lt,omitempty"`

	// window end lte
	WindowEndLte *string `json:"window_end_lte,omitempty"`

	// window end not
	WindowEndNot *string `json:"window_end_not,omitempty"`

	// window end not contains
	WindowEndNotContains *string `json:"window_end_not_contains,omitempty"`

	// window end not ends with
	WindowEndNotEndsWith *string `json:"window_end_not_ends_with,omitempty"`

	// window end not in
	WindowEndNotIn []string `json:"window_end_not_in,omitempty"`

	// window end not starts with
	WindowEndNotStartsWith *string `json:"window_end_not_starts_with,omitempty"`

	// window end starts with
	WindowEndStartsWith *string `json:"window_end_starts_with,omitempty"`

	// window start
	WindowStart *string `json:"window_start,omitempty"`

	// window start contains
	WindowStartContains *string `json:"window_start_contains,omitempty"`

	// window start ends with
	WindowStartEndsWith *string `json:"window_start_ends_with,omitempty"`

	// window start gt
	WindowStartGt *string `json:"window_start_gt,omitempty"`

	// window start gte
	WindowStartGte *string `json:"window_start_gte,omitempty"`

	// window start in
	WindowStartIn []string `json:"window_start_in,omitempty"`

	// window start lt
	WindowStartLt *string `json:"window_start_lt,omitempty"`

	// window start lte
	WindowStartLte *string `json:"window_start_lte,omitempty"`

	// window start not
	WindowStartNot *string `json:"window_start_not,omitempty"`

	// window start not contains
	WindowStartNotContains *string `json:"window_start_not_contains,omitempty"`

	// window start not ends with
	WindowStartNotEndsWith *string `json:"window_start_not_ends_with,omitempty"`

	// window start not in
	WindowStartNotIn []string `json:"window_start_not_in,omitempty"`

	// window start not starts with
	WindowStartNotStartsWith *string `json:"window_start_not_starts_with,omitempty"`

	// window start starts with
	WindowStartStartsWith *string `json:"window_start_starts_with,omitempty"`
}

// Validate validates this backup plan where input
func (m *BackupPlanWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupDelayOptionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupDelayOptionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteStrategyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriodIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullPeriodNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriodIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalPeriodNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeepPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlanWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupDelayOptionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOptionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupDelayOptionIn); i++ {

		if err := m.BackupDelayOptionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateBackupDelayOptionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupDelayOptionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.BackupDelayOptionNotIn); i++ {

		if err := m.BackupDelayOptionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateDeleteStrategyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DeleteStrategyIn); i++ {

		if err := m.DeleteStrategyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateDeleteStrategyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DeleteStrategyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DeleteStrategyNotIn); i++ {

		if err := m.DeleteStrategyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateFullPeriodIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FullPeriodIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FullPeriodIn); i++ {

		if err := m.FullPeriodIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateFullPeriodNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FullPeriodNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FullPeriodNotIn); i++ {

		if err := m.FullPeriodNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateIncrementalPeriodIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalPeriodIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementalPeriodIn); i++ {

		if err := m.IncrementalPeriodIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateIncrementalPeriodNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalPeriodNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IncrementalPeriodNotIn); i++ {

		if err := m.IncrementalPeriodNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateKeepPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.KeepPolicyIn); i++ {

		if err := m.KeepPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateKeepPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.KeepPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.KeepPolicyNotIn); i++ {

		if err := m.KeepPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastExecuteStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateLastExecuteStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this backup plan where input based on the context it is used
func (m *BackupPlanWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupDelayOptionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupDelayOptionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleteStrategyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriodIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullPeriodNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriodIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalPeriodNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeepPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupPlanWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupDelayOptionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupDelayOptionIn); i++ {

		if err := m.BackupDelayOptionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateBackupDelayOptionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BackupDelayOptionNotIn); i++ {

		if err := m.BackupDelayOptionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backup_delay_option_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateDeleteStrategyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeleteStrategyIn); i++ {

		if err := m.DeleteStrategyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateDeleteStrategyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeleteStrategyNotIn); i++ {

		if err := m.DeleteStrategyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delete_strategy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateFullPeriodIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FullPeriodIn); i++ {

		if err := m.FullPeriodIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateFullPeriodNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FullPeriodNotIn); i++ {

		if err := m.FullPeriodNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateIncrementalPeriodIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalPeriodIn); i++ {

		if err := m.IncrementalPeriodIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateIncrementalPeriodNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncrementalPeriodNotIn); i++ {

		if err := m.IncrementalPeriodNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental_period_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateKeepPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeepPolicyIn); i++ {

		if err := m.KeepPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateKeepPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KeepPolicyNotIn); i++ {

		if err := m.KeepPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keep_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastExecuteStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateLastExecuteStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *BackupPlanWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupPlanWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupPlanWhereInput) UnmarshalBinary(b []byte) error {
	var res BackupPlanWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
