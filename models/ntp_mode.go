// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NtpMode ntp mode
//
// swagger:model NtpMode
type NtpMode string

func NewNtpMode(value NtpMode) *NtpMode {
	v := value
	return &v
}

const (

	// NtpModeEXTERNAL captures enum value "EXTERNAL"
	NtpModeEXTERNAL NtpMode = "EXTERNAL"

	// NtpModeINTERNAL captures enum value "INTERNAL"
	NtpModeINTERNAL NtpMode = "INTERNAL"
)

// for schema
var ntpModeEnum []interface{}

func init() {
	var res []NtpMode
	if err := json.Unmarshal([]byte(`["EXTERNAL","INTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ntpModeEnum = append(ntpModeEnum, v)
	}
}

func (m NtpMode) validateNtpModeEnum(path, location string, value NtpMode) error {
	if err := validate.EnumCase(path, location, value, ntpModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ntp mode
func (m NtpMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNtpModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ntp mode based on context it is used
func (m NtpMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
