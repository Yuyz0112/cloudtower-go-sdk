// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FilterRuleMetricEnum filter rule metric enum
//
// swagger:model FilterRuleMetricEnum
type FilterRuleMetricEnum string

func NewFilterRuleMetricEnum(value FilterRuleMetricEnum) *FilterRuleMetricEnum {
	v := value
	return &v
}

const (

	// FilterRuleMetricEnumVMCPUUSAGE captures enum value "VM_CPU_USAGE"
	FilterRuleMetricEnumVMCPUUSAGE FilterRuleMetricEnum = "VM_CPU_USAGE"

	// FilterRuleMetricEnumVMMEMORYUSAGE captures enum value "VM_MEMORY_USAGE"
	FilterRuleMetricEnumVMMEMORYUSAGE FilterRuleMetricEnum = "VM_MEMORY_USAGE"

	// FilterRuleMetricEnumVMPOWEROFFDAYS captures enum value "VM_POWEROFF_DAYS"
	FilterRuleMetricEnumVMPOWEROFFDAYS FilterRuleMetricEnum = "VM_POWEROFF_DAYS"

	// FilterRuleMetricEnumVMPOWERONDAYS captures enum value "VM_POWERON_DAYS"
	FilterRuleMetricEnumVMPOWERONDAYS FilterRuleMetricEnum = "VM_POWERON_DAYS"

	// FilterRuleMetricEnumVMREADWRITEIO captures enum value "VM_READWRITE_IO"
	FilterRuleMetricEnumVMREADWRITEIO FilterRuleMetricEnum = "VM_READWRITE_IO"
)

// for schema
var filterRuleMetricEnumEnum []interface{}

func init() {
	var res []FilterRuleMetricEnum
	if err := json.Unmarshal([]byte(`["VM_CPU_USAGE","VM_MEMORY_USAGE","VM_POWEROFF_DAYS","VM_POWERON_DAYS","VM_READWRITE_IO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterRuleMetricEnumEnum = append(filterRuleMetricEnumEnum, v)
	}
}

func (m FilterRuleMetricEnum) validateFilterRuleMetricEnumEnum(path, location string, value FilterRuleMetricEnum) error {
	if err := validate.EnumCase(path, location, value, filterRuleMetricEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this filter rule metric enum
func (m FilterRuleMetricEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFilterRuleMetricEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this filter rule metric enum based on context it is used
func (m FilterRuleMetricEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
