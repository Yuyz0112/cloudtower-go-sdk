// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMStatus Vm status
//
// swagger:model VmStatus
type VMStatus string

func NewVMStatus(value VMStatus) *VMStatus {
	v := value
	return &v
}

const (

	// VMStatusDELETED captures enum value "DELETED"
	VMStatusDELETED VMStatus = "DELETED"

	// VMStatusRUNNING captures enum value "RUNNING"
	VMStatusRUNNING VMStatus = "RUNNING"

	// VMStatusSTOPPED captures enum value "STOPPED"
	VMStatusSTOPPED VMStatus = "STOPPED"

	// VMStatusSUSPENDED captures enum value "SUSPENDED"
	VMStatusSUSPENDED VMStatus = "SUSPENDED"

	// VMStatusUNKNOWN captures enum value "UNKNOWN"
	VMStatusUNKNOWN VMStatus = "UNKNOWN"
)

// for schema
var vmStatusEnum []interface{}

func init() {
	var res []VMStatus
	if err := json.Unmarshal([]byte(`["DELETED","RUNNING","STOPPED","SUSPENDED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmStatusEnum = append(vmStatusEnum, v)
	}
}

func (m VMStatus) validateVMStatusEnum(path, location string, value VMStatus) error {
	if err := validate.EnumCase(path, location, value, vmStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm status
func (m VMStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm status based on context it is used
func (m VMStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
