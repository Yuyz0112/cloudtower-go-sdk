// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiskFunction disk function
//
// swagger:model DiskFunction
type DiskFunction string

func NewDiskFunction(value DiskFunction) *DiskFunction {
	v := value
	return &v
}

const (

	// DiskFunctionCACHE captures enum value "CACHE"
	DiskFunctionCACHE DiskFunction = "CACHE"

	// DiskFunctionDATA captures enum value "DATA"
	DiskFunctionDATA DiskFunction = "DATA"

	// DiskFunctionSMTXSYSTEM captures enum value "SMTX_SYSTEM"
	DiskFunctionSMTXSYSTEM DiskFunction = "SMTX_SYSTEM"
)

// for schema
var diskFunctionEnum []interface{}

func init() {
	var res []DiskFunction
	if err := json.Unmarshal([]byte(`["CACHE","DATA","SMTX_SYSTEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskFunctionEnum = append(diskFunctionEnum, v)
	}
}

func (m DiskFunction) validateDiskFunctionEnum(path, location string, value DiskFunction) error {
	if err := validate.EnumCase(path, location, value, diskFunctionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this disk function
func (m DiskFunction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiskFunctionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this disk function based on context it is used
func (m DiskFunction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
