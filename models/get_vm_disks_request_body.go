// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetVMDisksRequestBody get Vm disks request body
// Example: {"after":"vmDisks-id-string","before":"vmDisks-id-string","first":0,"last":0,"orderBy":"boot_ASC","skip":0,"where":{"AND":"VmDiskWhereInput[]","NOT":"VmDiskWhereInput[]","OR":"VmDiskWhereInput[]","boot":0,"boot_gt":0,"boot_gte":0,"boot_in":[0],"boot_lt":0,"boot_lte":0,"boot_not":0,"boot_not_in":[0],"bus":"IDE","bus_in":["IDE"],"bus_not":"IDE","bus_not_in":["IDE"],"cloud_init_image_name":"string","cloud_init_image_name_contains":"string","cloud_init_image_name_ends_with":"string","cloud_init_image_name_gt":"string","cloud_init_image_name_gte":"string","cloud_init_image_name_in":["string"],"cloud_init_image_name_lt":"string","cloud_init_image_name_lte":"string","cloud_init_image_name_not":"string","cloud_init_image_name_not_contains":"string","cloud_init_image_name_not_ends_with":"string","cloud_init_image_name_not_in":["string"],"cloud_init_image_name_not_starts_with":"string","cloud_init_image_name_starts_with":"string","cloud_init_image_path":"string","cloud_init_image_path_contains":"string","cloud_init_image_path_ends_with":"string","cloud_init_image_path_gt":"string","cloud_init_image_path_gte":"string","cloud_init_image_path_in":["string"],"cloud_init_image_path_lt":"string","cloud_init_image_path_lte":"string","cloud_init_image_path_not":"string","cloud_init_image_path_not_contains":"string","cloud_init_image_path_not_ends_with":"string","cloud_init_image_path_not_in":["string"],"cloud_init_image_path_not_starts_with":"string","cloud_init_image_path_starts_with":"string","device":"string","device_contains":"string","device_ends_with":"string","device_gt":"string","device_gte":"string","device_in":["string"],"device_lt":"string","device_lte":"string","device_not":"string","device_not_contains":"string","device_not_ends_with":"string","device_not_in":["string"],"device_not_starts_with":"string","device_starts_with":"string","disabled":false,"disabled_not":false,"elf_image":"ElfImageWhereInput","id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","key":0,"key_gt":0,"key_gte":0,"key_in":[0],"key_lt":0,"key_lte":0,"key_not":0,"key_not_in":[0],"max_bandwidth":0,"max_bandwidth_gt":0,"max_bandwidth_gte":0,"max_bandwidth_in":[0],"max_bandwidth_lt":0,"max_bandwidth_lte":0,"max_bandwidth_not":0,"max_bandwidth_not_in":[0],"max_bandwidth_policy":"DYNAMIC","max_bandwidth_policy_in":["DYNAMIC"],"max_bandwidth_policy_not":"DYNAMIC","max_bandwidth_policy_not_in":["DYNAMIC"],"max_iops":0,"max_iops_gt":0,"max_iops_gte":0,"max_iops_in":[0],"max_iops_lt":0,"max_iops_lte":0,"max_iops_not":0,"max_iops_not_in":[0],"max_iops_policy":"DYNAMIC","max_iops_policy_in":["DYNAMIC"],"max_iops_policy_not":"DYNAMIC","max_iops_policy_not_in":["DYNAMIC"],"serial":"string","serial_contains":"string","serial_ends_with":"string","serial_gt":"string","serial_gte":"string","serial_in":["string"],"serial_lt":"string","serial_lte":"string","serial_not":"string","serial_not_contains":"string","serial_not_ends_with":"string","serial_not_in":["string"],"serial_not_starts_with":"string","serial_starts_with":"string","svt_image":"SvtImageWhereInput","type":"CD_ROM","type_in":["CD_ROM"],"type_not":"CD_ROM","type_not_in":["CD_ROM"],"unsafe_image_path":"string","unsafe_image_path_contains":"string","unsafe_image_path_ends_with":"string","unsafe_image_path_gt":"string","unsafe_image_path_gte":"string","unsafe_image_path_in":["string"],"unsafe_image_path_lt":"string","unsafe_image_path_lte":"string","unsafe_image_path_not":"string","unsafe_image_path_not_contains":"string","unsafe_image_path_not_ends_with":"string","unsafe_image_path_not_in":["string"],"unsafe_image_path_not_starts_with":"string","unsafe_image_path_starts_with":"string","unsafe_image_uuid":"string","unsafe_image_uuid_contains":"string","unsafe_image_uuid_ends_with":"string","unsafe_image_uuid_gt":"string","unsafe_image_uuid_gte":"string","unsafe_image_uuid_in":["string"],"unsafe_image_uuid_lt":"string","unsafe_image_uuid_lte":"string","unsafe_image_uuid_not":"string","unsafe_image_uuid_not_contains":"string","unsafe_image_uuid_not_ends_with":"string","unsafe_image_uuid_not_in":["string"],"unsafe_image_uuid_not_starts_with":"string","unsafe_image_uuid_starts_with":"string","unsafe_provision":"string","unsafe_provision_contains":"string","unsafe_provision_ends_with":"string","unsafe_provision_gt":"string","unsafe_provision_gte":"string","unsafe_provision_in":["string"],"unsafe_provision_lt":"string","unsafe_provision_lte":"string","unsafe_provision_not":"string","unsafe_provision_not_contains":"string","unsafe_provision_not_ends_with":"string","unsafe_provision_not_in":["string"],"unsafe_provision_not_starts_with":"string","unsafe_provision_starts_with":"string","vm":"VmWhereInput","vm_volume":"VmVolumeWhereInput"}}
//
// swagger:model GetVmDisksRequestBody
type GetVMDisksRequestBody struct {

	// after
	After *string `json:"after,omitempty"`

	// before
	Before *string `json:"before,omitempty"`

	// first
	First *int32 `json:"first,omitempty"`

	// last
	Last *int32 `json:"last,omitempty"`

	// order by
	OrderBy *VMDiskOrderByInput `json:"orderBy,omitempty"`

	// skip
	Skip *int32 `json:"skip,omitempty"`

	// where
	Where *VMDiskWhereInput `json:"where,omitempty"`
}

// Validate validates this get Vm disks request body
func (m *GetVMDisksRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetVMDisksRequestBody) validateOrderBy(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderBy) { // not required
		return nil
	}

	if m.OrderBy != nil {
		if err := m.OrderBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderBy")
			}
			return err
		}
	}

	return nil
}

func (m *GetVMDisksRequestBody) validateWhere(formats strfmt.Registry) error {
	if swag.IsZero(m.Where) { // not required
		return nil
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get Vm disks request body based on the context it is used
func (m *GetVMDisksRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetVMDisksRequestBody) contextValidateOrderBy(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderBy != nil {
		if err := m.OrderBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderBy")
			}
			return err
		}
	}

	return nil
}

func (m *GetVMDisksRequestBody) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetVMDisksRequestBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetVMDisksRequestBody) UnmarshalBinary(b []byte) error {
	var res GetVMDisksRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
