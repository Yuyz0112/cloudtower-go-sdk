// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupExecutionType backup execution type
//
// swagger:model BackupExecutionType
type BackupExecutionType string

func NewBackupExecutionType(value BackupExecutionType) *BackupExecutionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BackupExecutionType.
func (m BackupExecutionType) Pointer() *BackupExecutionType {
	return &m
}

const (

	// BackupExecutionTypeFULL captures enum value "FULL"
	BackupExecutionTypeFULL BackupExecutionType = "FULL"

	// BackupExecutionTypeINCREMENTAL captures enum value "INCREMENTAL"
	BackupExecutionTypeINCREMENTAL BackupExecutionType = "INCREMENTAL"
)

// for schema
var backupExecutionTypeEnum []interface{}

func init() {
	var res []BackupExecutionType
	if err := json.Unmarshal([]byte(`["FULL","INCREMENTAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupExecutionTypeEnum = append(backupExecutionTypeEnum, v)
	}
}

func (m BackupExecutionType) validateBackupExecutionTypeEnum(path, location string, value BackupExecutionType) error {
	if err := validate.EnumCase(path, location, value, backupExecutionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup execution type
func (m BackupExecutionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupExecutionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup execution type based on context it is used
func (m BackupExecutionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
