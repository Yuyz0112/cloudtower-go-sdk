// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationWhereInput application where input
//
// swagger:model ApplicationWhereInput
type ApplicationWhereInput struct {

	// a n d
	AND []*ApplicationWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ApplicationWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ApplicationWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster interface{} `json:"cluster,omitempty"`

	// error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// error message contains
	ErrorMessageContains *string `json:"error_message_contains,omitempty"`

	// error message ends with
	ErrorMessageEndsWith *string `json:"error_message_ends_with,omitempty"`

	// error message gt
	ErrorMessageGt *string `json:"error_message_gt,omitempty"`

	// error message gte
	ErrorMessageGte *string `json:"error_message_gte,omitempty"`

	// error message in
	ErrorMessageIn []string `json:"error_message_in,omitempty"`

	// error message lt
	ErrorMessageLt *string `json:"error_message_lt,omitempty"`

	// error message lte
	ErrorMessageLte *string `json:"error_message_lte,omitempty"`

	// error message not
	ErrorMessageNot *string `json:"error_message_not,omitempty"`

	// error message not contains
	ErrorMessageNotContains *string `json:"error_message_not_contains,omitempty"`

	// error message not ends with
	ErrorMessageNotEndsWith *string `json:"error_message_not_ends_with,omitempty"`

	// error message not in
	ErrorMessageNotIn []string `json:"error_message_not_in,omitempty"`

	// error message not starts with
	ErrorMessageNotStartsWith *string `json:"error_message_not_starts_with,omitempty"`

	// error message starts with
	ErrorMessageStartsWith *string `json:"error_message_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// image name
	ImageName *string `json:"image_name,omitempty"`

	// image name contains
	ImageNameContains *string `json:"image_name_contains,omitempty"`

	// image name ends with
	ImageNameEndsWith *string `json:"image_name_ends_with,omitempty"`

	// image name gt
	ImageNameGt *string `json:"image_name_gt,omitempty"`

	// image name gte
	ImageNameGte *string `json:"image_name_gte,omitempty"`

	// image name in
	ImageNameIn []string `json:"image_name_in,omitempty"`

	// image name lt
	ImageNameLt *string `json:"image_name_lt,omitempty"`

	// image name lte
	ImageNameLte *string `json:"image_name_lte,omitempty"`

	// image name not
	ImageNameNot *string `json:"image_name_not,omitempty"`

	// image name not contains
	ImageNameNotContains *string `json:"image_name_not_contains,omitempty"`

	// image name not ends with
	ImageNameNotEndsWith *string `json:"image_name_not_ends_with,omitempty"`

	// image name not in
	ImageNameNotIn []string `json:"image_name_not_in,omitempty"`

	// image name not starts with
	ImageNameNotStartsWith *string `json:"image_name_not_starts_with,omitempty"`

	// image name starts with
	ImageNameStartsWith *string `json:"image_name_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// memory
	Memory *float64 `json:"memory,omitempty"`

	// memory gt
	MemoryGt *float64 `json:"memory_gt,omitempty"`

	// memory gte
	MemoryGte *float64 `json:"memory_gte,omitempty"`

	// memory in
	MemoryIn []float64 `json:"memory_in,omitempty"`

	// memory lt
	MemoryLt *float64 `json:"memory_lt,omitempty"`

	// memory lte
	MemoryLte *float64 `json:"memory_lte,omitempty"`

	// memory not
	MemoryNot *float64 `json:"memory_not,omitempty"`

	// memory not in
	MemoryNotIn []float64 `json:"memory_not_in,omitempty"`

	// state
	State interface{} `json:"state,omitempty"`

	// state in
	StateIn []ApplicationState `json:"state_in,omitempty"`

	// state not
	StateNot interface{} `json:"state_not,omitempty"`

	// state not in
	StateNotIn []ApplicationState `json:"state_not_in,omitempty"`

	// storage ip
	StorageIP *string `json:"storage_ip,omitempty"`

	// storage ip contains
	StorageIPContains *string `json:"storage_ip_contains,omitempty"`

	// storage ip ends with
	StorageIPEndsWith *string `json:"storage_ip_ends_with,omitempty"`

	// storage ip gt
	StorageIPGt *string `json:"storage_ip_gt,omitempty"`

	// storage ip gte
	StorageIPGte *string `json:"storage_ip_gte,omitempty"`

	// storage ip in
	StorageIPIn []string `json:"storage_ip_in,omitempty"`

	// storage ip lt
	StorageIPLt *string `json:"storage_ip_lt,omitempty"`

	// storage ip lte
	StorageIPLte *string `json:"storage_ip_lte,omitempty"`

	// storage ip not
	StorageIPNot *string `json:"storage_ip_not,omitempty"`

	// storage ip not contains
	StorageIPNotContains *string `json:"storage_ip_not_contains,omitempty"`

	// storage ip not ends with
	StorageIPNotEndsWith *string `json:"storage_ip_not_ends_with,omitempty"`

	// storage ip not in
	StorageIPNotIn []string `json:"storage_ip_not_in,omitempty"`

	// storage ip not starts with
	StorageIPNotStartsWith *string `json:"storage_ip_not_starts_with,omitempty"`

	// storage ip starts with
	StorageIPStartsWith *string `json:"storage_ip_starts_with,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// type in
	TypeIn []ApplicationType `json:"type_in,omitempty"`

	// type not
	TypeNot interface{} `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []ApplicationType `json:"type_not_in,omitempty"`

	// update time
	UpdateTime *string `json:"update_time,omitempty"`

	// update time gt
	UpdateTimeGt *string `json:"update_time_gt,omitempty"`

	// update time gte
	UpdateTimeGte *string `json:"update_time_gte,omitempty"`

	// update time in
	UpdateTimeIn []string `json:"update_time_in,omitempty"`

	// update time lt
	UpdateTimeLt *string `json:"update_time_lt,omitempty"`

	// update time lte
	UpdateTimeLte *string `json:"update_time_lte,omitempty"`

	// update time not
	UpdateTimeNot *string `json:"update_time_not,omitempty"`

	// update time not in
	UpdateTimeNotIn []string `json:"update_time_not_in,omitempty"`

	// vcpu
	Vcpu *float64 `json:"vcpu,omitempty"`

	// vcpu gt
	VcpuGt *float64 `json:"vcpu_gt,omitempty"`

	// vcpu gte
	VcpuGte *float64 `json:"vcpu_gte,omitempty"`

	// vcpu in
	VcpuIn []float64 `json:"vcpu_in,omitempty"`

	// vcpu lt
	VcpuLt *float64 `json:"vcpu_lt,omitempty"`

	// vcpu lte
	VcpuLte *float64 `json:"vcpu_lte,omitempty"`

	// vcpu not
	VcpuNot *float64 `json:"vcpu_not,omitempty"`

	// vcpu not in
	VcpuNotIn []float64 `json:"vcpu_not_in,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`

	// volume size
	VolumeSize *float64 `json:"volume_size,omitempty"`

	// volume size gt
	VolumeSizeGt *float64 `json:"volume_size_gt,omitempty"`

	// volume size gte
	VolumeSizeGte *float64 `json:"volume_size_gte,omitempty"`

	// volume size in
	VolumeSizeIn []float64 `json:"volume_size_in,omitempty"`

	// volume size lt
	VolumeSizeLt *float64 `json:"volume_size_lt,omitempty"`

	// volume size lte
	VolumeSizeLte *float64 `json:"volume_size_lte,omitempty"`

	// volume size not
	VolumeSizeNot *float64 `json:"volume_size_not,omitempty"`

	// volume size not in
	VolumeSizeNotIn []float64 `json:"volume_size_not_in,omitempty"`
}

// Validate validates this application where input
func (m *ApplicationWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationWhereInput) validateStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ApplicationWhereInput) validateStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ApplicationWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ApplicationWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this application where input based on the context it is used
func (m *ApplicationWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationWhereInput) contextValidateStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateIn); i++ {

		if err := m.StateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ApplicationWhereInput) contextValidateStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StateNotIn); i++ {

		if err := m.StateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ApplicationWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ApplicationWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationWhereInput) UnmarshalBinary(b []byte) error {
	var res ApplicationWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
