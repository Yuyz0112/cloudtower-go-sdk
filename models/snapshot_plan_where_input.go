// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SnapshotPlanWhereInput snapshot plan where input
// Example: {"AND":"SnapshotPlanWhereInput[]","NOT":"SnapshotPlanWhereInput[]","OR":"SnapshotPlanWhereInput[]","auto_delete_num":0,"auto_delete_num_gt":0,"auto_delete_num_gte":0,"auto_delete_num_in":[0],"auto_delete_num_lt":0,"auto_delete_num_lte":0,"auto_delete_num_not":0,"auto_delete_num_not_in":[0],"auto_execute_num":0,"auto_execute_num_gt":0,"auto_execute_num_gte":0,"auto_execute_num_in":[0],"auto_execute_num_lt":0,"auto_execute_num_lte":0,"auto_execute_num_not":0,"auto_execute_num_not_in":[0],"cluster":"ClusterWhereInput","description":"string","description_contains":"string","description_ends_with":"string","description_gt":"string","description_gte":"string","description_in":["string"],"description_lt":"string","description_lte":"string","description_not":"string","description_not_contains":"string","description_not_ends_with":"string","description_not_in":["string"],"description_not_starts_with":"string","description_starts_with":"string","end_time":"string","end_time_gt":"string","end_time_gte":"string","end_time_in":["string"],"end_time_lt":"string","end_time_lte":"string","end_time_not":"string","end_time_not_in":["string"],"entityAsyncStatus":"CREATING","entityAsyncStatus_in":["CREATING"],"entityAsyncStatus_not":"CREATING","entityAsyncStatus_not_in":["CREATING"],"execute_plan_type":"DAY","execute_plan_type_in":["DAY"],"execute_plan_type_not":"DAY","execute_plan_type_not_in":["DAY"],"execution_tasks_every":"SnapshotPlanTaskWhereInput","execution_tasks_none":"SnapshotPlanTaskWhereInput","execution_tasks_some":"SnapshotPlanTaskWhereInput","healthy":false,"healthy_not":false,"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","last_execute_end_time":"string","last_execute_end_time_gt":"string","last_execute_end_time_gte":"string","last_execute_end_time_in":["string"],"last_execute_end_time_lt":"string","last_execute_end_time_lte":"string","last_execute_end_time_not":"string","last_execute_end_time_not_in":["string"],"last_execute_status":"CREATED","last_execute_status_in":["CREATED"],"last_execute_status_not":"CREATED","last_execute_status_not_in":["CREATED"],"last_execute_time":"string","last_execute_time_gt":"string","last_execute_time_gte":"string","last_execute_time_in":["string"],"last_execute_time_lt":"string","last_execute_time_lte":"string","last_execute_time_not":"string","last_execute_time_not_in":["string"],"local_id":"string","local_id_contains":"string","local_id_ends_with":"string","local_id_gt":"string","local_id_gte":"string","local_id_in":["string"],"local_id_lt":"string","local_id_lte":"string","local_id_not":"string","local_id_not_contains":"string","local_id_not_ends_with":"string","local_id_not_in":["string"],"local_id_not_starts_with":"string","local_id_starts_with":"string","logical_size_bytes":0,"logical_size_bytes_gt":0,"logical_size_bytes_gte":0,"logical_size_bytes_in":[0],"logical_size_bytes_lt":0,"logical_size_bytes_lte":0,"logical_size_bytes_not":0,"logical_size_bytes_not_in":[0],"manual_delete_num":0,"manual_delete_num_gt":0,"manual_delete_num_gte":0,"manual_delete_num_in":[0],"manual_delete_num_lt":0,"manual_delete_num_lte":0,"manual_delete_num_not":0,"manual_delete_num_not_in":[0],"manual_execute_num":0,"manual_execute_num_gt":0,"manual_execute_num_gte":0,"manual_execute_num_in":[0],"manual_execute_num_lt":0,"manual_execute_num_lte":0,"manual_execute_num_not":0,"manual_execute_num_not_in":[0],"mirror":false,"mirror_not":false,"name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","next_execute_time":"string","next_execute_time_gt":"string","next_execute_time_gte":"string","next_execute_time_in":["string"],"next_execute_time_lt":"string","next_execute_time_lte":"string","next_execute_time_not":"string","next_execute_time_not_in":["string"],"object_num":0,"object_num_gt":0,"object_num_gte":0,"object_num_in":[0],"object_num_lt":0,"object_num_lte":0,"object_num_not":0,"object_num_not_in":[0],"physical_size_bytes":0,"physical_size_bytes_gt":0,"physical_size_bytes_gte":0,"physical_size_bytes_in":[0],"physical_size_bytes_lt":0,"physical_size_bytes_lte":0,"physical_size_bytes_not":0,"physical_size_bytes_not_in":[0],"remain_snapshot_num":0,"remain_snapshot_num_gt":0,"remain_snapshot_num_gte":0,"remain_snapshot_num_in":[0],"remain_snapshot_num_lt":0,"remain_snapshot_num_lte":0,"remain_snapshot_num_not":0,"remain_snapshot_num_not_in":[0],"snapshot_group_num":0,"snapshot_group_num_gt":0,"snapshot_group_num_gte":0,"snapshot_group_num_in":[0],"snapshot_group_num_lt":0,"snapshot_group_num_lte":0,"snapshot_group_num_not":0,"snapshot_group_num_not_in":[0],"start_time":"string","start_time_gt":"string","start_time_gte":"string","start_time_in":["string"],"start_time_lt":"string","start_time_lte":"string","start_time_not":"string","start_time_not_in":["string"],"status":"NORMAL","status_in":["NORMAL"],"status_not":"NORMAL","status_not_in":["NORMAL"],"vms_every":"VmWhereInput","vms_none":"VmWhereInput","vms_some":"VmWhereInput"}
//
// swagger:model SnapshotPlanWhereInput
type SnapshotPlanWhereInput struct {

	// a n d
	AND []*SnapshotPlanWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*SnapshotPlanWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*SnapshotPlanWhereInput `json:"OR,omitempty"`

	// auto delete num
	AutoDeleteNum *int32 `json:"auto_delete_num,omitempty"`

	// auto delete num gt
	AutoDeleteNumGt *int32 `json:"auto_delete_num_gt,omitempty"`

	// auto delete num gte
	AutoDeleteNumGte *int32 `json:"auto_delete_num_gte,omitempty"`

	// auto delete num in
	AutoDeleteNumIn []int32 `json:"auto_delete_num_in,omitempty"`

	// auto delete num lt
	AutoDeleteNumLt *int32 `json:"auto_delete_num_lt,omitempty"`

	// auto delete num lte
	AutoDeleteNumLte *int32 `json:"auto_delete_num_lte,omitempty"`

	// auto delete num not
	AutoDeleteNumNot *int32 `json:"auto_delete_num_not,omitempty"`

	// auto delete num not in
	AutoDeleteNumNotIn []int32 `json:"auto_delete_num_not_in,omitempty"`

	// auto execute num
	AutoExecuteNum *int32 `json:"auto_execute_num,omitempty"`

	// auto execute num gt
	AutoExecuteNumGt *int32 `json:"auto_execute_num_gt,omitempty"`

	// auto execute num gte
	AutoExecuteNumGte *int32 `json:"auto_execute_num_gte,omitempty"`

	// auto execute num in
	AutoExecuteNumIn []int32 `json:"auto_execute_num_in,omitempty"`

	// auto execute num lt
	AutoExecuteNumLt *int32 `json:"auto_execute_num_lt,omitempty"`

	// auto execute num lte
	AutoExecuteNumLte *int32 `json:"auto_execute_num_lte,omitempty"`

	// auto execute num not
	AutoExecuteNumNot *int32 `json:"auto_execute_num_not,omitempty"`

	// auto execute num not in
	AutoExecuteNumNotIn []int32 `json:"auto_execute_num_not_in,omitempty"`

	// cluster
	Cluster struct {
		ClusterWhereInput
	} `json:"cluster,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// end time
	EndTime *string `json:"end_time,omitempty"`

	// end time gt
	EndTimeGt *string `json:"end_time_gt,omitempty"`

	// end time gte
	EndTimeGte *string `json:"end_time_gte,omitempty"`

	// end time in
	EndTimeIn []string `json:"end_time_in,omitempty"`

	// end time lt
	EndTimeLt *string `json:"end_time_lt,omitempty"`

	// end time lte
	EndTimeLte *string `json:"end_time_lte,omitempty"`

	// end time not
	EndTimeNot *string `json:"end_time_not,omitempty"`

	// end time not in
	EndTimeNotIn []string `json:"end_time_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// execute plan type
	ExecutePlanType struct {
		SnapshotPlanExecuteType
	} `json:"execute_plan_type,omitempty"`

	// execute plan type in
	ExecutePlanTypeIn []SnapshotPlanExecuteType `json:"execute_plan_type_in,omitempty"`

	// execute plan type not
	ExecutePlanTypeNot struct {
		SnapshotPlanExecuteType
	} `json:"execute_plan_type_not,omitempty"`

	// execute plan type not in
	ExecutePlanTypeNotIn []SnapshotPlanExecuteType `json:"execute_plan_type_not_in,omitempty"`

	// execution tasks every
	ExecutionTasksEvery struct {
		SnapshotPlanTaskWhereInput
	} `json:"execution_tasks_every,omitempty"`

	// execution tasks none
	ExecutionTasksNone struct {
		SnapshotPlanTaskWhereInput
	} `json:"execution_tasks_none,omitempty"`

	// execution tasks some
	ExecutionTasksSome struct {
		SnapshotPlanTaskWhereInput
	} `json:"execution_tasks_some,omitempty"`

	// healthy
	Healthy *bool `json:"healthy,omitempty"`

	// healthy not
	HealthyNot *bool `json:"healthy_not,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// last execute end time
	LastExecuteEndTime *string `json:"last_execute_end_time,omitempty"`

	// last execute end time gt
	LastExecuteEndTimeGt *string `json:"last_execute_end_time_gt,omitempty"`

	// last execute end time gte
	LastExecuteEndTimeGte *string `json:"last_execute_end_time_gte,omitempty"`

	// last execute end time in
	LastExecuteEndTimeIn []string `json:"last_execute_end_time_in,omitempty"`

	// last execute end time lt
	LastExecuteEndTimeLt *string `json:"last_execute_end_time_lt,omitempty"`

	// last execute end time lte
	LastExecuteEndTimeLte *string `json:"last_execute_end_time_lte,omitempty"`

	// last execute end time not
	LastExecuteEndTimeNot *string `json:"last_execute_end_time_not,omitempty"`

	// last execute end time not in
	LastExecuteEndTimeNotIn []string `json:"last_execute_end_time_not_in,omitempty"`

	// last execute status
	LastExecuteStatus struct {
		SnapshotPlanExecuteStatus
	} `json:"last_execute_status,omitempty"`

	// last execute status in
	LastExecuteStatusIn []SnapshotPlanExecuteStatus `json:"last_execute_status_in,omitempty"`

	// last execute status not
	LastExecuteStatusNot struct {
		SnapshotPlanExecuteStatus
	} `json:"last_execute_status_not,omitempty"`

	// last execute status not in
	LastExecuteStatusNotIn []SnapshotPlanExecuteStatus `json:"last_execute_status_not_in,omitempty"`

	// last execute time
	LastExecuteTime *string `json:"last_execute_time,omitempty"`

	// last execute time gt
	LastExecuteTimeGt *string `json:"last_execute_time_gt,omitempty"`

	// last execute time gte
	LastExecuteTimeGte *string `json:"last_execute_time_gte,omitempty"`

	// last execute time in
	LastExecuteTimeIn []string `json:"last_execute_time_in,omitempty"`

	// last execute time lt
	LastExecuteTimeLt *string `json:"last_execute_time_lt,omitempty"`

	// last execute time lte
	LastExecuteTimeLte *string `json:"last_execute_time_lte,omitempty"`

	// last execute time not
	LastExecuteTimeNot *string `json:"last_execute_time_not,omitempty"`

	// last execute time not in
	LastExecuteTimeNotIn []string `json:"last_execute_time_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// logical size bytes
	LogicalSizeBytes *float64 `json:"logical_size_bytes,omitempty"`

	// logical size bytes gt
	LogicalSizeBytesGt *float64 `json:"logical_size_bytes_gt,omitempty"`

	// logical size bytes gte
	LogicalSizeBytesGte *float64 `json:"logical_size_bytes_gte,omitempty"`

	// logical size bytes in
	LogicalSizeBytesIn []float64 `json:"logical_size_bytes_in,omitempty"`

	// logical size bytes lt
	LogicalSizeBytesLt *float64 `json:"logical_size_bytes_lt,omitempty"`

	// logical size bytes lte
	LogicalSizeBytesLte *float64 `json:"logical_size_bytes_lte,omitempty"`

	// logical size bytes not
	LogicalSizeBytesNot *float64 `json:"logical_size_bytes_not,omitempty"`

	// logical size bytes not in
	LogicalSizeBytesNotIn []float64 `json:"logical_size_bytes_not_in,omitempty"`

	// manual delete num
	ManualDeleteNum *int32 `json:"manual_delete_num,omitempty"`

	// manual delete num gt
	ManualDeleteNumGt *int32 `json:"manual_delete_num_gt,omitempty"`

	// manual delete num gte
	ManualDeleteNumGte *int32 `json:"manual_delete_num_gte,omitempty"`

	// manual delete num in
	ManualDeleteNumIn []int32 `json:"manual_delete_num_in,omitempty"`

	// manual delete num lt
	ManualDeleteNumLt *int32 `json:"manual_delete_num_lt,omitempty"`

	// manual delete num lte
	ManualDeleteNumLte *int32 `json:"manual_delete_num_lte,omitempty"`

	// manual delete num not
	ManualDeleteNumNot *int32 `json:"manual_delete_num_not,omitempty"`

	// manual delete num not in
	ManualDeleteNumNotIn []int32 `json:"manual_delete_num_not_in,omitempty"`

	// manual execute num
	ManualExecuteNum *int32 `json:"manual_execute_num,omitempty"`

	// manual execute num gt
	ManualExecuteNumGt *int32 `json:"manual_execute_num_gt,omitempty"`

	// manual execute num gte
	ManualExecuteNumGte *int32 `json:"manual_execute_num_gte,omitempty"`

	// manual execute num in
	ManualExecuteNumIn []int32 `json:"manual_execute_num_in,omitempty"`

	// manual execute num lt
	ManualExecuteNumLt *int32 `json:"manual_execute_num_lt,omitempty"`

	// manual execute num lte
	ManualExecuteNumLte *int32 `json:"manual_execute_num_lte,omitempty"`

	// manual execute num not
	ManualExecuteNumNot *int32 `json:"manual_execute_num_not,omitempty"`

	// manual execute num not in
	ManualExecuteNumNotIn []int32 `json:"manual_execute_num_not_in,omitempty"`

	// mirror
	Mirror *bool `json:"mirror,omitempty"`

	// mirror not
	MirrorNot *bool `json:"mirror_not,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// next execute time
	NextExecuteTime *string `json:"next_execute_time,omitempty"`

	// next execute time gt
	NextExecuteTimeGt *string `json:"next_execute_time_gt,omitempty"`

	// next execute time gte
	NextExecuteTimeGte *string `json:"next_execute_time_gte,omitempty"`

	// next execute time in
	NextExecuteTimeIn []string `json:"next_execute_time_in,omitempty"`

	// next execute time lt
	NextExecuteTimeLt *string `json:"next_execute_time_lt,omitempty"`

	// next execute time lte
	NextExecuteTimeLte *string `json:"next_execute_time_lte,omitempty"`

	// next execute time not
	NextExecuteTimeNot *string `json:"next_execute_time_not,omitempty"`

	// next execute time not in
	NextExecuteTimeNotIn []string `json:"next_execute_time_not_in,omitempty"`

	// object num
	ObjectNum *int32 `json:"object_num,omitempty"`

	// object num gt
	ObjectNumGt *int32 `json:"object_num_gt,omitempty"`

	// object num gte
	ObjectNumGte *int32 `json:"object_num_gte,omitempty"`

	// object num in
	ObjectNumIn []int32 `json:"object_num_in,omitempty"`

	// object num lt
	ObjectNumLt *int32 `json:"object_num_lt,omitempty"`

	// object num lte
	ObjectNumLte *int32 `json:"object_num_lte,omitempty"`

	// object num not
	ObjectNumNot *int32 `json:"object_num_not,omitempty"`

	// object num not in
	ObjectNumNotIn []int32 `json:"object_num_not_in,omitempty"`

	// physical size bytes
	PhysicalSizeBytes *float64 `json:"physical_size_bytes,omitempty"`

	// physical size bytes gt
	PhysicalSizeBytesGt *float64 `json:"physical_size_bytes_gt,omitempty"`

	// physical size bytes gte
	PhysicalSizeBytesGte *float64 `json:"physical_size_bytes_gte,omitempty"`

	// physical size bytes in
	PhysicalSizeBytesIn []float64 `json:"physical_size_bytes_in,omitempty"`

	// physical size bytes lt
	PhysicalSizeBytesLt *float64 `json:"physical_size_bytes_lt,omitempty"`

	// physical size bytes lte
	PhysicalSizeBytesLte *float64 `json:"physical_size_bytes_lte,omitempty"`

	// physical size bytes not
	PhysicalSizeBytesNot *float64 `json:"physical_size_bytes_not,omitempty"`

	// physical size bytes not in
	PhysicalSizeBytesNotIn []float64 `json:"physical_size_bytes_not_in,omitempty"`

	// remain snapshot num
	RemainSnapshotNum *int32 `json:"remain_snapshot_num,omitempty"`

	// remain snapshot num gt
	RemainSnapshotNumGt *int32 `json:"remain_snapshot_num_gt,omitempty"`

	// remain snapshot num gte
	RemainSnapshotNumGte *int32 `json:"remain_snapshot_num_gte,omitempty"`

	// remain snapshot num in
	RemainSnapshotNumIn []int32 `json:"remain_snapshot_num_in,omitempty"`

	// remain snapshot num lt
	RemainSnapshotNumLt *int32 `json:"remain_snapshot_num_lt,omitempty"`

	// remain snapshot num lte
	RemainSnapshotNumLte *int32 `json:"remain_snapshot_num_lte,omitempty"`

	// remain snapshot num not
	RemainSnapshotNumNot *int32 `json:"remain_snapshot_num_not,omitempty"`

	// remain snapshot num not in
	RemainSnapshotNumNotIn []int32 `json:"remain_snapshot_num_not_in,omitempty"`

	// snapshot group num
	SnapshotGroupNum *int32 `json:"snapshot_group_num,omitempty"`

	// snapshot group num gt
	SnapshotGroupNumGt *int32 `json:"snapshot_group_num_gt,omitempty"`

	// snapshot group num gte
	SnapshotGroupNumGte *int32 `json:"snapshot_group_num_gte,omitempty"`

	// snapshot group num in
	SnapshotGroupNumIn []int32 `json:"snapshot_group_num_in,omitempty"`

	// snapshot group num lt
	SnapshotGroupNumLt *int32 `json:"snapshot_group_num_lt,omitempty"`

	// snapshot group num lte
	SnapshotGroupNumLte *int32 `json:"snapshot_group_num_lte,omitempty"`

	// snapshot group num not
	SnapshotGroupNumNot *int32 `json:"snapshot_group_num_not,omitempty"`

	// snapshot group num not in
	SnapshotGroupNumNotIn []int32 `json:"snapshot_group_num_not_in,omitempty"`

	// start time
	StartTime *string `json:"start_time,omitempty"`

	// start time gt
	StartTimeGt *string `json:"start_time_gt,omitempty"`

	// start time gte
	StartTimeGte *string `json:"start_time_gte,omitempty"`

	// start time in
	StartTimeIn []string `json:"start_time_in,omitempty"`

	// start time lt
	StartTimeLt *string `json:"start_time_lt,omitempty"`

	// start time lte
	StartTimeLte *string `json:"start_time_lte,omitempty"`

	// start time not
	StartTimeNot *string `json:"start_time_not,omitempty"`

	// start time not in
	StartTimeNotIn []string `json:"start_time_not_in,omitempty"`

	// status
	Status struct {
		SnapshotPlanStatus
	} `json:"status,omitempty"`

	// status in
	StatusIn []SnapshotPlanStatus `json:"status_in,omitempty"`

	// status not
	StatusNot struct {
		SnapshotPlanStatus
	} `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []SnapshotPlanStatus `json:"status_not_in,omitempty"`

	// vms every
	VmsEvery struct {
		VMWhereInput
	} `json:"vms_every,omitempty"`

	// vms none
	VmsNone struct {
		VMWhereInput
	} `json:"vms_none,omitempty"`

	// vms some
	VmsSome struct {
		VMWhereInput
	} `json:"vms_some,omitempty"`
}

// Validate validates this snapshot plan where input
func (m *SnapshotPlanWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlanType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlanTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlanTypeNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlanTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionTasksEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionTasksNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionTasksSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastExecuteStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateExecutePlanType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutePlanType) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateExecutePlanTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutePlanTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ExecutePlanTypeIn); i++ {

		if err := m.ExecutePlanTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_plan_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateExecutePlanTypeNot(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutePlanTypeNot) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateExecutePlanTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutePlanTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ExecutePlanTypeNotIn); i++ {

		if err := m.ExecutePlanTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_plan_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateExecutionTasksEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionTasksEvery) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateExecutionTasksNone(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionTasksNone) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateExecutionTasksSome(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionTasksSome) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateLastExecuteStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatus) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateLastExecuteStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateLastExecuteStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusNot) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateLastExecuteStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LastExecuteStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNot) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	return nil
}

func (m *SnapshotPlanWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this snapshot plan where input based on the context it is used
func (m *SnapshotPlanWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutePlanType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutePlanTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutePlanTypeNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutePlanTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutionTasksEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutionTasksNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutionTasksSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastExecuteStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateExecutePlanType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateExecutePlanTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExecutePlanTypeIn); i++ {

		if err := m.ExecutePlanTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_plan_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateExecutePlanTypeNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateExecutePlanTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExecutePlanTypeNotIn); i++ {

		if err := m.ExecutePlanTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execute_plan_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateExecutionTasksEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateExecutionTasksNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateExecutionTasksSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateLastExecuteStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateLastExecuteStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusIn); i++ {

		if err := m.LastExecuteStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateLastExecuteStatusNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateLastExecuteStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LastExecuteStatusNotIn); i++ {

		if err := m.LastExecuteStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("last_execute_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateStatusNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *SnapshotPlanWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlanWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlanWhereInput) UnmarshalBinary(b []byte) error {
	var res SnapshotPlanWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
