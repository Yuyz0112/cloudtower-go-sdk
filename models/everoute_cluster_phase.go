// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EverouteClusterPhase everoute cluster phase
//
// swagger:model EverouteClusterPhase
type EverouteClusterPhase string

func NewEverouteClusterPhase(value EverouteClusterPhase) *EverouteClusterPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EverouteClusterPhase.
func (m EverouteClusterPhase) Pointer() *EverouteClusterPhase {
	return &m
}

const (

	// EverouteClusterPhaseAssociated captures enum value "Associated"
	EverouteClusterPhaseAssociated EverouteClusterPhase = "Associated"

	// EverouteClusterPhaseFailed captures enum value "Failed"
	EverouteClusterPhaseFailed EverouteClusterPhase = "Failed"

	// EverouteClusterPhaseInit captures enum value "Init"
	EverouteClusterPhaseInit EverouteClusterPhase = "Init"

	// EverouteClusterPhaseRunning captures enum value "Running"
	EverouteClusterPhaseRunning EverouteClusterPhase = "Running"

	// EverouteClusterPhaseTerminating captures enum value "Terminating"
	EverouteClusterPhaseTerminating EverouteClusterPhase = "Terminating"

	// EverouteClusterPhaseUpdating captures enum value "Updating"
	EverouteClusterPhaseUpdating EverouteClusterPhase = "Updating"

	// EverouteClusterPhaseUpgrading captures enum value "Upgrading"
	EverouteClusterPhaseUpgrading EverouteClusterPhase = "Upgrading"
)

// for schema
var everouteClusterPhaseEnum []interface{}

func init() {
	var res []EverouteClusterPhase
	if err := json.Unmarshal([]byte(`["Associated","Failed","Init","Running","Terminating","Updating","Upgrading"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		everouteClusterPhaseEnum = append(everouteClusterPhaseEnum, v)
	}
}

func (m EverouteClusterPhase) validateEverouteClusterPhaseEnum(path, location string, value EverouteClusterPhase) error {
	if err := validate.EnumCase(path, location, value, everouteClusterPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this everoute cluster phase
func (m EverouteClusterPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEverouteClusterPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this everoute cluster phase based on context it is used
func (m EverouteClusterPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
