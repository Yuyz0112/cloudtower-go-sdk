// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TaskWhereInput task where input
//
// swagger:model TaskWhereInput
type TaskWhereInput struct {

	// a n d
	AND []*TaskWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*TaskWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*TaskWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster interface{} `json:"cluster,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// error code
	ErrorCode *string `json:"error_code,omitempty"`

	// error code contains
	ErrorCodeContains *string `json:"error_code_contains,omitempty"`

	// error code ends with
	ErrorCodeEndsWith *string `json:"error_code_ends_with,omitempty"`

	// error code gt
	ErrorCodeGt *string `json:"error_code_gt,omitempty"`

	// error code gte
	ErrorCodeGte *string `json:"error_code_gte,omitempty"`

	// error code in
	ErrorCodeIn []string `json:"error_code_in,omitempty"`

	// error code lt
	ErrorCodeLt *string `json:"error_code_lt,omitempty"`

	// error code lte
	ErrorCodeLte *string `json:"error_code_lte,omitempty"`

	// error code not
	ErrorCodeNot *string `json:"error_code_not,omitempty"`

	// error code not contains
	ErrorCodeNotContains *string `json:"error_code_not_contains,omitempty"`

	// error code not ends with
	ErrorCodeNotEndsWith *string `json:"error_code_not_ends_with,omitempty"`

	// error code not in
	ErrorCodeNotIn []string `json:"error_code_not_in,omitempty"`

	// error code not starts with
	ErrorCodeNotStartsWith *string `json:"error_code_not_starts_with,omitempty"`

	// error code starts with
	ErrorCodeStartsWith *string `json:"error_code_starts_with,omitempty"`

	// error message
	ErrorMessage *string `json:"error_message,omitempty"`

	// error message contains
	ErrorMessageContains *string `json:"error_message_contains,omitempty"`

	// error message ends with
	ErrorMessageEndsWith *string `json:"error_message_ends_with,omitempty"`

	// error message gt
	ErrorMessageGt *string `json:"error_message_gt,omitempty"`

	// error message gte
	ErrorMessageGte *string `json:"error_message_gte,omitempty"`

	// error message in
	ErrorMessageIn []string `json:"error_message_in,omitempty"`

	// error message lt
	ErrorMessageLt *string `json:"error_message_lt,omitempty"`

	// error message lte
	ErrorMessageLte *string `json:"error_message_lte,omitempty"`

	// error message not
	ErrorMessageNot *string `json:"error_message_not,omitempty"`

	// error message not contains
	ErrorMessageNotContains *string `json:"error_message_not_contains,omitempty"`

	// error message not ends with
	ErrorMessageNotEndsWith *string `json:"error_message_not_ends_with,omitempty"`

	// error message not in
	ErrorMessageNotIn []string `json:"error_message_not_in,omitempty"`

	// error message not starts with
	ErrorMessageNotStartsWith *string `json:"error_message_not_starts_with,omitempty"`

	// error message starts with
	ErrorMessageStartsWith *string `json:"error_message_starts_with,omitempty"`

	// finished at
	FinishedAt *string `json:"finished_at,omitempty"`

	// finished at gt
	FinishedAtGt *string `json:"finished_at_gt,omitempty"`

	// finished at gte
	FinishedAtGte *string `json:"finished_at_gte,omitempty"`

	// finished at in
	FinishedAtIn []string `json:"finished_at_in,omitempty"`

	// finished at lt
	FinishedAtLt *string `json:"finished_at_lt,omitempty"`

	// finished at lte
	FinishedAtLte *string `json:"finished_at_lte,omitempty"`

	// finished at not
	FinishedAtNot *string `json:"finished_at_not,omitempty"`

	// finished at not in
	FinishedAtNotIn []string `json:"finished_at_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// internal not
	InternalNot *bool `json:"internal_not,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local created at gt
	LocalCreatedAtGt *string `json:"local_created_at_gt,omitempty"`

	// local created at gte
	LocalCreatedAtGte *string `json:"local_created_at_gte,omitempty"`

	// local created at in
	LocalCreatedAtIn []string `json:"local_created_at_in,omitempty"`

	// local created at lt
	LocalCreatedAtLt *string `json:"local_created_at_lt,omitempty"`

	// local created at lte
	LocalCreatedAtLte *string `json:"local_created_at_lte,omitempty"`

	// local created at not
	LocalCreatedAtNot *string `json:"local_created_at_not,omitempty"`

	// local created at not in
	LocalCreatedAtNotIn []string `json:"local_created_at_not_in,omitempty"`

	// progress
	Progress *float64 `json:"progress,omitempty"`

	// progress gt
	ProgressGt *float64 `json:"progress_gt,omitempty"`

	// progress gte
	ProgressGte *float64 `json:"progress_gte,omitempty"`

	// progress in
	ProgressIn []float64 `json:"progress_in,omitempty"`

	// progress lt
	ProgressLt *float64 `json:"progress_lt,omitempty"`

	// progress lte
	ProgressLte *float64 `json:"progress_lte,omitempty"`

	// progress not
	ProgressNot *float64 `json:"progress_not,omitempty"`

	// progress not in
	ProgressNotIn []float64 `json:"progress_not_in,omitempty"`

	// snapshot
	Snapshot *string `json:"snapshot,omitempty"`

	// snapshot contains
	SnapshotContains *string `json:"snapshot_contains,omitempty"`

	// snapshot ends with
	SnapshotEndsWith *string `json:"snapshot_ends_with,omitempty"`

	// snapshot gt
	SnapshotGt *string `json:"snapshot_gt,omitempty"`

	// snapshot gte
	SnapshotGte *string `json:"snapshot_gte,omitempty"`

	// snapshot in
	SnapshotIn []string `json:"snapshot_in,omitempty"`

	// snapshot lt
	SnapshotLt *string `json:"snapshot_lt,omitempty"`

	// snapshot lte
	SnapshotLte *string `json:"snapshot_lte,omitempty"`

	// snapshot not
	SnapshotNot *string `json:"snapshot_not,omitempty"`

	// snapshot not contains
	SnapshotNotContains *string `json:"snapshot_not_contains,omitempty"`

	// snapshot not ends with
	SnapshotNotEndsWith *string `json:"snapshot_not_ends_with,omitempty"`

	// snapshot not in
	SnapshotNotIn []string `json:"snapshot_not_in,omitempty"`

	// snapshot not starts with
	SnapshotNotStartsWith *string `json:"snapshot_not_starts_with,omitempty"`

	// snapshot starts with
	SnapshotStartsWith *string `json:"snapshot_starts_with,omitempty"`

	// started at
	StartedAt *string `json:"started_at,omitempty"`

	// started at gt
	StartedAtGt *string `json:"started_at_gt,omitempty"`

	// started at gte
	StartedAtGte *string `json:"started_at_gte,omitempty"`

	// started at in
	StartedAtIn []string `json:"started_at_in,omitempty"`

	// started at lt
	StartedAtLt *string `json:"started_at_lt,omitempty"`

	// started at lte
	StartedAtLte *string `json:"started_at_lte,omitempty"`

	// started at not
	StartedAtNot *string `json:"started_at_not,omitempty"`

	// started at not in
	StartedAtNotIn []string `json:"started_at_not_in,omitempty"`

	// status
	Status interface{} `json:"status,omitempty"`

	// status in
	StatusIn []TaskStatus `json:"status_in,omitempty"`

	// status not
	StatusNot interface{} `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []TaskStatus `json:"status_not_in,omitempty"`

	// user
	User interface{} `json:"user,omitempty"`
}

// Validate validates this task where input
func (m *TaskWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TaskWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this task where input based on the context it is used
func (m *TaskWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TaskWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskWhereInput) UnmarshalBinary(b []byte) error {
	var res TaskWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
