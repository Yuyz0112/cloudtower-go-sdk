// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StepUnit step unit
//
// swagger:model StepUnit
type StepUnit string

func NewStepUnit(value StepUnit) *StepUnit {
	v := value
	return &v
}

const (

	// StepUnitBIT captures enum value "BIT"
	StepUnitBIT StepUnit = "BIT"

	// StepUnitBYTE captures enum value "BYTE"
	StepUnitBYTE StepUnit = "BYTE"

	// StepUnitCOUNT captures enum value "COUNT"
	StepUnitCOUNT StepUnit = "COUNT"

	// StepUnitPERCENT captures enum value "PERCENT"
	StepUnitPERCENT StepUnit = "PERCENT"
)

// for schema
var stepUnitEnum []interface{}

func init() {
	var res []StepUnit
	if err := json.Unmarshal([]byte(`["BIT","BYTE","COUNT","PERCENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stepUnitEnum = append(stepUnitEnum, v)
	}
}

func (m StepUnit) validateStepUnitEnum(path, location string, value StepUnit) error {
	if err := validate.EnumCase(path, location, value, stepUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this step unit
func (m StepUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStepUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this step unit based on context it is used
func (m StepUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
