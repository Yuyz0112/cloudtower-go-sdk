// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NotifierSecurityMode notifier security mode
//
// swagger:model NotifierSecurityMode
type NotifierSecurityMode string

func NewNotifierSecurityMode(value NotifierSecurityMode) *NotifierSecurityMode {
	v := value
	return &v
}

const (

	// NotifierSecurityModeSSL captures enum value "SSL"
	NotifierSecurityModeSSL NotifierSecurityMode = "SSL"

	// NotifierSecurityModeSTARTTLS captures enum value "STARTTLS"
	NotifierSecurityModeSTARTTLS NotifierSecurityMode = "STARTTLS"

	// NotifierSecurityModeUNSPECIFIED captures enum value "UNSPECIFIED"
	NotifierSecurityModeUNSPECIFIED NotifierSecurityMode = "UNSPECIFIED"
)

// for schema
var notifierSecurityModeEnum []interface{}

func init() {
	var res []NotifierSecurityMode
	if err := json.Unmarshal([]byte(`["SSL","STARTTLS","UNSPECIFIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notifierSecurityModeEnum = append(notifierSecurityModeEnum, v)
	}
}

func (m NotifierSecurityMode) validateNotifierSecurityModeEnum(path, location string, value NotifierSecurityMode) error {
	if err := validate.EnumCase(path, location, value, notifierSecurityModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this notifier security mode
func (m NotifierSecurityMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNotifierSecurityModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this notifier security mode based on context it is used
func (m NotifierSecurityMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
