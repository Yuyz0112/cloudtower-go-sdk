// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkPolicyRuleType network policy rule type
//
// swagger:model NetworkPolicyRuleType
type NetworkPolicyRuleType string

func NewNetworkPolicyRuleType(value NetworkPolicyRuleType) *NetworkPolicyRuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkPolicyRuleType.
func (m NetworkPolicyRuleType) Pointer() *NetworkPolicyRuleType {
	return &m
}

const (

	// NetworkPolicyRuleTypeALL captures enum value "ALL"
	NetworkPolicyRuleTypeALL NetworkPolicyRuleType = "ALL"

	// NetworkPolicyRuleTypeIPBLOCK captures enum value "IP_BLOCK"
	NetworkPolicyRuleTypeIPBLOCK NetworkPolicyRuleType = "IP_BLOCK"

	// NetworkPolicyRuleTypeSELECTOR captures enum value "SELECTOR"
	NetworkPolicyRuleTypeSELECTOR NetworkPolicyRuleType = "SELECTOR"
)

// for schema
var networkPolicyRuleTypeEnum []interface{}

func init() {
	var res []NetworkPolicyRuleType
	if err := json.Unmarshal([]byte(`["ALL","IP_BLOCK","SELECTOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkPolicyRuleTypeEnum = append(networkPolicyRuleTypeEnum, v)
	}
}

func (m NetworkPolicyRuleType) validateNetworkPolicyRuleTypeEnum(path, location string, value NetworkPolicyRuleType) error {
	if err := validate.EnumCase(path, location, value, networkPolicyRuleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network policy rule type
func (m NetworkPolicyRuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkPolicyRuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network policy rule type based on context it is used
func (m NetworkPolicyRuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
