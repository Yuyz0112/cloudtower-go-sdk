// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupPlanDeleteStrategy backup plan delete strategy
//
// swagger:model BackupPlanDeleteStrategy
type BackupPlanDeleteStrategy string

func NewBackupPlanDeleteStrategy(value BackupPlanDeleteStrategy) *BackupPlanDeleteStrategy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BackupPlanDeleteStrategy.
func (m BackupPlanDeleteStrategy) Pointer() *BackupPlanDeleteStrategy {
	return &m
}

const (

	// BackupPlanDeleteStrategyDELETERESTOREPOINT captures enum value "DELETE_RESTORE_POINT"
	BackupPlanDeleteStrategyDELETERESTOREPOINT BackupPlanDeleteStrategy = "DELETE_RESTORE_POINT"

	// BackupPlanDeleteStrategyKEEPRESTOREPOINT captures enum value "KEEP_RESTORE_POINT"
	BackupPlanDeleteStrategyKEEPRESTOREPOINT BackupPlanDeleteStrategy = "KEEP_RESTORE_POINT"
)

// for schema
var backupPlanDeleteStrategyEnum []interface{}

func init() {
	var res []BackupPlanDeleteStrategy
	if err := json.Unmarshal([]byte(`["DELETE_RESTORE_POINT","KEEP_RESTORE_POINT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupPlanDeleteStrategyEnum = append(backupPlanDeleteStrategyEnum, v)
	}
}

func (m BackupPlanDeleteStrategy) validateBackupPlanDeleteStrategyEnum(path, location string, value BackupPlanDeleteStrategy) error {
	if err := validate.EnumCase(path, location, value, backupPlanDeleteStrategyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup plan delete strategy
func (m BackupPlanDeleteStrategy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupPlanDeleteStrategyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup plan delete strategy based on context it is used
func (m BackupPlanDeleteStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
