// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EntityAsyncStatus entity async status
//
// swagger:model EntityAsyncStatus
type EntityAsyncStatus string

func NewEntityAsyncStatus(value EntityAsyncStatus) *EntityAsyncStatus {
	v := value
	return &v
}

const (

	// EntityAsyncStatusCREATING captures enum value "CREATING"
	EntityAsyncStatusCREATING EntityAsyncStatus = "CREATING"

	// EntityAsyncStatusDELETING captures enum value "DELETING"
	EntityAsyncStatusDELETING EntityAsyncStatus = "DELETING"

	// EntityAsyncStatusUPDATING captures enum value "UPDATING"
	EntityAsyncStatusUPDATING EntityAsyncStatus = "UPDATING"
)

// for schema
var entityAsyncStatusEnum []interface{}

func init() {
	var res []EntityAsyncStatus
	if err := json.Unmarshal([]byte(`["CREATING","DELETING","UPDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entityAsyncStatusEnum = append(entityAsyncStatusEnum, v)
	}
}

func (m EntityAsyncStatus) validateEntityAsyncStatusEnum(path, location string, value EntityAsyncStatus) error {
	if err := validate.EnumCase(path, location, value, entityAsyncStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this entity async status
func (m EntityAsyncStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEntityAsyncStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this entity async status based on context it is used
func (m EntityAsyncStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
