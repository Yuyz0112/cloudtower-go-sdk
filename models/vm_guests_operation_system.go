// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMGuestsOperationSystem Vm guests operation system
//
// swagger:model VmGuestsOperationSystem
type VMGuestsOperationSystem string

func NewVMGuestsOperationSystem(value VMGuestsOperationSystem) *VMGuestsOperationSystem {
	v := value
	return &v
}

const (

	// VMGuestsOperationSystemLINUX captures enum value "LINUX"
	VMGuestsOperationSystemLINUX VMGuestsOperationSystem = "LINUX"

	// VMGuestsOperationSystemUNKNOWN captures enum value "UNKNOWN"
	VMGuestsOperationSystemUNKNOWN VMGuestsOperationSystem = "UNKNOWN"

	// VMGuestsOperationSystemWINDOWS captures enum value "WINDOWS"
	VMGuestsOperationSystemWINDOWS VMGuestsOperationSystem = "WINDOWS"
)

// for schema
var vmGuestsOperationSystemEnum []interface{}

func init() {
	var res []VMGuestsOperationSystem
	if err := json.Unmarshal([]byte(`["LINUX","UNKNOWN","WINDOWS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmGuestsOperationSystemEnum = append(vmGuestsOperationSystemEnum, v)
	}
}

func (m VMGuestsOperationSystem) validateVMGuestsOperationSystemEnum(path, location string, value VMGuestsOperationSystem) error {
	if err := validate.EnumCase(path, location, value, vmGuestsOperationSystemEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm guests operation system
func (m VMGuestsOperationSystem) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMGuestsOperationSystemEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm guests operation system based on context it is used
func (m VMGuestsOperationSystem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
