// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotPlanUpdationParams snapshot plan updation params
//
// swagger:model SnapshotPlanUpdationParams
type SnapshotPlanUpdationParams struct {

	// end time
	EndTime string `json:"end_time,omitempty"`

	// exec h m
	Exechm string `json:"exec_h_m,omitempty"`

	// execute intervals
	ExecuteIntervals []float64 `json:"execute_intervals"`

	// execute plan type
	ExecutePlanType SnapshotPlanExecuteType `json:"execute_plan_type,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	Name string `json:"name,omitempty"`

	// remain snapshot num
	RemainSnapshotNum float64 `json:"remain_snapshot_num,omitempty"`

	// start time
	StartTime string `json:"start_time,omitempty"`

	// vm ids
	VMIds []string `json:"vm_ids"`
}

// Validate validates this snapshot plan updation params
func (m *SnapshotPlanUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutePlanType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanUpdationParams) validateExecutePlanType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutePlanType) { // not required
		return nil
	}

	if err := m.ExecutePlanType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("execute_plan_type")
		}
		return err
	}

	return nil
}

func (m *SnapshotPlanUpdationParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this snapshot plan updation params based on the context it is used
func (m *SnapshotPlanUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutePlanType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanUpdationParams) contextValidateExecutePlanType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ExecutePlanType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("execute_plan_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlanUpdationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlanUpdationParams) UnmarshalBinary(b []byte) error {
	var res SnapshotPlanUpdationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
