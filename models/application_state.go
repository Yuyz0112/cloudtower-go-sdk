// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ApplicationState application state
//
// swagger:model ApplicationState
type ApplicationState string

func NewApplicationState(value ApplicationState) *ApplicationState {
	v := value
	return &v
}

const (

	// ApplicationStateDEPLOYERROR captures enum value "DEPLOY_ERROR"
	ApplicationStateDEPLOYERROR ApplicationState = "DEPLOY_ERROR"

	// ApplicationStateDEPLOYED captures enum value "DEPLOYED"
	ApplicationStateDEPLOYED ApplicationState = "DEPLOYED"

	// ApplicationStateDEPLOYING captures enum value "DEPLOYING"
	ApplicationStateDEPLOYING ApplicationState = "DEPLOYING"

	// ApplicationStateEDITING captures enum value "EDITING"
	ApplicationStateEDITING ApplicationState = "EDITING"

	// ApplicationStateNOTDEPLOYED captures enum value "NOT_DEPLOYED"
	ApplicationStateNOTDEPLOYED ApplicationState = "NOT_DEPLOYED"

	// ApplicationStateSTOPERROR captures enum value "STOP_ERROR"
	ApplicationStateSTOPERROR ApplicationState = "STOP_ERROR"

	// ApplicationStateSTOPPED captures enum value "STOPPED"
	ApplicationStateSTOPPED ApplicationState = "STOPPED"

	// ApplicationStateSTOPPING captures enum value "STOPPING"
	ApplicationStateSTOPPING ApplicationState = "STOPPING"

	// ApplicationStateUPGRADING captures enum value "UPGRADING"
	ApplicationStateUPGRADING ApplicationState = "UPGRADING"
)

// for schema
var applicationStateEnum []interface{}

func init() {
	var res []ApplicationState
	if err := json.Unmarshal([]byte(`["DEPLOY_ERROR","DEPLOYED","DEPLOYING","EDITING","NOT_DEPLOYED","STOP_ERROR","STOPPED","STOPPING","UPGRADING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationStateEnum = append(applicationStateEnum, v)
	}
}

func (m ApplicationState) validateApplicationStateEnum(path, location string, value ApplicationState) error {
	if err := validate.EnumCase(path, location, value, applicationStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this application state
func (m ApplicationState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateApplicationStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this application state based on context it is used
func (m ApplicationState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
