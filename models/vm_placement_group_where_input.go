// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMPlacementGroupWhereInput Vm placement group where input
// Example: {"AND":"VmPlacementGroupWhereInput[]","NOT":"VmPlacementGroupWhereInput[]","OR":"VmPlacementGroupWhereInput[]","cluster":"ClusterWhereInput","description":"string","description_contains":"string","description_ends_with":"string","description_gt":"string","description_gte":"string","description_in":["string"],"description_lt":"string","description_lte":"string","description_not":"string","description_not_contains":"string","description_not_ends_with":"string","description_not_in":["string"],"description_not_starts_with":"string","description_starts_with":"string","enabled":false,"enabled_not":false,"entityAsyncStatus":"CREATING","entityAsyncStatus_in":["CREATING"],"entityAsyncStatus_not":"CREATING","entityAsyncStatus_not_in":["CREATING"],"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","local_created_at":"string","local_created_at_gt":"string","local_created_at_gte":"string","local_created_at_in":["string"],"local_created_at_lt":"string","local_created_at_lte":"string","local_created_at_not":"string","local_created_at_not_in":["string"],"local_id":"string","local_id_contains":"string","local_id_ends_with":"string","local_id_gt":"string","local_id_gte":"string","local_id_in":["string"],"local_id_lt":"string","local_id_lte":"string","local_id_not":"string","local_id_not_contains":"string","local_id_not_ends_with":"string","local_id_not_in":["string"],"local_id_not_starts_with":"string","local_id_starts_with":"string","local_updated_at":"string","local_updated_at_gt":"string","local_updated_at_gte":"string","local_updated_at_in":["string"],"local_updated_at_lt":"string","local_updated_at_lte":"string","local_updated_at_not":"string","local_updated_at_not_in":["string"],"name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","vm_host_must_enabled":false,"vm_host_must_enabled_not":false,"vm_host_must_host_uuids_every":"HostWhereInput","vm_host_must_host_uuids_none":"HostWhereInput","vm_host_must_host_uuids_some":"HostWhereInput","vm_host_must_policy":false,"vm_host_must_policy_not":false,"vm_host_prefer_enabled":false,"vm_host_prefer_enabled_not":false,"vm_host_prefer_host_uuids_every":"HostWhereInput","vm_host_prefer_host_uuids_none":"HostWhereInput","vm_host_prefer_host_uuids_some":"HostWhereInput","vm_host_prefer_policy":false,"vm_host_prefer_policy_not":false,"vm_vm_policy":"MUST_DIFFERENT","vm_vm_policy_enabled":false,"vm_vm_policy_enabled_not":false,"vm_vm_policy_in":["MUST_DIFFERENT"],"vm_vm_policy_not":"MUST_DIFFERENT","vm_vm_policy_not_in":["MUST_DIFFERENT"],"vms_every":"VmWhereInput","vms_none":"VmWhereInput","vms_some":"VmWhereInput"}
//
// swagger:model VmPlacementGroupWhereInput
type VMPlacementGroupWhereInput struct {

	// a n d
	AND []*VMPlacementGroupWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VMPlacementGroupWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VMPlacementGroupWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster struct {
		ClusterWhereInput
	} `json:"cluster,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// enabled
	Enabled *bool `json:"enabled,omitempty"`

	// enabled not
	EnabledNot *bool `json:"enabled_not,omitempty"`

	// entity async status
	EntityAsyncStatus struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot struct {
		EntityAsyncStatus
	} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local created at gt
	LocalCreatedAtGt *string `json:"local_created_at_gt,omitempty"`

	// local created at gte
	LocalCreatedAtGte *string `json:"local_created_at_gte,omitempty"`

	// local created at in
	LocalCreatedAtIn []string `json:"local_created_at_in,omitempty"`

	// local created at lt
	LocalCreatedAtLt *string `json:"local_created_at_lt,omitempty"`

	// local created at lte
	LocalCreatedAtLte *string `json:"local_created_at_lte,omitempty"`

	// local created at not
	LocalCreatedAtNot *string `json:"local_created_at_not,omitempty"`

	// local created at not in
	LocalCreatedAtNotIn []string `json:"local_created_at_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// local updated at
	LocalUpdatedAt *string `json:"local_updated_at,omitempty"`

	// local updated at gt
	LocalUpdatedAtGt *string `json:"local_updated_at_gt,omitempty"`

	// local updated at gte
	LocalUpdatedAtGte *string `json:"local_updated_at_gte,omitempty"`

	// local updated at in
	LocalUpdatedAtIn []string `json:"local_updated_at_in,omitempty"`

	// local updated at lt
	LocalUpdatedAtLt *string `json:"local_updated_at_lt,omitempty"`

	// local updated at lte
	LocalUpdatedAtLte *string `json:"local_updated_at_lte,omitempty"`

	// local updated at not
	LocalUpdatedAtNot *string `json:"local_updated_at_not,omitempty"`

	// local updated at not in
	LocalUpdatedAtNotIn []string `json:"local_updated_at_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// vm host must enabled
	VMHostMustEnabled *bool `json:"vm_host_must_enabled,omitempty"`

	// vm host must enabled not
	VMHostMustEnabledNot *bool `json:"vm_host_must_enabled_not,omitempty"`

	// vm host must host uuids every
	VMHostMustHostUuidsEvery struct {
		HostWhereInput
	} `json:"vm_host_must_host_uuids_every,omitempty"`

	// vm host must host uuids none
	VMHostMustHostUuidsNone struct {
		HostWhereInput
	} `json:"vm_host_must_host_uuids_none,omitempty"`

	// vm host must host uuids some
	VMHostMustHostUuidsSome struct {
		HostWhereInput
	} `json:"vm_host_must_host_uuids_some,omitempty"`

	// vm host must policy
	VMHostMustPolicy *bool `json:"vm_host_must_policy,omitempty"`

	// vm host must policy not
	VMHostMustPolicyNot *bool `json:"vm_host_must_policy_not,omitempty"`

	// vm host prefer enabled
	VMHostPreferEnabled *bool `json:"vm_host_prefer_enabled,omitempty"`

	// vm host prefer enabled not
	VMHostPreferEnabledNot *bool `json:"vm_host_prefer_enabled_not,omitempty"`

	// vm host prefer host uuids every
	VMHostPreferHostUuidsEvery struct {
		HostWhereInput
	} `json:"vm_host_prefer_host_uuids_every,omitempty"`

	// vm host prefer host uuids none
	VMHostPreferHostUuidsNone struct {
		HostWhereInput
	} `json:"vm_host_prefer_host_uuids_none,omitempty"`

	// vm host prefer host uuids some
	VMHostPreferHostUuidsSome struct {
		HostWhereInput
	} `json:"vm_host_prefer_host_uuids_some,omitempty"`

	// vm host prefer policy
	VMHostPreferPolicy *bool `json:"vm_host_prefer_policy,omitempty"`

	// vm host prefer policy not
	VMHostPreferPolicyNot *bool `json:"vm_host_prefer_policy_not,omitempty"`

	// vm vm policy
	VMVMPolicy struct {
		VMVMPolicy
	} `json:"vm_vm_policy,omitempty"`

	// vm vm policy enabled
	VMVMPolicyEnabled *bool `json:"vm_vm_policy_enabled,omitempty"`

	// vm vm policy enabled not
	VMVMPolicyEnabledNot *bool `json:"vm_vm_policy_enabled_not,omitempty"`

	// vm vm policy in
	VMVMPolicyIn []VMVMPolicy `json:"vm_vm_policy_in,omitempty"`

	// vm vm policy not
	VMVMPolicyNot struct {
		VMVMPolicy
	} `json:"vm_vm_policy_not,omitempty"`

	// vm vm policy not in
	VMVMPolicyNotIn []VMVMPolicy `json:"vm_vm_policy_not_in,omitempty"`

	// vms every
	VmsEvery struct {
		VMWhereInput
	} `json:"vms_every,omitempty"`

	// vms none
	VmsNone struct {
		VMWhereInput
	} `json:"vms_none,omitempty"`

	// vms some
	VmsSome struct {
		VMWhereInput
	} `json:"vms_some,omitempty"`
}

// Validate validates this Vm placement group where input
func (m *VMPlacementGroupWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostMustHostUuidsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostMustHostUuidsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostMustHostUuidsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostPreferHostUuidsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostPreferHostUuidsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMHostPreferHostUuidsSome(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVMPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVMPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVMPolicyNot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVMPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsEvery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsNone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVmsSome(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMPlacementGroupWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateEntityAsyncStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatus) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateEntityAsyncStatusNot(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNot) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMHostMustHostUuidsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostMustHostUuidsEvery) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMHostMustHostUuidsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostMustHostUuidsNone) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMHostMustHostUuidsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostMustHostUuidsSome) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMHostPreferHostUuidsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostPreferHostUuidsEvery) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMHostPreferHostUuidsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostPreferHostUuidsNone) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMHostPreferHostUuidsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VMHostPreferHostUuidsSome) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMVMPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVMPolicy) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMVMPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVMPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.VMVMPolicyIn); i++ {

		if err := m.VMVMPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_vm_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_vm_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMVMPolicyNot(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVMPolicyNot) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVMVMPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.VMVMPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.VMVMPolicyNotIn); i++ {

		if err := m.VMVMPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_vm_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_vm_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVmsEvery(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsEvery) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVmsNone(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsNone) { // not required
		return nil
	}

	return nil
}

func (m *VMPlacementGroupWhereInput) validateVmsSome(formats strfmt.Registry) error {
	if swag.IsZero(m.VmsSome) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this Vm placement group where input based on the context it is used
func (m *VMPlacementGroupWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostMustHostUuidsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostMustHostUuidsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostMustHostUuidsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostPreferHostUuidsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostPreferHostUuidsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMHostPreferHostUuidsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVMPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVMPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVMPolicyNot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMVMPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsEvery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsNone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVmsSome(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateEntityAsyncStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateEntityAsyncStatusNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMHostMustHostUuidsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMHostMustHostUuidsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMHostMustHostUuidsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMHostPreferHostUuidsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMHostPreferHostUuidsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMHostPreferHostUuidsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMVMPolicy(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMVMPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMVMPolicyIn); i++ {

		if err := m.VMVMPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_vm_policy_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_vm_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMVMPolicyNot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVMVMPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMVMPolicyNotIn); i++ {

		if err := m.VMVMPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_vm_policy_not_in" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vm_vm_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVmsEvery(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVmsNone(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *VMPlacementGroupWhereInput) contextValidateVmsSome(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *VMPlacementGroupWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMPlacementGroupWhereInput) UnmarshalBinary(b []byte) error {
	var res VMPlacementGroupWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
