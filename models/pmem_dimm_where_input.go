// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PmemDimmWhereInput pmem dimm where input
//
// swagger:model PmemDimmWhereInput
type PmemDimmWhereInput struct {

	// a n d
	AND []*PmemDimmWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*PmemDimmWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*PmemDimmWhereInput `json:"OR,omitempty"`

	// capacity
	Capacity *float64 `json:"capacity,omitempty"`

	// capacity gt
	CapacityGt *float64 `json:"capacity_gt,omitempty"`

	// capacity gte
	CapacityGte *float64 `json:"capacity_gte,omitempty"`

	// capacity in
	CapacityIn []float64 `json:"capacity_in,omitempty"`

	// capacity lt
	CapacityLt *float64 `json:"capacity_lt,omitempty"`

	// capacity lte
	CapacityLte *float64 `json:"capacity_lte,omitempty"`

	// capacity not
	CapacityNot *float64 `json:"capacity_not,omitempty"`

	// capacity not in
	CapacityNotIn []float64 `json:"capacity_not_in,omitempty"`

	// device locator
	DeviceLocator *string `json:"device_locator,omitempty"`

	// device locator contains
	DeviceLocatorContains *string `json:"device_locator_contains,omitempty"`

	// device locator ends with
	DeviceLocatorEndsWith *string `json:"device_locator_ends_with,omitempty"`

	// device locator gt
	DeviceLocatorGt *string `json:"device_locator_gt,omitempty"`

	// device locator gte
	DeviceLocatorGte *string `json:"device_locator_gte,omitempty"`

	// device locator in
	DeviceLocatorIn []string `json:"device_locator_in,omitempty"`

	// device locator lt
	DeviceLocatorLt *string `json:"device_locator_lt,omitempty"`

	// device locator lte
	DeviceLocatorLte *string `json:"device_locator_lte,omitempty"`

	// device locator not
	DeviceLocatorNot *string `json:"device_locator_not,omitempty"`

	// device locator not contains
	DeviceLocatorNotContains *string `json:"device_locator_not_contains,omitempty"`

	// device locator not ends with
	DeviceLocatorNotEndsWith *string `json:"device_locator_not_ends_with,omitempty"`

	// device locator not in
	DeviceLocatorNotIn []string `json:"device_locator_not_in,omitempty"`

	// device locator not starts with
	DeviceLocatorNotStartsWith *string `json:"device_locator_not_starts_with,omitempty"`

	// device locator starts with
	DeviceLocatorStartsWith *string `json:"device_locator_starts_with,omitempty"`

	// disk
	Disk interface{} `json:"disk,omitempty"`

	// health status
	HealthStatus interface{} `json:"health_status,omitempty"`

	// health status in
	HealthStatusIn []DiskHealthStatus `json:"health_status_in,omitempty"`

	// health status not
	HealthStatusNot interface{} `json:"health_status_not,omitempty"`

	// health status not in
	HealthStatusNotIn []DiskHealthStatus `json:"health_status_not_in,omitempty"`

	// host
	Host interface{} `json:"host,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// numa node
	NumaNode *float64 `json:"numa_node,omitempty"`

	// numa node gt
	NumaNodeGt *float64 `json:"numa_node_gt,omitempty"`

	// numa node gte
	NumaNodeGte *float64 `json:"numa_node_gte,omitempty"`

	// numa node in
	NumaNodeIn []float64 `json:"numa_node_in,omitempty"`

	// numa node lt
	NumaNodeLt *float64 `json:"numa_node_lt,omitempty"`

	// numa node lte
	NumaNodeLte *float64 `json:"numa_node_lte,omitempty"`

	// numa node not
	NumaNodeNot *float64 `json:"numa_node_not,omitempty"`

	// numa node not in
	NumaNodeNotIn []float64 `json:"numa_node_not_in,omitempty"`

	// part number
	PartNumber *string `json:"part_number,omitempty"`

	// part number contains
	PartNumberContains *string `json:"part_number_contains,omitempty"`

	// part number ends with
	PartNumberEndsWith *string `json:"part_number_ends_with,omitempty"`

	// part number gt
	PartNumberGt *string `json:"part_number_gt,omitempty"`

	// part number gte
	PartNumberGte *string `json:"part_number_gte,omitempty"`

	// part number in
	PartNumberIn []string `json:"part_number_in,omitempty"`

	// part number lt
	PartNumberLt *string `json:"part_number_lt,omitempty"`

	// part number lte
	PartNumberLte *string `json:"part_number_lte,omitempty"`

	// part number not
	PartNumberNot *string `json:"part_number_not,omitempty"`

	// part number not contains
	PartNumberNotContains *string `json:"part_number_not_contains,omitempty"`

	// part number not ends with
	PartNumberNotEndsWith *string `json:"part_number_not_ends_with,omitempty"`

	// part number not in
	PartNumberNotIn []string `json:"part_number_not_in,omitempty"`

	// part number not starts with
	PartNumberNotStartsWith *string `json:"part_number_not_starts_with,omitempty"`

	// part number starts with
	PartNumberStartsWith *string `json:"part_number_starts_with,omitempty"`

	// remaining life percent
	RemainingLifePercent *float64 `json:"remaining_life_percent,omitempty"`

	// remaining life percent gt
	RemainingLifePercentGt *float64 `json:"remaining_life_percent_gt,omitempty"`

	// remaining life percent gte
	RemainingLifePercentGte *float64 `json:"remaining_life_percent_gte,omitempty"`

	// remaining life percent in
	RemainingLifePercentIn []float64 `json:"remaining_life_percent_in,omitempty"`

	// remaining life percent lt
	RemainingLifePercentLt *float64 `json:"remaining_life_percent_lt,omitempty"`

	// remaining life percent lte
	RemainingLifePercentLte *float64 `json:"remaining_life_percent_lte,omitempty"`

	// remaining life percent not
	RemainingLifePercentNot *float64 `json:"remaining_life_percent_not,omitempty"`

	// remaining life percent not in
	RemainingLifePercentNotIn []float64 `json:"remaining_life_percent_not_in,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`
}

// Validate validates this pmem dimm where input
func (m *PmemDimmWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PmemDimmWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateHealthStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) validateHealthStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this pmem dimm where input based on the context it is used
func (m *PmemDimmWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PmemDimmWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateHealthStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PmemDimmWhereInput) contextValidateHealthStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PmemDimmWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PmemDimmWhereInput) UnmarshalBinary(b []byte) error {
	var res PmemDimmWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
