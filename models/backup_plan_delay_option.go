// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupPlanDelayOption backup plan delay option
//
// swagger:model BackupPlanDelayOption
type BackupPlanDelayOption string

func NewBackupPlanDelayOption(value BackupPlanDelayOption) *BackupPlanDelayOption {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BackupPlanDelayOption.
func (m BackupPlanDelayOption) Pointer() *BackupPlanDelayOption {
	return &m
}

const (

	// BackupPlanDelayOptionKEEPGOON captures enum value "KEEP_GO_ON"
	BackupPlanDelayOptionKEEPGOON BackupPlanDelayOption = "KEEP_GO_ON"

	// BackupPlanDelayOptionSTOPBACKUP captures enum value "STOP_BACKUP"
	BackupPlanDelayOptionSTOPBACKUP BackupPlanDelayOption = "STOP_BACKUP"
)

// for schema
var backupPlanDelayOptionEnum []interface{}

func init() {
	var res []BackupPlanDelayOption
	if err := json.Unmarshal([]byte(`["KEEP_GO_ON","STOP_BACKUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupPlanDelayOptionEnum = append(backupPlanDelayOptionEnum, v)
	}
}

func (m BackupPlanDelayOption) validateBackupPlanDelayOptionEnum(path, location string, value BackupPlanDelayOption) error {
	if err := validate.EnumCase(path, location, value, backupPlanDelayOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup plan delay option
func (m BackupPlanDelayOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupPlanDelayOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup plan delay option based on context it is used
func (m BackupPlanDelayOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
