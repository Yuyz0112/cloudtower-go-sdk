// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MountDisksParams mount disks params
//
// swagger:model MountDisksParams
type MountDisksParams []*MountDisksParamsItems0

// Validate validates this mount disks params
func (m MountDisksParams) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this mount disks params based on the context it is used
func (m MountDisksParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MountDisksParamsItems0 mount disks params items0
//
// swagger:model MountDisksParamsItems0
type MountDisksParamsItems0 struct {

	// boot
	// Required: true
	Boot *float64 `json:"boot"`

	// bus
	// Required: true
	Bus *Bus `json:"bus"`

	// index
	// Required: true
	Index *float64 `json:"index"`

	// key
	Key float64 `json:"key,omitempty"`

	// max bandwidth
	MaxBandwidth float64 `json:"max_bandwidth,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy VMDiskIoRestrictType `json:"max_bandwidth_policy,omitempty"`

	// max iops
	MaxIops float64 `json:"max_iops,omitempty"`

	// max iops policy
	MaxIopsPolicy VMDiskIoRestrictType `json:"max_iops_policy,omitempty"`

	// vm volume id
	// Required: true
	VMVolumeID *string `json:"vm_volume_id"`
}

// Validate validates this mount disks params items0
func (m *MountDisksParamsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountDisksParamsItems0) validateBoot(formats strfmt.Registry) error {

	if err := validate.Required("boot", "body", m.Boot); err != nil {
		return err
	}

	return nil
}

func (m *MountDisksParamsItems0) validateBus(formats strfmt.Registry) error {

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if err := validate.Required("bus", "body", m.Bus); err != nil {
		return err
	}

	if m.Bus != nil {
		if err := m.Bus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *MountDisksParamsItems0) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *MountDisksParamsItems0) validateMaxBandwidthPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicy) { // not required
		return nil
	}

	if err := m.MaxBandwidthPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_bandwidth_policy")
		}
		return err
	}

	return nil
}

func (m *MountDisksParamsItems0) validateMaxIopsPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicy) { // not required
		return nil
	}

	if err := m.MaxIopsPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_iops_policy")
		}
		return err
	}

	return nil
}

func (m *MountDisksParamsItems0) validateVMVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("vm_volume_id", "body", m.VMVolumeID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mount disks params items0 based on the context it is used
func (m *MountDisksParamsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountDisksParamsItems0) contextValidateBus(ctx context.Context, formats strfmt.Registry) error {

	if m.Bus != nil {
		if err := m.Bus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bus")
			}
			return err
		}
	}

	return nil
}

func (m *MountDisksParamsItems0) contextValidateMaxBandwidthPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaxBandwidthPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_bandwidth_policy")
		}
		return err
	}

	return nil
}

func (m *MountDisksParamsItems0) contextValidateMaxIopsPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MaxIopsPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("max_iops_policy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountDisksParamsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountDisksParamsItems0) UnmarshalBinary(b []byte) error {
	var res MountDisksParamsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
