// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetGlobalAlertRulesConnectionRequestBody get global alert rules connection request body
// Example: {"after":"globalAlertRulesConnection-id-string","before":"globalAlertRulesConnection-id-string","first":0,"last":0,"orderBy":"boolean_ASC","skip":0,"where":{"AND":"GlobalAlertRuleWhereInput[]","NOT":"GlobalAlertRuleWhereInput[]","OR":"GlobalAlertRuleWhereInput[]","alert_rules_every":"AlertRuleWhereInput","alert_rules_none":"AlertRuleWhereInput","alert_rules_some":"AlertRuleWhereInput","boolean":false,"boolean_not":false,"cause":"string","cause_contains":"string","cause_ends_with":"string","cause_gt":"string","cause_gte":"string","cause_in":["string"],"cause_lt":"string","cause_lte":"string","cause_not":"string","cause_not_contains":"string","cause_not_ends_with":"string","cause_not_in":["string"],"cause_not_starts_with":"string","cause_starts_with":"string","disabled":false,"disabled_not":false,"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","impact":"string","impact_contains":"string","impact_ends_with":"string","impact_gt":"string","impact_gte":"string","impact_in":["string"],"impact_lt":"string","impact_lte":"string","impact_not":"string","impact_not_contains":"string","impact_not_ends_with":"string","impact_not_in":["string"],"impact_not_starts_with":"string","impact_starts_with":"string","message":"string","message_contains":"string","message_ends_with":"string","message_gt":"string","message_gte":"string","message_in":["string"],"message_lt":"string","message_lte":"string","message_not":"string","message_not_contains":"string","message_not_ends_with":"string","message_not_in":["string"],"message_not_starts_with":"string","message_starts_with":"string","name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","object":"BRICK","object_in":["BRICK"],"object_not":"BRICK","object_not_in":["BRICK"],"operator":"string","operator_contains":"string","operator_ends_with":"string","operator_gt":"string","operator_gte":"string","operator_in":["string"],"operator_lt":"string","operator_lte":"string","operator_not":"string","operator_not_contains":"string","operator_not_ends_with":"string","operator_not_in":["string"],"operator_not_starts_with":"string","operator_starts_with":"string","solution":"string","solution_contains":"string","solution_ends_with":"string","solution_gt":"string","solution_gte":"string","solution_in":["string"],"solution_lt":"string","solution_lte":"string","solution_not":"string","solution_not_contains":"string","solution_not_ends_with":"string","solution_not_in":["string"],"solution_not_starts_with":"string","solution_starts_with":"string","unit":"BIT","unit_in":["BIT"],"unit_not":"BIT","unit_not_in":["BIT"]}}
//
// swagger:model GetGlobalAlertRulesConnectionRequestBody
type GetGlobalAlertRulesConnectionRequestBody struct {

	// after
	After *string `json:"after,omitempty"`

	// before
	Before *string `json:"before,omitempty"`

	// first
	First *int32 `json:"first,omitempty"`

	// last
	Last *int32 `json:"last,omitempty"`

	// order by
	OrderBy *GlobalAlertRuleOrderByInput `json:"orderBy,omitempty"`

	// skip
	Skip *int32 `json:"skip,omitempty"`

	// where
	Where *GlobalAlertRuleWhereInput `json:"where,omitempty"`
}

// Validate validates this get global alert rules connection request body
func (m *GetGlobalAlertRulesConnectionRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetGlobalAlertRulesConnectionRequestBody) validateOrderBy(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderBy) { // not required
		return nil
	}

	if m.OrderBy != nil {
		if err := m.OrderBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderBy")
			}
			return err
		}
	}

	return nil
}

func (m *GetGlobalAlertRulesConnectionRequestBody) validateWhere(formats strfmt.Registry) error {
	if swag.IsZero(m.Where) { // not required
		return nil
	}

	if m.Where != nil {
		if err := m.Where.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get global alert rules connection request body based on the context it is used
func (m *GetGlobalAlertRulesConnectionRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetGlobalAlertRulesConnectionRequestBody) contextValidateOrderBy(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderBy != nil {
		if err := m.OrderBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderBy")
			}
			return err
		}
	}

	return nil
}

func (m *GetGlobalAlertRulesConnectionRequestBody) contextValidateWhere(ctx context.Context, formats strfmt.Registry) error {

	if m.Where != nil {
		if err := m.Where.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("where")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("where")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetGlobalAlertRulesConnectionRequestBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetGlobalAlertRulesConnectionRequestBody) UnmarshalBinary(b []byte) error {
	var res GetGlobalAlertRulesConnectionRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
