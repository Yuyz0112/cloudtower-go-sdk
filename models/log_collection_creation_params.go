// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogCollectionCreationParams log collection creation params
//
// swagger:model LogCollectionCreationParams
type LogCollectionCreationParams struct {

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// groups
	Groups []string `json:"groups"`

	// hosts
	// Required: true
	Hosts *HostWhereInput `json:"hosts"`

	// log ended at
	// Required: true
	// Format: date-time
	LogEndedAt *strfmt.DateTime `json:"log_ended_at"`

	// log started at
	// Required: true
	// Format: date-time
	LogStartedAt *strfmt.DateTime `json:"log_started_at"`

	// services
	Services []string `json:"services"`

	// witness id
	WitnessID string `json:"witness_id,omitempty"`
}

// Validate validates this log collection creation params
func (m *LogCollectionCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogEndedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogCollectionCreationParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *LogCollectionCreationParams) validateHosts(formats strfmt.Registry) error {

	if err := validate.Required("hosts", "body", m.Hosts); err != nil {
		return err
	}

	if m.Hosts != nil {
		if err := m.Hosts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts")
			}
			return err
		}
	}

	return nil
}

func (m *LogCollectionCreationParams) validateLogEndedAt(formats strfmt.Registry) error {

	if err := validate.Required("log_ended_at", "body", m.LogEndedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("log_ended_at", "body", "date-time", m.LogEndedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LogCollectionCreationParams) validateLogStartedAt(formats strfmt.Registry) error {

	if err := validate.Required("log_started_at", "body", m.LogStartedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("log_started_at", "body", "date-time", m.LogStartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this log collection creation params based on the context it is used
func (m *LogCollectionCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogCollectionCreationParams) contextValidateHosts(ctx context.Context, formats strfmt.Registry) error {

	if m.Hosts != nil {
		if err := m.Hosts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hosts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hosts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogCollectionCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogCollectionCreationParams) UnmarshalBinary(b []byte) error {
	var res LogCollectionCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
