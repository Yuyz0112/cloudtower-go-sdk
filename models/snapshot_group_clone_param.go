// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotGroupCloneParam snapshot group clone param
//
// swagger:model SnapshotGroupCloneParam
type SnapshotGroupCloneParam struct {

	// from source vm id
	// Required: true
	FromSourceVMID *string `json:"from_source_vm_id"`

	// to cloned vm name
	// Required: true
	ToClonedVMName *string `json:"to_cloned_vm_name"`
}

// Validate validates this snapshot group clone param
func (m *SnapshotGroupCloneParam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromSourceVMID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToClonedVMName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotGroupCloneParam) validateFromSourceVMID(formats strfmt.Registry) error {

	if err := validate.Required("from_source_vm_id", "body", m.FromSourceVMID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotGroupCloneParam) validateToClonedVMName(formats strfmt.Registry) error {

	if err := validate.Required("to_cloned_vm_name", "body", m.ToClonedVMName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot group clone param based on context it is used
func (m *SnapshotGroupCloneParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotGroupCloneParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotGroupCloneParam) UnmarshalBinary(b []byte) error {
	var res SnapshotGroupCloneParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
