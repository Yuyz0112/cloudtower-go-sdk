// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSettings2 cluster settings2
//
// swagger:model ClusterSettings2
type ClusterSettings2 struct {

	// cluster
	// Required: true
	Cluster *ClusterSettings2Cluster `json:"cluster"`

	// id
	// Required: true
	ID *string `json:"id"`

	// vm recycle bin
	VMRecycleBin *ClusterSettings2VMRecycleBin `json:"vm_recycle_bin,omitempty"`
}

// Validate validates this cluster settings2
func (m *ClusterSettings2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMRecycleBin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSettings2) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings2) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSettings2) validateVMRecycleBin(formats strfmt.Registry) error {
	if swag.IsZero(m.VMRecycleBin) { // not required
		return nil
	}

	if m.VMRecycleBin != nil {
		if err := m.VMRecycleBin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_recycle_bin")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster settings2 based on the context it is used
func (m *ClusterSettings2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMRecycleBin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSettings2) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings2) contextValidateVMRecycleBin(ctx context.Context, formats strfmt.Registry) error {

	if m.VMRecycleBin != nil {
		if err := m.VMRecycleBin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_recycle_bin")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSettings2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSettings2) UnmarshalBinary(b []byte) error {
	var res ClusterSettings2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterSettings2Cluster cluster settings2 cluster
//
// swagger:model ClusterSettings2Cluster
type ClusterSettings2Cluster struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this cluster settings2 cluster
func (m *ClusterSettings2Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSettings2Cluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSettings2Cluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster settings2 cluster based on context it is used
func (m *ClusterSettings2Cluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSettings2Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSettings2Cluster) UnmarshalBinary(b []byte) error {
	var res ClusterSettings2Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterSettings2VMRecycleBin cluster settings2 VM recycle bin
//
// swagger:model ClusterSettings2VMRecycleBin
type ClusterSettings2VMRecycleBin struct {

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// retain
	// Required: true
	Retain *float64 `json:"retain"`
}

// Validate validates this cluster settings2 VM recycle bin
func (m *ClusterSettings2VMRecycleBin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSettings2VMRecycleBin) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("vm_recycle_bin"+"."+"enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ClusterSettings2VMRecycleBin) validateRetain(formats strfmt.Registry) error {

	if err := validate.Required("vm_recycle_bin"+"."+"retain", "body", m.Retain); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster settings2 VM recycle bin based on context it is used
func (m *ClusterSettings2VMRecycleBin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSettings2VMRecycleBin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSettings2VMRecycleBin) UnmarshalBinary(b []byte) error {
	var res ClusterSettings2VMRecycleBin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
