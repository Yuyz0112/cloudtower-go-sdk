// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NicDriverState nic driver state
//
// swagger:model NicDriverState
type NicDriverState string

func NewNicDriverState(value NicDriverState) *NicDriverState {
	v := value
	return &v
}

const (

	// NicDriverStateNEEDREBOOT captures enum value "NEED_REBOOT"
	NicDriverStateNEEDREBOOT NicDriverState = "NEED_REBOOT"

	// NicDriverStateNODRIVER captures enum value "NO_DRIVER"
	NicDriverStateNODRIVER NicDriverState = "NO_DRIVER"

	// NicDriverStateNOTREADY captures enum value "NOT_READY"
	NicDriverStateNOTREADY NicDriverState = "NOT_READY"

	// NicDriverStateREADY captures enum value "READY"
	NicDriverStateREADY NicDriverState = "READY"
)

// for schema
var nicDriverStateEnum []interface{}

func init() {
	var res []NicDriverState
	if err := json.Unmarshal([]byte(`["NEED_REBOOT","NO_DRIVER","NOT_READY","READY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nicDriverStateEnum = append(nicDriverStateEnum, v)
	}
}

func (m NicDriverState) validateNicDriverStateEnum(path, location string, value NicDriverState) error {
	if err := validate.EnumCase(path, location, value, nicDriverStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this nic driver state
func (m NicDriverState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNicDriverStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this nic driver state based on context it is used
func (m NicDriverState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
