// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VMWhereInput Vm where input
//
// swagger:model VmWhereInput
type VMWhereInput struct {

	// a n d
	AND []*VMWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*VMWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*VMWhereInput `json:"OR,omitempty"`

	// clock offset
	ClockOffset interface{} `json:"clock_offset,omitempty"`

	// clock offset in
	ClockOffsetIn []VMClockOffset `json:"clock_offset_in,omitempty"`

	// clock offset not
	ClockOffsetNot interface{} `json:"clock_offset_not,omitempty"`

	// clock offset not in
	ClockOffsetNotIn []VMClockOffset `json:"clock_offset_not_in,omitempty"`

	// cluster
	Cluster interface{} `json:"cluster,omitempty"`

	// cpu model
	CPUModel *string `json:"cpu_model,omitempty"`

	// cpu model contains
	CPUModelContains *string `json:"cpu_model_contains,omitempty"`

	// cpu model ends with
	CPUModelEndsWith *string `json:"cpu_model_ends_with,omitempty"`

	// cpu model gt
	CPUModelGt *string `json:"cpu_model_gt,omitempty"`

	// cpu model gte
	CPUModelGte *string `json:"cpu_model_gte,omitempty"`

	// cpu model in
	CPUModelIn []string `json:"cpu_model_in,omitempty"`

	// cpu model lt
	CPUModelLt *string `json:"cpu_model_lt,omitempty"`

	// cpu model lte
	CPUModelLte *string `json:"cpu_model_lte,omitempty"`

	// cpu model not
	CPUModelNot *string `json:"cpu_model_not,omitempty"`

	// cpu model not contains
	CPUModelNotContains *string `json:"cpu_model_not_contains,omitempty"`

	// cpu model not ends with
	CPUModelNotEndsWith *string `json:"cpu_model_not_ends_with,omitempty"`

	// cpu model not in
	CPUModelNotIn []string `json:"cpu_model_not_in,omitempty"`

	// cpu model not starts with
	CPUModelNotStartsWith *string `json:"cpu_model_not_starts_with,omitempty"`

	// cpu model starts with
	CPUModelStartsWith *string `json:"cpu_model_starts_with,omitempty"`

	// cpu usage
	CPUUsage *float64 `json:"cpu_usage,omitempty"`

	// cpu usage gt
	CPUUsageGt *float64 `json:"cpu_usage_gt,omitempty"`

	// cpu usage gte
	CPUUsageGte *float64 `json:"cpu_usage_gte,omitempty"`

	// cpu usage in
	CPUUsageIn []float64 `json:"cpu_usage_in,omitempty"`

	// cpu usage lt
	CPUUsageLt *float64 `json:"cpu_usage_lt,omitempty"`

	// cpu usage lte
	CPUUsageLte *float64 `json:"cpu_usage_lte,omitempty"`

	// cpu usage not
	CPUUsageNot *float64 `json:"cpu_usage_not,omitempty"`

	// cpu usage not in
	CPUUsageNotIn []float64 `json:"cpu_usage_not_in,omitempty"`

	// deleted at
	DeletedAt *string `json:"deleted_at,omitempty"`

	// deleted at gt
	DeletedAtGt *string `json:"deleted_at_gt,omitempty"`

	// deleted at gte
	DeletedAtGte *string `json:"deleted_at_gte,omitempty"`

	// deleted at in
	DeletedAtIn []string `json:"deleted_at_in,omitempty"`

	// deleted at lt
	DeletedAtLt *string `json:"deleted_at_lt,omitempty"`

	// deleted at lte
	DeletedAtLte *string `json:"deleted_at_lte,omitempty"`

	// deleted at not
	DeletedAtNot *string `json:"deleted_at_not,omitempty"`

	// deleted at not in
	DeletedAtNotIn []string `json:"deleted_at_not_in,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// description contains
	DescriptionContains *string `json:"description_contains,omitempty"`

	// description ends with
	DescriptionEndsWith *string `json:"description_ends_with,omitempty"`

	// description gt
	DescriptionGt *string `json:"description_gt,omitempty"`

	// description gte
	DescriptionGte *string `json:"description_gte,omitempty"`

	// description in
	DescriptionIn []string `json:"description_in,omitempty"`

	// description lt
	DescriptionLt *string `json:"description_lt,omitempty"`

	// description lte
	DescriptionLte *string `json:"description_lte,omitempty"`

	// description not
	DescriptionNot *string `json:"description_not,omitempty"`

	// description not contains
	DescriptionNotContains *string `json:"description_not_contains,omitempty"`

	// description not ends with
	DescriptionNotEndsWith *string `json:"description_not_ends_with,omitempty"`

	// description not in
	DescriptionNotIn []string `json:"description_not_in,omitempty"`

	// description not starts with
	DescriptionNotStartsWith *string `json:"description_not_starts_with,omitempty"`

	// description starts with
	DescriptionStartsWith *string `json:"description_starts_with,omitempty"`

	// dns servers
	DNSServers *string `json:"dns_servers,omitempty"`

	// dns servers contains
	DNSServersContains *string `json:"dns_servers_contains,omitempty"`

	// dns servers ends with
	DNSServersEndsWith *string `json:"dns_servers_ends_with,omitempty"`

	// dns servers gt
	DNSServersGt *string `json:"dns_servers_gt,omitempty"`

	// dns servers gte
	DNSServersGte *string `json:"dns_servers_gte,omitempty"`

	// dns servers in
	DNSServersIn []string `json:"dns_servers_in,omitempty"`

	// dns servers lt
	DNSServersLt *string `json:"dns_servers_lt,omitempty"`

	// dns servers lte
	DNSServersLte *string `json:"dns_servers_lte,omitempty"`

	// dns servers not
	DNSServersNot *string `json:"dns_servers_not,omitempty"`

	// dns servers not contains
	DNSServersNotContains *string `json:"dns_servers_not_contains,omitempty"`

	// dns servers not ends with
	DNSServersNotEndsWith *string `json:"dns_servers_not_ends_with,omitempty"`

	// dns servers not in
	DNSServersNotIn []string `json:"dns_servers_not_in,omitempty"`

	// dns servers not starts with
	DNSServersNotStartsWith *string `json:"dns_servers_not_starts_with,omitempty"`

	// dns servers starts with
	DNSServersStartsWith *string `json:"dns_servers_starts_with,omitempty"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot interface{} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// entity filter results every
	EntityFilterResultsEvery interface{} `json:"entity_filter_results_every,omitempty"`

	// entity filter results none
	EntityFilterResultsNone interface{} `json:"entity_filter_results_none,omitempty"`

	// entity filter results some
	EntityFilterResultsSome interface{} `json:"entity_filter_results_some,omitempty"`

	// firmware
	Firmware interface{} `json:"firmware,omitempty"`

	// firmware in
	FirmwareIn []VMFirmware `json:"firmware_in,omitempty"`

	// firmware not
	FirmwareNot interface{} `json:"firmware_not,omitempty"`

	// firmware not in
	FirmwareNotIn []VMFirmware `json:"firmware_not_in,omitempty"`

	// folder
	Folder interface{} `json:"folder,omitempty"`

	// guest cpu model
	GuestCPUModel *string `json:"guest_cpu_model,omitempty"`

	// guest cpu model contains
	GuestCPUModelContains *string `json:"guest_cpu_model_contains,omitempty"`

	// guest cpu model ends with
	GuestCPUModelEndsWith *string `json:"guest_cpu_model_ends_with,omitempty"`

	// guest cpu model gt
	GuestCPUModelGt *string `json:"guest_cpu_model_gt,omitempty"`

	// guest cpu model gte
	GuestCPUModelGte *string `json:"guest_cpu_model_gte,omitempty"`

	// guest cpu model in
	GuestCPUModelIn []string `json:"guest_cpu_model_in,omitempty"`

	// guest cpu model lt
	GuestCPUModelLt *string `json:"guest_cpu_model_lt,omitempty"`

	// guest cpu model lte
	GuestCPUModelLte *string `json:"guest_cpu_model_lte,omitempty"`

	// guest cpu model not
	GuestCPUModelNot *string `json:"guest_cpu_model_not,omitempty"`

	// guest cpu model not contains
	GuestCPUModelNotContains *string `json:"guest_cpu_model_not_contains,omitempty"`

	// guest cpu model not ends with
	GuestCPUModelNotEndsWith *string `json:"guest_cpu_model_not_ends_with,omitempty"`

	// guest cpu model not in
	GuestCPUModelNotIn []string `json:"guest_cpu_model_not_in,omitempty"`

	// guest cpu model not starts with
	GuestCPUModelNotStartsWith *string `json:"guest_cpu_model_not_starts_with,omitempty"`

	// guest cpu model starts with
	GuestCPUModelStartsWith *string `json:"guest_cpu_model_starts_with,omitempty"`

	// guest os type
	GuestOsType interface{} `json:"guest_os_type,omitempty"`

	// guest os type in
	GuestOsTypeIn []VMGuestsOperationSystem `json:"guest_os_type_in,omitempty"`

	// guest os type not
	GuestOsTypeNot interface{} `json:"guest_os_type_not,omitempty"`

	// guest os type not in
	GuestOsTypeNotIn []VMGuestsOperationSystem `json:"guest_os_type_not_in,omitempty"`

	// guest size usage
	GuestSizeUsage *float64 `json:"guest_size_usage,omitempty"`

	// guest size usage gt
	GuestSizeUsageGt *float64 `json:"guest_size_usage_gt,omitempty"`

	// guest size usage gte
	GuestSizeUsageGte *float64 `json:"guest_size_usage_gte,omitempty"`

	// guest size usage in
	GuestSizeUsageIn []float64 `json:"guest_size_usage_in,omitempty"`

	// guest size usage lt
	GuestSizeUsageLt *float64 `json:"guest_size_usage_lt,omitempty"`

	// guest size usage lte
	GuestSizeUsageLte *float64 `json:"guest_size_usage_lte,omitempty"`

	// guest size usage not
	GuestSizeUsageNot *float64 `json:"guest_size_usage_not,omitempty"`

	// guest size usage not in
	GuestSizeUsageNotIn []float64 `json:"guest_size_usage_not_in,omitempty"`

	// guest used size
	GuestUsedSize *float64 `json:"guest_used_size,omitempty"`

	// guest used size gt
	GuestUsedSizeGt *float64 `json:"guest_used_size_gt,omitempty"`

	// guest used size gte
	GuestUsedSizeGte *float64 `json:"guest_used_size_gte,omitempty"`

	// guest used size in
	GuestUsedSizeIn []float64 `json:"guest_used_size_in,omitempty"`

	// guest used size lt
	GuestUsedSizeLt *float64 `json:"guest_used_size_lt,omitempty"`

	// guest used size lte
	GuestUsedSizeLte *float64 `json:"guest_used_size_lte,omitempty"`

	// guest used size not
	GuestUsedSizeNot *float64 `json:"guest_used_size_not,omitempty"`

	// guest used size not in
	GuestUsedSizeNotIn []float64 `json:"guest_used_size_not_in,omitempty"`

	// ha
	Ha *bool `json:"ha,omitempty"`

	// ha not
	HaNot *bool `json:"ha_not,omitempty"`

	// host
	Host interface{} `json:"host,omitempty"`

	// hostname
	Hostname *string `json:"hostname,omitempty"`

	// hostname contains
	HostnameContains *string `json:"hostname_contains,omitempty"`

	// hostname ends with
	HostnameEndsWith *string `json:"hostname_ends_with,omitempty"`

	// hostname gt
	HostnameGt *string `json:"hostname_gt,omitempty"`

	// hostname gte
	HostnameGte *string `json:"hostname_gte,omitempty"`

	// hostname in
	HostnameIn []string `json:"hostname_in,omitempty"`

	// hostname lt
	HostnameLt *string `json:"hostname_lt,omitempty"`

	// hostname lte
	HostnameLte *string `json:"hostname_lte,omitempty"`

	// hostname not
	HostnameNot *string `json:"hostname_not,omitempty"`

	// hostname not contains
	HostnameNotContains *string `json:"hostname_not_contains,omitempty"`

	// hostname not ends with
	HostnameNotEndsWith *string `json:"hostname_not_ends_with,omitempty"`

	// hostname not in
	HostnameNotIn []string `json:"hostname_not_in,omitempty"`

	// hostname not starts with
	HostnameNotStartsWith *string `json:"hostname_not_starts_with,omitempty"`

	// hostname starts with
	HostnameStartsWith *string `json:"hostname_starts_with,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// in recycle bin
	InRecycleBin *bool `json:"in_recycle_bin,omitempty"`

	// in recycle bin not
	InRecycleBinNot *bool `json:"in_recycle_bin_not,omitempty"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// internal not
	InternalNot *bool `json:"internal_not,omitempty"`

	// io policy
	IoPolicy interface{} `json:"io_policy,omitempty"`

	// io policy in
	IoPolicyIn []VMDiskIoPolicy `json:"io_policy_in,omitempty"`

	// io policy not
	IoPolicyNot interface{} `json:"io_policy_not,omitempty"`

	// io policy not in
	IoPolicyNotIn []VMDiskIoPolicy `json:"io_policy_not_in,omitempty"`

	// ips
	Ips *string `json:"ips,omitempty"`

	// ips contains
	IpsContains *string `json:"ips_contains,omitempty"`

	// ips ends with
	IpsEndsWith *string `json:"ips_ends_with,omitempty"`

	// ips gt
	IpsGt *string `json:"ips_gt,omitempty"`

	// ips gte
	IpsGte *string `json:"ips_gte,omitempty"`

	// ips in
	IpsIn []string `json:"ips_in,omitempty"`

	// ips lt
	IpsLt *string `json:"ips_lt,omitempty"`

	// ips lte
	IpsLte *string `json:"ips_lte,omitempty"`

	// ips not
	IpsNot *string `json:"ips_not,omitempty"`

	// ips not contains
	IpsNotContains *string `json:"ips_not_contains,omitempty"`

	// ips not ends with
	IpsNotEndsWith *string `json:"ips_not_ends_with,omitempty"`

	// ips not in
	IpsNotIn []string `json:"ips_not_in,omitempty"`

	// ips not starts with
	IpsNotStartsWith *string `json:"ips_not_starts_with,omitempty"`

	// ips starts with
	IpsStartsWith *string `json:"ips_starts_with,omitempty"`

	// kernel info
	KernelInfo *string `json:"kernel_info,omitempty"`

	// kernel info contains
	KernelInfoContains *string `json:"kernel_info_contains,omitempty"`

	// kernel info ends with
	KernelInfoEndsWith *string `json:"kernel_info_ends_with,omitempty"`

	// kernel info gt
	KernelInfoGt *string `json:"kernel_info_gt,omitempty"`

	// kernel info gte
	KernelInfoGte *string `json:"kernel_info_gte,omitempty"`

	// kernel info in
	KernelInfoIn []string `json:"kernel_info_in,omitempty"`

	// kernel info lt
	KernelInfoLt *string `json:"kernel_info_lt,omitempty"`

	// kernel info lte
	KernelInfoLte *string `json:"kernel_info_lte,omitempty"`

	// kernel info not
	KernelInfoNot *string `json:"kernel_info_not,omitempty"`

	// kernel info not contains
	KernelInfoNotContains *string `json:"kernel_info_not_contains,omitempty"`

	// kernel info not ends with
	KernelInfoNotEndsWith *string `json:"kernel_info_not_ends_with,omitempty"`

	// kernel info not in
	KernelInfoNotIn []string `json:"kernel_info_not_in,omitempty"`

	// kernel info not starts with
	KernelInfoNotStartsWith *string `json:"kernel_info_not_starts_with,omitempty"`

	// kernel info starts with
	KernelInfoStartsWith *string `json:"kernel_info_starts_with,omitempty"`

	// labels every
	LabelsEvery interface{} `json:"labels_every,omitempty"`

	// labels none
	LabelsNone interface{} `json:"labels_none,omitempty"`

	// labels some
	LabelsSome interface{} `json:"labels_some,omitempty"`

	// last shutdown time
	LastShutdownTime *string `json:"last_shutdown_time,omitempty"`

	// last shutdown time gt
	LastShutdownTimeGt *string `json:"last_shutdown_time_gt,omitempty"`

	// last shutdown time gte
	LastShutdownTimeGte *string `json:"last_shutdown_time_gte,omitempty"`

	// last shutdown time in
	LastShutdownTimeIn []string `json:"last_shutdown_time_in,omitempty"`

	// last shutdown time lt
	LastShutdownTimeLt *string `json:"last_shutdown_time_lt,omitempty"`

	// last shutdown time lte
	LastShutdownTimeLte *string `json:"last_shutdown_time_lte,omitempty"`

	// last shutdown time not
	LastShutdownTimeNot *string `json:"last_shutdown_time_not,omitempty"`

	// last shutdown time not in
	LastShutdownTimeNotIn []string `json:"last_shutdown_time_not_in,omitempty"`

	// local created at
	LocalCreatedAt *string `json:"local_created_at,omitempty"`

	// local created at gt
	LocalCreatedAtGt *string `json:"local_created_at_gt,omitempty"`

	// local created at gte
	LocalCreatedAtGte *string `json:"local_created_at_gte,omitempty"`

	// local created at in
	LocalCreatedAtIn []string `json:"local_created_at_in,omitempty"`

	// local created at lt
	LocalCreatedAtLt *string `json:"local_created_at_lt,omitempty"`

	// local created at lte
	LocalCreatedAtLte *string `json:"local_created_at_lte,omitempty"`

	// local created at not
	LocalCreatedAtNot *string `json:"local_created_at_not,omitempty"`

	// local created at not in
	LocalCreatedAtNotIn []string `json:"local_created_at_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// logical size bytes
	LogicalSizeBytes *float64 `json:"logical_size_bytes,omitempty"`

	// logical size bytes gt
	LogicalSizeBytesGt *float64 `json:"logical_size_bytes_gt,omitempty"`

	// logical size bytes gte
	LogicalSizeBytesGte *float64 `json:"logical_size_bytes_gte,omitempty"`

	// logical size bytes in
	LogicalSizeBytesIn []float64 `json:"logical_size_bytes_in,omitempty"`

	// logical size bytes lt
	LogicalSizeBytesLt *float64 `json:"logical_size_bytes_lt,omitempty"`

	// logical size bytes lte
	LogicalSizeBytesLte *float64 `json:"logical_size_bytes_lte,omitempty"`

	// logical size bytes not
	LogicalSizeBytesNot *float64 `json:"logical_size_bytes_not,omitempty"`

	// logical size bytes not in
	LogicalSizeBytesNotIn []float64 `json:"logical_size_bytes_not_in,omitempty"`

	// max bandwidth
	MaxBandwidth *float64 `json:"max_bandwidth,omitempty"`

	// max bandwidth gt
	MaxBandwidthGt *float64 `json:"max_bandwidth_gt,omitempty"`

	// max bandwidth gte
	MaxBandwidthGte *float64 `json:"max_bandwidth_gte,omitempty"`

	// max bandwidth in
	MaxBandwidthIn []float64 `json:"max_bandwidth_in,omitempty"`

	// max bandwidth lt
	MaxBandwidthLt *float64 `json:"max_bandwidth_lt,omitempty"`

	// max bandwidth lte
	MaxBandwidthLte *float64 `json:"max_bandwidth_lte,omitempty"`

	// max bandwidth not
	MaxBandwidthNot *float64 `json:"max_bandwidth_not,omitempty"`

	// max bandwidth not in
	MaxBandwidthNotIn []float64 `json:"max_bandwidth_not_in,omitempty"`

	// max bandwidth policy
	MaxBandwidthPolicy interface{} `json:"max_bandwidth_policy,omitempty"`

	// max bandwidth policy in
	MaxBandwidthPolicyIn []VMDiskIoRestrictType `json:"max_bandwidth_policy_in,omitempty"`

	// max bandwidth policy not
	MaxBandwidthPolicyNot interface{} `json:"max_bandwidth_policy_not,omitempty"`

	// max bandwidth policy not in
	MaxBandwidthPolicyNotIn []VMDiskIoRestrictType `json:"max_bandwidth_policy_not_in,omitempty"`

	// max iops
	MaxIops *float64 `json:"max_iops,omitempty"`

	// max iops gt
	MaxIopsGt *float64 `json:"max_iops_gt,omitempty"`

	// max iops gte
	MaxIopsGte *float64 `json:"max_iops_gte,omitempty"`

	// max iops in
	MaxIopsIn []float64 `json:"max_iops_in,omitempty"`

	// max iops lt
	MaxIopsLt *float64 `json:"max_iops_lt,omitempty"`

	// max iops lte
	MaxIopsLte *float64 `json:"max_iops_lte,omitempty"`

	// max iops not
	MaxIopsNot *float64 `json:"max_iops_not,omitempty"`

	// max iops not in
	MaxIopsNotIn []float64 `json:"max_iops_not_in,omitempty"`

	// max iops policy
	MaxIopsPolicy interface{} `json:"max_iops_policy,omitempty"`

	// max iops policy in
	MaxIopsPolicyIn []VMDiskIoRestrictType `json:"max_iops_policy_in,omitempty"`

	// max iops policy not
	MaxIopsPolicyNot interface{} `json:"max_iops_policy_not,omitempty"`

	// max iops policy not in
	MaxIopsPolicyNotIn []VMDiskIoRestrictType `json:"max_iops_policy_not_in,omitempty"`

	// memory
	Memory *float64 `json:"memory,omitempty"`

	// memory gt
	MemoryGt *float64 `json:"memory_gt,omitempty"`

	// memory gte
	MemoryGte *float64 `json:"memory_gte,omitempty"`

	// memory in
	MemoryIn []float64 `json:"memory_in,omitempty"`

	// memory lt
	MemoryLt *float64 `json:"memory_lt,omitempty"`

	// memory lte
	MemoryLte *float64 `json:"memory_lte,omitempty"`

	// memory not
	MemoryNot *float64 `json:"memory_not,omitempty"`

	// memory not in
	MemoryNotIn []float64 `json:"memory_not_in,omitempty"`

	// memory usage
	MemoryUsage *float64 `json:"memory_usage,omitempty"`

	// memory usage gt
	MemoryUsageGt *float64 `json:"memory_usage_gt,omitempty"`

	// memory usage gte
	MemoryUsageGte *float64 `json:"memory_usage_gte,omitempty"`

	// memory usage in
	MemoryUsageIn []float64 `json:"memory_usage_in,omitempty"`

	// memory usage lt
	MemoryUsageLt *float64 `json:"memory_usage_lt,omitempty"`

	// memory usage lte
	MemoryUsageLte *float64 `json:"memory_usage_lte,omitempty"`

	// memory usage not
	MemoryUsageNot *float64 `json:"memory_usage_not,omitempty"`

	// memory usage not in
	MemoryUsageNotIn []float64 `json:"memory_usage_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// nested virtualization
	NestedVirtualization *bool `json:"nested_virtualization,omitempty"`

	// nested virtualization not
	NestedVirtualizationNot *bool `json:"nested_virtualization_not,omitempty"`

	// node ip
	NodeIP *string `json:"node_ip,omitempty"`

	// node ip contains
	NodeIPContains *string `json:"node_ip_contains,omitempty"`

	// node ip ends with
	NodeIPEndsWith *string `json:"node_ip_ends_with,omitempty"`

	// node ip gt
	NodeIPGt *string `json:"node_ip_gt,omitempty"`

	// node ip gte
	NodeIPGte *string `json:"node_ip_gte,omitempty"`

	// node ip in
	NodeIPIn []string `json:"node_ip_in,omitempty"`

	// node ip lt
	NodeIPLt *string `json:"node_ip_lt,omitempty"`

	// node ip lte
	NodeIPLte *string `json:"node_ip_lte,omitempty"`

	// node ip not
	NodeIPNot *string `json:"node_ip_not,omitempty"`

	// node ip not contains
	NodeIPNotContains *string `json:"node_ip_not_contains,omitempty"`

	// node ip not ends with
	NodeIPNotEndsWith *string `json:"node_ip_not_ends_with,omitempty"`

	// node ip not in
	NodeIPNotIn []string `json:"node_ip_not_in,omitempty"`

	// node ip not starts with
	NodeIPNotStartsWith *string `json:"node_ip_not_starts_with,omitempty"`

	// node ip starts with
	NodeIPStartsWith *string `json:"node_ip_starts_with,omitempty"`

	// original name
	OriginalName *string `json:"original_name,omitempty"`

	// original name contains
	OriginalNameContains *string `json:"original_name_contains,omitempty"`

	// original name ends with
	OriginalNameEndsWith *string `json:"original_name_ends_with,omitempty"`

	// original name gt
	OriginalNameGt *string `json:"original_name_gt,omitempty"`

	// original name gte
	OriginalNameGte *string `json:"original_name_gte,omitempty"`

	// original name in
	OriginalNameIn []string `json:"original_name_in,omitempty"`

	// original name lt
	OriginalNameLt *string `json:"original_name_lt,omitempty"`

	// original name lte
	OriginalNameLte *string `json:"original_name_lte,omitempty"`

	// original name not
	OriginalNameNot *string `json:"original_name_not,omitempty"`

	// original name not contains
	OriginalNameNotContains *string `json:"original_name_not_contains,omitempty"`

	// original name not ends with
	OriginalNameNotEndsWith *string `json:"original_name_not_ends_with,omitempty"`

	// original name not in
	OriginalNameNotIn []string `json:"original_name_not_in,omitempty"`

	// original name not starts with
	OriginalNameNotStartsWith *string `json:"original_name_not_starts_with,omitempty"`

	// original name starts with
	OriginalNameStartsWith *string `json:"original_name_starts_with,omitempty"`

	// os
	Os *string `json:"os,omitempty"`

	// os contains
	OsContains *string `json:"os_contains,omitempty"`

	// os ends with
	OsEndsWith *string `json:"os_ends_with,omitempty"`

	// os gt
	OsGt *string `json:"os_gt,omitempty"`

	// os gte
	OsGte *string `json:"os_gte,omitempty"`

	// os in
	OsIn []string `json:"os_in,omitempty"`

	// os lt
	OsLt *string `json:"os_lt,omitempty"`

	// os lte
	OsLte *string `json:"os_lte,omitempty"`

	// os not
	OsNot *string `json:"os_not,omitempty"`

	// os not contains
	OsNotContains *string `json:"os_not_contains,omitempty"`

	// os not ends with
	OsNotEndsWith *string `json:"os_not_ends_with,omitempty"`

	// os not in
	OsNotIn []string `json:"os_not_in,omitempty"`

	// os not starts with
	OsNotStartsWith *string `json:"os_not_starts_with,omitempty"`

	// os starts with
	OsStartsWith *string `json:"os_starts_with,omitempty"`

	// protected
	Protected *bool `json:"protected,omitempty"`

	// protected not
	ProtectedNot *bool `json:"protected_not,omitempty"`

	// provisioned size
	ProvisionedSize *float64 `json:"provisioned_size,omitempty"`

	// provisioned size gt
	ProvisionedSizeGt *float64 `json:"provisioned_size_gt,omitempty"`

	// provisioned size gte
	ProvisionedSizeGte *float64 `json:"provisioned_size_gte,omitempty"`

	// provisioned size in
	ProvisionedSizeIn []float64 `json:"provisioned_size_in,omitempty"`

	// provisioned size lt
	ProvisionedSizeLt *float64 `json:"provisioned_size_lt,omitempty"`

	// provisioned size lte
	ProvisionedSizeLte *float64 `json:"provisioned_size_lte,omitempty"`

	// provisioned size not
	ProvisionedSizeNot *float64 `json:"provisioned_size_not,omitempty"`

	// provisioned size not in
	ProvisionedSizeNotIn []float64 `json:"provisioned_size_not_in,omitempty"`

	// size
	Size *float64 `json:"size,omitempty"`

	// size gt
	SizeGt *float64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *float64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []float64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *float64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *float64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *float64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []float64 `json:"size_not_in,omitempty"`

	// snapshot plan
	SnapshotPlan interface{} `json:"snapshot_plan,omitempty"`

	// snapshots every
	SnapshotsEvery interface{} `json:"snapshots_every,omitempty"`

	// snapshots none
	SnapshotsNone interface{} `json:"snapshots_none,omitempty"`

	// snapshots some
	SnapshotsSome interface{} `json:"snapshots_some,omitempty"`

	// status
	Status interface{} `json:"status,omitempty"`

	// status in
	StatusIn []VMStatus `json:"status_in,omitempty"`

	// status not
	StatusNot interface{} `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []VMStatus `json:"status_not_in,omitempty"`

	// unique size
	UniqueSize *float64 `json:"unique_size,omitempty"`

	// unique size gt
	UniqueSizeGt *float64 `json:"unique_size_gt,omitempty"`

	// unique size gte
	UniqueSizeGte *float64 `json:"unique_size_gte,omitempty"`

	// unique size in
	UniqueSizeIn []float64 `json:"unique_size_in,omitempty"`

	// unique size lt
	UniqueSizeLt *float64 `json:"unique_size_lt,omitempty"`

	// unique size lte
	UniqueSizeLte *float64 `json:"unique_size_lte,omitempty"`

	// unique size not
	UniqueSizeNot *float64 `json:"unique_size_not,omitempty"`

	// unique size not in
	UniqueSizeNotIn []float64 `json:"unique_size_not_in,omitempty"`

	// usb devices every
	UsbDevicesEvery interface{} `json:"usb_devices_every,omitempty"`

	// usb devices none
	UsbDevicesNone interface{} `json:"usb_devices_none,omitempty"`

	// usb devices some
	UsbDevicesSome interface{} `json:"usb_devices_some,omitempty"`

	// vcpu
	Vcpu *float64 `json:"vcpu,omitempty"`

	// vcpu gt
	VcpuGt *float64 `json:"vcpu_gt,omitempty"`

	// vcpu gte
	VcpuGte *float64 `json:"vcpu_gte,omitempty"`

	// vcpu in
	VcpuIn []float64 `json:"vcpu_in,omitempty"`

	// vcpu lt
	VcpuLt *float64 `json:"vcpu_lt,omitempty"`

	// vcpu lte
	VcpuLte *float64 `json:"vcpu_lte,omitempty"`

	// vcpu not
	VcpuNot *float64 `json:"vcpu_not,omitempty"`

	// vcpu not in
	VcpuNotIn []float64 `json:"vcpu_not_in,omitempty"`

	// video type
	VideoType interface{} `json:"video_type,omitempty"`

	// video type in
	VideoTypeIn []VMVideoType `json:"video_type_in,omitempty"`

	// video type not
	VideoTypeNot interface{} `json:"video_type_not,omitempty"`

	// video type not in
	VideoTypeNotIn []VMVideoType `json:"video_type_not_in,omitempty"`

	// vm disks every
	VMDisksEvery interface{} `json:"vm_disks_every,omitempty"`

	// vm disks none
	VMDisksNone interface{} `json:"vm_disks_none,omitempty"`

	// vm disks some
	VMDisksSome interface{} `json:"vm_disks_some,omitempty"`

	// vm nics every
	VMNicsEvery interface{} `json:"vm_nics_every,omitempty"`

	// vm nics none
	VMNicsNone interface{} `json:"vm_nics_none,omitempty"`

	// vm nics some
	VMNicsSome interface{} `json:"vm_nics_some,omitempty"`

	// vm placement group every
	VMPlacementGroupEvery interface{} `json:"vm_placement_group_every,omitempty"`

	// vm placement group none
	VMPlacementGroupNone interface{} `json:"vm_placement_group_none,omitempty"`

	// vm placement group some
	VMPlacementGroupSome interface{} `json:"vm_placement_group_some,omitempty"`

	// vm tools status
	VMToolsStatus interface{} `json:"vm_tools_status,omitempty"`

	// vm tools status in
	VMToolsStatusIn []VMToolsStatus `json:"vm_tools_status_in,omitempty"`

	// vm tools status not
	VMToolsStatusNot interface{} `json:"vm_tools_status_not,omitempty"`

	// vm tools status not in
	VMToolsStatusNotIn []VMToolsStatus `json:"vm_tools_status_not_in,omitempty"`

	// vm tools version
	VMToolsVersion *string `json:"vm_tools_version,omitempty"`

	// vm tools version contains
	VMToolsVersionContains *string `json:"vm_tools_version_contains,omitempty"`

	// vm tools version ends with
	VMToolsVersionEndsWith *string `json:"vm_tools_version_ends_with,omitempty"`

	// vm tools version gt
	VMToolsVersionGt *string `json:"vm_tools_version_gt,omitempty"`

	// vm tools version gte
	VMToolsVersionGte *string `json:"vm_tools_version_gte,omitempty"`

	// vm tools version in
	VMToolsVersionIn []string `json:"vm_tools_version_in,omitempty"`

	// vm tools version lt
	VMToolsVersionLt *string `json:"vm_tools_version_lt,omitempty"`

	// vm tools version lte
	VMToolsVersionLte *string `json:"vm_tools_version_lte,omitempty"`

	// vm tools version not
	VMToolsVersionNot *string `json:"vm_tools_version_not,omitempty"`

	// vm tools version not contains
	VMToolsVersionNotContains *string `json:"vm_tools_version_not_contains,omitempty"`

	// vm tools version not ends with
	VMToolsVersionNotEndsWith *string `json:"vm_tools_version_not_ends_with,omitempty"`

	// vm tools version not in
	VMToolsVersionNotIn []string `json:"vm_tools_version_not_in,omitempty"`

	// vm tools version not starts with
	VMToolsVersionNotStartsWith *string `json:"vm_tools_version_not_starts_with,omitempty"`

	// vm tools version starts with
	VMToolsVersionStartsWith *string `json:"vm_tools_version_starts_with,omitempty"`

	// win opt
	WinOpt *bool `json:"win_opt,omitempty"`

	// win opt not
	WinOptNot *bool `json:"win_opt_not,omitempty"`
}

// Validate validates this Vm where input
func (m *VMWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClockOffsetIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClockOffsetNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwareIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirmwareNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestOsTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestOsTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxBandwidthPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIopsPolicyNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideoTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMToolsStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMToolsStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMWhereInput) validateClockOffsetIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ClockOffsetIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ClockOffsetIn); i++ {

		if err := m.ClockOffsetIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateClockOffsetNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ClockOffsetNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ClockOffsetNotIn); i++ {

		if err := m.ClockOffsetNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateFirmwareIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FirmwareIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FirmwareIn); i++ {

		if err := m.FirmwareIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateFirmwareNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FirmwareNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FirmwareNotIn); i++ {

		if err := m.FirmwareNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateGuestOsTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.GuestOsTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.GuestOsTypeIn); i++ {

		if err := m.GuestOsTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_os_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateGuestOsTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.GuestOsTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.GuestOsTypeNotIn); i++ {

		if err := m.GuestOsTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_os_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateIoPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IoPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IoPolicyIn); i++ {

		if err := m.IoPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateIoPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.IoPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.IoPolicyNotIn); i++ {

		if err := m.IoPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateMaxBandwidthPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxBandwidthPolicyIn); i++ {

		if err := m.MaxBandwidthPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateMaxBandwidthPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxBandwidthPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxBandwidthPolicyNotIn); i++ {

		if err := m.MaxBandwidthPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateMaxIopsPolicyIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxIopsPolicyIn); i++ {

		if err := m.MaxIopsPolicyIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateMaxIopsPolicyNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIopsPolicyNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.MaxIopsPolicyNotIn); i++ {

		if err := m.MaxIopsPolicyNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateVideoTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.VideoTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.VideoTypeIn); i++ {

		if err := m.VideoTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateVideoTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.VideoTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.VideoTypeNotIn); i++ {

		if err := m.VideoTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateVMToolsStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.VMToolsStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.VMToolsStatusIn); i++ {

		if err := m.VMToolsStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_tools_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) validateVMToolsStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.VMToolsStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.VMToolsStatusNotIn); i++ {

		if err := m.VMToolsStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_tools_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this Vm where input based on the context it is used
func (m *VMWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClockOffsetIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClockOffsetNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmwareIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirmwareNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuestOsTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuestOsTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxBandwidthPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaxIopsPolicyNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideoTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideoTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMToolsStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMToolsStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateClockOffsetIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClockOffsetIn); i++ {

		if err := m.ClockOffsetIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateClockOffsetNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClockOffsetNotIn); i++ {

		if err := m.ClockOffsetNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clock_offset_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateFirmwareIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FirmwareIn); i++ {

		if err := m.FirmwareIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateFirmwareNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FirmwareNotIn); i++ {

		if err := m.FirmwareNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateGuestOsTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GuestOsTypeIn); i++ {

		if err := m.GuestOsTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_os_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateGuestOsTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GuestOsTypeNotIn); i++ {

		if err := m.GuestOsTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest_os_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateIoPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IoPolicyIn); i++ {

		if err := m.IoPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateIoPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IoPolicyNotIn); i++ {

		if err := m.IoPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateMaxBandwidthPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxBandwidthPolicyIn); i++ {

		if err := m.MaxBandwidthPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateMaxBandwidthPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxBandwidthPolicyNotIn); i++ {

		if err := m.MaxBandwidthPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_bandwidth_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateMaxIopsPolicyIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxIopsPolicyIn); i++ {

		if err := m.MaxIopsPolicyIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateMaxIopsPolicyNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MaxIopsPolicyNotIn); i++ {

		if err := m.MaxIopsPolicyNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("max_iops_policy_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateVideoTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VideoTypeIn); i++ {

		if err := m.VideoTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateVideoTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VideoTypeNotIn); i++ {

		if err := m.VideoTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("video_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateVMToolsStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMToolsStatusIn); i++ {

		if err := m.VMToolsStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_tools_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *VMWhereInput) contextValidateVMToolsStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMToolsStatusNotIn); i++ {

		if err := m.VMToolsStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_tools_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMWhereInput) UnmarshalBinary(b []byte) error {
	var res VMWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
