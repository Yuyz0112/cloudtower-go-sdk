// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UsbDeviceStatus usb device status
//
// swagger:model UsbDeviceStatus
type UsbDeviceStatus string

func NewUsbDeviceStatus(value UsbDeviceStatus) *UsbDeviceStatus {
	v := value
	return &v
}

const (

	// UsbDeviceStatusEJECTED captures enum value "EJECTED"
	UsbDeviceStatusEJECTED UsbDeviceStatus = "EJECTED"

	// UsbDeviceStatusNORMAL captures enum value "NORMAL"
	UsbDeviceStatusNORMAL UsbDeviceStatus = "NORMAL"
)

// for schema
var usbDeviceStatusEnum []interface{}

func init() {
	var res []UsbDeviceStatus
	if err := json.Unmarshal([]byte(`["EJECTED","NORMAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		usbDeviceStatusEnum = append(usbDeviceStatusEnum, v)
	}
}

func (m UsbDeviceStatus) validateUsbDeviceStatusEnum(path, location string, value UsbDeviceStatus) error {
	if err := validate.EnumCase(path, location, value, usbDeviceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this usb device status
func (m UsbDeviceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUsbDeviceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this usb device status based on context it is used
func (m UsbDeviceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
