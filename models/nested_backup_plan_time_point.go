// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedBackupPlanTimePoint nested backup plan time point
//
// swagger:model NestedBackupPlanTimePoint
type NestedBackupPlanTimePoint struct {

	// date
	Date *int32 `json:"date,omitempty"`

	// date position
	DatePosition []int32 `json:"date_position,omitempty"`

	// hour
	// Required: true
	Hour *int32 `json:"hour"`

	// minute
	// Required: true
	Minute *int32 `json:"minute"`

	// weekday
	Weekday interface{} `json:"weekday,omitempty"`
}

// Validate validates this nested backup plan time point
func (m *NestedBackupPlanTimePoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedBackupPlanTimePoint) validateHour(formats strfmt.Registry) error {

	if err := validate.Required("hour", "body", m.Hour); err != nil {
		return err
	}

	return nil
}

func (m *NestedBackupPlanTimePoint) validateMinute(formats strfmt.Registry) error {

	if err := validate.Required("minute", "body", m.Minute); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nested backup plan time point based on context it is used
func (m *NestedBackupPlanTimePoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NestedBackupPlanTimePoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedBackupPlanTimePoint) UnmarshalBinary(b []byte) error {
	var res NestedBackupPlanTimePoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
