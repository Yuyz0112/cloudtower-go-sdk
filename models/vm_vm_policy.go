// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMVMPolicy Vm Vm policy
//
// swagger:model VmVmPolicy
type VMVMPolicy string

func NewVMVMPolicy(value VMVMPolicy) *VMVMPolicy {
	v := value
	return &v
}

const (

	// VMVMPolicyMUSTDIFFERENT captures enum value "MUST_DIFFERENT"
	VMVMPolicyMUSTDIFFERENT VMVMPolicy = "MUST_DIFFERENT"

	// VMVMPolicyMUSTSAME captures enum value "MUST_SAME"
	VMVMPolicyMUSTSAME VMVMPolicy = "MUST_SAME"

	// VMVMPolicyPREFERDIFFERENT captures enum value "PREFER_DIFFERENT"
	VMVMPolicyPREFERDIFFERENT VMVMPolicy = "PREFER_DIFFERENT"

	// VMVMPolicyPREFERSAME captures enum value "PREFER_SAME"
	VMVMPolicyPREFERSAME VMVMPolicy = "PREFER_SAME"
)

// for schema
var vmVmPolicyEnum []interface{}

func init() {
	var res []VMVMPolicy
	if err := json.Unmarshal([]byte(`["MUST_DIFFERENT","MUST_SAME","PREFER_DIFFERENT","PREFER_SAME"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmVmPolicyEnum = append(vmVmPolicyEnum, v)
	}
}

func (m VMVMPolicy) validateVMVMPolicyEnum(path, location string, value VMVMPolicy) error {
	if err := validate.EnumCase(path, location, value, vmVmPolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Vm Vm policy
func (m VMVMPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMVMPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Vm Vm policy based on context it is used
func (m VMVMPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
