// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphUpdationParams graph updation params
//
// swagger:model GraphUpdationParams
type GraphUpdationParams struct {

	// connect id
	ConnectID []string `json:"connect_id"`

	// id
	// Required: true
	ID *string `json:"id"`

	// metric count
	MetricCount float64 `json:"metric_count,omitempty"`

	// metric name
	MetricName string `json:"metric_name,omitempty"`

	// metric type
	MetricType MetricType `json:"metric_type,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// network
	Network NetworkType `json:"network,omitempty"`

	// resource type
	ResourceType string `json:"resource_type,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type GraphType `json:"type,omitempty"`
}

// Validate validates this graph updation params
func (m *GraphUpdationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphUpdationParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GraphUpdationParams) validateMetricType(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricType) { // not required
		return nil
	}

	if err := m.MetricType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metric_type")
		}
		return err
	}

	return nil
}

func (m *GraphUpdationParams) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if err := m.Network.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("network")
		}
		return err
	}

	return nil
}

func (m *GraphUpdationParams) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this graph updation params based on the context it is used
func (m *GraphUpdationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetricType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphUpdationParams) contextValidateMetricType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MetricType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metric_type")
		}
		return err
	}

	return nil
}

func (m *GraphUpdationParams) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Network.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("network")
		}
		return err
	}

	return nil
}

func (m *GraphUpdationParams) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphUpdationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphUpdationParams) UnmarshalBinary(b []byte) error {
	var res GraphUpdationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
