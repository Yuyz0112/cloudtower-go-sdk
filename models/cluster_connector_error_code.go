// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterConnectorErrorCode cluster connector error code
//
// swagger:model ClusterConnectorErrorCode
type ClusterConnectorErrorCode string

func NewClusterConnectorErrorCode(value ClusterConnectorErrorCode) *ClusterConnectorErrorCode {
	v := value
	return &v
}

const (

	// ClusterConnectorErrorCodeLOADCLUSTERFAILED captures enum value "LOAD_CLUSTER_FAILED"
	ClusterConnectorErrorCodeLOADCLUSTERFAILED ClusterConnectorErrorCode = "LOAD_CLUSTER_FAILED"

	// ClusterConnectorErrorCodeLOADCLUSTERNETWORKERROR captures enum value "LOAD_CLUSTER_NETWORK_ERROR"
	ClusterConnectorErrorCodeLOADCLUSTERNETWORKERROR ClusterConnectorErrorCode = "LOAD_CLUSTER_NETWORK_ERROR"

	// ClusterConnectorErrorCodeLOADCLUSTERNOTFOUND captures enum value "LOAD_CLUSTER_NOT_FOUND"
	ClusterConnectorErrorCodeLOADCLUSTERNOTFOUND ClusterConnectorErrorCode = "LOAD_CLUSTER_NOT_FOUND"

	// ClusterConnectorErrorCodeLOADCLUSTERUNAUTHORIZED captures enum value "LOAD_CLUSTER_UNAUTHORIZED"
	ClusterConnectorErrorCodeLOADCLUSTERUNAUTHORIZED ClusterConnectorErrorCode = "LOAD_CLUSTER_UNAUTHORIZED"

	// ClusterConnectorErrorCodeLOADCLUSTERUNHEALTHY captures enum value "LOAD_CLUSTER_UNHEALTHY"
	ClusterConnectorErrorCodeLOADCLUSTERUNHEALTHY ClusterConnectorErrorCode = "LOAD_CLUSTER_UNHEALTHY"
)

// for schema
var clusterConnectorErrorCodeEnum []interface{}

func init() {
	var res []ClusterConnectorErrorCode
	if err := json.Unmarshal([]byte(`["LOAD_CLUSTER_FAILED","LOAD_CLUSTER_NETWORK_ERROR","LOAD_CLUSTER_NOT_FOUND","LOAD_CLUSTER_UNAUTHORIZED","LOAD_CLUSTER_UNHEALTHY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterConnectorErrorCodeEnum = append(clusterConnectorErrorCodeEnum, v)
	}
}

func (m ClusterConnectorErrorCode) validateClusterConnectorErrorCodeEnum(path, location string, value ClusterConnectorErrorCode) error {
	if err := validate.EnumCase(path, location, value, clusterConnectorErrorCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster connector error code
func (m ClusterConnectorErrorCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterConnectorErrorCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster connector error code based on context it is used
func (m ClusterConnectorErrorCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
