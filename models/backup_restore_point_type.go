// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BackupRestorePointType backup restore point type
//
// swagger:model BackupRestorePointType
type BackupRestorePointType string

func NewBackupRestorePointType(value BackupRestorePointType) *BackupRestorePointType {
	v := value
	return &v
}

const (

	// BackupRestorePointTypeFULL captures enum value "FULL"
	BackupRestorePointTypeFULL BackupRestorePointType = "FULL"

	// BackupRestorePointTypeINCREMENTAL captures enum value "INCREMENTAL"
	BackupRestorePointTypeINCREMENTAL BackupRestorePointType = "INCREMENTAL"
)

// for schema
var backupRestorePointTypeEnum []interface{}

func init() {
	var res []BackupRestorePointType
	if err := json.Unmarshal([]byte(`["FULL","INCREMENTAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backupRestorePointTypeEnum = append(backupRestorePointTypeEnum, v)
	}
}

func (m BackupRestorePointType) validateBackupRestorePointTypeEnum(path, location string, value BackupRestorePointType) error {
	if err := validate.EnumCase(path, location, value, backupRestorePointTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this backup restore point type
func (m BackupRestorePointType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBackupRestorePointTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this backup restore point type based on context it is used
func (m BackupRestorePointType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
