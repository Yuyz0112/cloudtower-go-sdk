// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConsistentType consistent type
//
// swagger:model ConsistentType
type ConsistentType string

func NewConsistentType(value ConsistentType) *ConsistentType {
	v := value
	return &v
}

const (

	// ConsistentTypeCRASHCONSISTENT captures enum value "CRASH_CONSISTENT"
	ConsistentTypeCRASHCONSISTENT ConsistentType = "CRASH_CONSISTENT"

	// ConsistentTypeFILESYSTEMCONSISTENT captures enum value "FILE_SYSTEM_CONSISTENT"
	ConsistentTypeFILESYSTEMCONSISTENT ConsistentType = "FILE_SYSTEM_CONSISTENT"
)

// for schema
var consistentTypeEnum []interface{}

func init() {
	var res []ConsistentType
	if err := json.Unmarshal([]byte(`["CRASH_CONSISTENT","FILE_SYSTEM_CONSISTENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consistentTypeEnum = append(consistentTypeEnum, v)
	}
}

func (m ConsistentType) validateConsistentTypeEnum(path, location string, value ConsistentType) error {
	if err := validate.EnumCase(path, location, value, consistentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this consistent type
func (m ConsistentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConsistentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this consistent type based on context it is used
func (m ConsistentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
