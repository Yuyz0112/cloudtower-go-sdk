// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterImageWhereInput cluster image where input
// Example: {"AND":"ClusterImageWhereInput[]","NOT":"ClusterImageWhereInput[]","OR":"ClusterImageWhereInput[]","cluster":"ClusterWhereInput","entityAsyncStatus":"CREATING","entityAsyncStatus_in":["CREATING"],"entityAsyncStatus_not":"CREATING","entityAsyncStatus_not_in":["CREATING"],"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","meta_name":"string","meta_name_contains":"string","meta_name_ends_with":"string","meta_name_gt":"string","meta_name_gte":"string","meta_name_in":["string"],"meta_name_lt":"string","meta_name_lte":"string","meta_name_not":"string","meta_name_not_contains":"string","meta_name_not_ends_with":"string","meta_name_not_in":["string"],"meta_name_not_starts_with":"string","meta_name_starts_with":"string","meta_size":0,"meta_size_gt":0,"meta_size_gte":0,"meta_size_in":[0],"meta_size_lt":0,"meta_size_lte":0,"meta_size_not":0,"meta_size_not_in":[0],"name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","size":0,"size_gt":0,"size_gte":0,"size_in":[0],"size_lt":0,"size_lte":0,"size_not":0,"size_not_in":[0],"upgrade_tool_version":"string","upgrade_tool_version_contains":"string","upgrade_tool_version_ends_with":"string","upgrade_tool_version_gt":"string","upgrade_tool_version_gte":"string","upgrade_tool_version_in":["string"],"upgrade_tool_version_lt":"string","upgrade_tool_version_lte":"string","upgrade_tool_version_not":"string","upgrade_tool_version_not_contains":"string","upgrade_tool_version_not_ends_with":"string","upgrade_tool_version_not_in":["string"],"upgrade_tool_version_not_starts_with":"string","upgrade_tool_version_starts_with":"string","version":"string","version_contains":"string","version_ends_with":"string","version_gt":"string","version_gte":"string","version_in":["string"],"version_lt":"string","version_lte":"string","version_not":"string","version_not_contains":"string","version_not_ends_with":"string","version_not_in":["string"],"version_not_starts_with":"string","version_semantic_gt":"string","version_semantic_gte":"string","version_semantic_lt":"string","version_semantic_lte":"string","version_starts_with":"string","zbs_version":"string","zbs_version_contains":"string","zbs_version_ends_with":"string","zbs_version_gt":"string","zbs_version_gte":"string","zbs_version_in":["string"],"zbs_version_lt":"string","zbs_version_lte":"string","zbs_version_not":"string","zbs_version_not_contains":"string","zbs_version_not_ends_with":"string","zbs_version_not_in":["string"],"zbs_version_not_starts_with":"string","zbs_version_starts_with":"string"}
//
// swagger:model ClusterImageWhereInput
type ClusterImageWhereInput struct {

	// a n d
	AND []*ClusterImageWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ClusterImageWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ClusterImageWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster interface{} `json:"cluster,omitempty"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot interface{} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// meta name
	MetaName *string `json:"meta_name,omitempty"`

	// meta name contains
	MetaNameContains *string `json:"meta_name_contains,omitempty"`

	// meta name ends with
	MetaNameEndsWith *string `json:"meta_name_ends_with,omitempty"`

	// meta name gt
	MetaNameGt *string `json:"meta_name_gt,omitempty"`

	// meta name gte
	MetaNameGte *string `json:"meta_name_gte,omitempty"`

	// meta name in
	MetaNameIn []string `json:"meta_name_in,omitempty"`

	// meta name lt
	MetaNameLt *string `json:"meta_name_lt,omitempty"`

	// meta name lte
	MetaNameLte *string `json:"meta_name_lte,omitempty"`

	// meta name not
	MetaNameNot *string `json:"meta_name_not,omitempty"`

	// meta name not contains
	MetaNameNotContains *string `json:"meta_name_not_contains,omitempty"`

	// meta name not ends with
	MetaNameNotEndsWith *string `json:"meta_name_not_ends_with,omitempty"`

	// meta name not in
	MetaNameNotIn []string `json:"meta_name_not_in,omitempty"`

	// meta name not starts with
	MetaNameNotStartsWith *string `json:"meta_name_not_starts_with,omitempty"`

	// meta name starts with
	MetaNameStartsWith *string `json:"meta_name_starts_with,omitempty"`

	// meta size
	MetaSize *float64 `json:"meta_size,omitempty"`

	// meta size gt
	MetaSizeGt *float64 `json:"meta_size_gt,omitempty"`

	// meta size gte
	MetaSizeGte *float64 `json:"meta_size_gte,omitempty"`

	// meta size in
	MetaSizeIn []float64 `json:"meta_size_in,omitempty"`

	// meta size lt
	MetaSizeLt *float64 `json:"meta_size_lt,omitempty"`

	// meta size lte
	MetaSizeLte *float64 `json:"meta_size_lte,omitempty"`

	// meta size not
	MetaSizeNot *float64 `json:"meta_size_not,omitempty"`

	// meta size not in
	MetaSizeNotIn []float64 `json:"meta_size_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// size
	Size *float64 `json:"size,omitempty"`

	// size gt
	SizeGt *float64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *float64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []float64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *float64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *float64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *float64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []float64 `json:"size_not_in,omitempty"`

	// upgrade tool version
	UpgradeToolVersion *string `json:"upgrade_tool_version,omitempty"`

	// upgrade tool version contains
	UpgradeToolVersionContains *string `json:"upgrade_tool_version_contains,omitempty"`

	// upgrade tool version ends with
	UpgradeToolVersionEndsWith *string `json:"upgrade_tool_version_ends_with,omitempty"`

	// upgrade tool version gt
	UpgradeToolVersionGt *string `json:"upgrade_tool_version_gt,omitempty"`

	// upgrade tool version gte
	UpgradeToolVersionGte *string `json:"upgrade_tool_version_gte,omitempty"`

	// upgrade tool version in
	UpgradeToolVersionIn []string `json:"upgrade_tool_version_in,omitempty"`

	// upgrade tool version lt
	UpgradeToolVersionLt *string `json:"upgrade_tool_version_lt,omitempty"`

	// upgrade tool version lte
	UpgradeToolVersionLte *string `json:"upgrade_tool_version_lte,omitempty"`

	// upgrade tool version not
	UpgradeToolVersionNot *string `json:"upgrade_tool_version_not,omitempty"`

	// upgrade tool version not contains
	UpgradeToolVersionNotContains *string `json:"upgrade_tool_version_not_contains,omitempty"`

	// upgrade tool version not ends with
	UpgradeToolVersionNotEndsWith *string `json:"upgrade_tool_version_not_ends_with,omitempty"`

	// upgrade tool version not in
	UpgradeToolVersionNotIn []string `json:"upgrade_tool_version_not_in,omitempty"`

	// upgrade tool version not starts with
	UpgradeToolVersionNotStartsWith *string `json:"upgrade_tool_version_not_starts_with,omitempty"`

	// upgrade tool version starts with
	UpgradeToolVersionStartsWith *string `json:"upgrade_tool_version_starts_with,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version semantic gt
	VersionSemanticGt *string `json:"version_semantic_gt,omitempty"`

	// version semantic gte
	VersionSemanticGte *string `json:"version_semantic_gte,omitempty"`

	// version semantic lt
	VersionSemanticLt *string `json:"version_semantic_lt,omitempty"`

	// version semantic lte
	VersionSemanticLte *string `json:"version_semantic_lte,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`

	// zbs version
	ZbsVersion *string `json:"zbs_version,omitempty"`

	// zbs version contains
	ZbsVersionContains *string `json:"zbs_version_contains,omitempty"`

	// zbs version ends with
	ZbsVersionEndsWith *string `json:"zbs_version_ends_with,omitempty"`

	// zbs version gt
	ZbsVersionGt *string `json:"zbs_version_gt,omitempty"`

	// zbs version gte
	ZbsVersionGte *string `json:"zbs_version_gte,omitempty"`

	// zbs version in
	ZbsVersionIn []string `json:"zbs_version_in,omitempty"`

	// zbs version lt
	ZbsVersionLt *string `json:"zbs_version_lt,omitempty"`

	// zbs version lte
	ZbsVersionLte *string `json:"zbs_version_lte,omitempty"`

	// zbs version not
	ZbsVersionNot *string `json:"zbs_version_not,omitempty"`

	// zbs version not contains
	ZbsVersionNotContains *string `json:"zbs_version_not_contains,omitempty"`

	// zbs version not ends with
	ZbsVersionNotEndsWith *string `json:"zbs_version_not_ends_with,omitempty"`

	// zbs version not in
	ZbsVersionNotIn []string `json:"zbs_version_not_in,omitempty"`

	// zbs version not starts with
	ZbsVersionNotStartsWith *string `json:"zbs_version_not_starts_with,omitempty"`

	// zbs version starts with
	ZbsVersionStartsWith *string `json:"zbs_version_starts_with,omitempty"`
}

// Validate validates this cluster image where input
func (m *ClusterImageWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterImageWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this cluster image where input based on the context it is used
func (m *ClusterImageWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterImageWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterImageWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterImageWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterImageWhereInput) UnmarshalBinary(b []byte) error {
	var res ClusterImageWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
