// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterWhereInput cluster where input
// Example: {"AND":"ClusterWhereInput[]","NOT":"ClusterWhereInput[]","OR":"ClusterWhereInput[]","applications_every":"ApplicationWhereInput","applications_none":"ApplicationWhereInput","applications_some":"ApplicationWhereInput","architecture":"AARCH64","architecture_in":["AARCH64"],"architecture_not":"AARCH64","architecture_not_in":["AARCH64"],"auto_converge":false,"auto_converge_not":false,"backup_by_service":"BackupServiceWhereInput","connect_state":"CONNECTED","connect_state_in":["CONNECTED"],"connect_state_not":"CONNECTED","connect_state_not_in":["CONNECTED"],"consistency_groups_every":"ConsistencyGroupWhereInput","consistency_groups_none":"ConsistencyGroupWhereInput","consistency_groups_some":"ConsistencyGroupWhereInput","current_cpu_model":"string","current_cpu_model_contains":"string","current_cpu_model_ends_with":"string","current_cpu_model_gt":"string","current_cpu_model_gte":"string","current_cpu_model_in":["string"],"current_cpu_model_lt":"string","current_cpu_model_lte":"string","current_cpu_model_not":"string","current_cpu_model_not_contains":"string","current_cpu_model_not_ends_with":"string","current_cpu_model_not_in":["string"],"current_cpu_model_not_starts_with":"string","current_cpu_model_starts_with":"string","datacenters_every":"DatacenterWhereInput","datacenters_none":"DatacenterWhereInput","datacenters_some":"DatacenterWhereInput","disconnected_date":"string","disconnected_date_gt":"string","disconnected_date_gte":"string","disconnected_date_in":["string"],"disconnected_date_lt":"string","disconnected_date_lte":"string","disconnected_date_not":"string","disconnected_date_not_in":["string"],"disconnected_reason":"LOAD_CLUSTER_FAILED","disconnected_reason_in":["LOAD_CLUSTER_FAILED"],"disconnected_reason_not":"LOAD_CLUSTER_FAILED","disconnected_reason_not_in":["LOAD_CLUSTER_FAILED"],"entityAsyncStatus":"CREATING","entityAsyncStatus_in":["CREATING"],"entityAsyncStatus_not":"CREATING","entityAsyncStatus_not_in":["CREATING"],"everoute_cluster":"EverouteClusterWhereInput","failure_data_space":0,"failure_data_space_gt":0,"failure_data_space_gte":0,"failure_data_space_in":[0],"failure_data_space_lt":0,"failure_data_space_lte":0,"failure_data_space_not":0,"failure_data_space_not_in":[0],"has_metrox":false,"has_metrox_not":false,"has_remote_backup":false,"has_remote_backup_not":false,"host_num":0,"host_num_gt":0,"host_num_gte":0,"host_num_in":[0],"host_num_lt":0,"host_num_lte":0,"host_num_not":0,"host_num_not_in":[0],"hosts_every":"HostWhereInput","hosts_none":"HostWhereInput","hosts_some":"HostWhereInput","hypervisor":"BLUESHARK","hypervisor_in":["BLUESHARK"],"hypervisor_not":"BLUESHARK","hypervisor_not_in":["BLUESHARK"],"id":"string","id_contains":"string","id_ends_with":"string","id_gt":"string","id_gte":"string","id_in":["string"],"id_lt":"string","id_lte":"string","id_not":"string","id_not_contains":"string","id_not_ends_with":"string","id_not_in":["string"],"id_not_starts_with":"string","id_starts_with":"string","ip":"string","ip_contains":"string","ip_ends_with":"string","ip_gt":"string","ip_gte":"string","ip_in":["string"],"ip_lt":"string","ip_lte":"string","ip_not":"string","ip_not_contains":"string","ip_not_ends_with":"string","ip_not_in":["string"],"ip_not_starts_with":"string","ip_starts_with":"string","is_all_flash":false,"is_all_flash_not":false,"iscsi_vip":"string","iscsi_vip_contains":"string","iscsi_vip_ends_with":"string","iscsi_vip_gt":"string","iscsi_vip_gte":"string","iscsi_vip_in":["string"],"iscsi_vip_lt":"string","iscsi_vip_lte":"string","iscsi_vip_not":"string","iscsi_vip_not_contains":"string","iscsi_vip_not_ends_with":"string","iscsi_vip_not_in":["string"],"iscsi_vip_not_starts_with":"string","iscsi_vip_starts_with":"string","labels_every":"LabelWhereInput","labels_none":"LabelWhereInput","labels_some":"LabelWhereInput","license_expire_date":"string","license_expire_date_gt":"string","license_expire_date_gte":"string","license_expire_date_in":["string"],"license_expire_date_lt":"string","license_expire_date_lte":"string","license_expire_date_not":"string","license_expire_date_not_in":["string"],"license_serial":"string","license_serial_contains":"string","license_serial_ends_with":"string","license_serial_gt":"string","license_serial_gte":"string","license_serial_in":["string"],"license_serial_lt":"string","license_serial_lte":"string","license_serial_not":"string","license_serial_not_contains":"string","license_serial_not_ends_with":"string","license_serial_not_in":["string"],"license_serial_not_starts_with":"string","license_serial_starts_with":"string","license_sign_date":"string","license_sign_date_gt":"string","license_sign_date_gte":"string","license_sign_date_in":["string"],"license_sign_date_lt":"string","license_sign_date_lte":"string","license_sign_date_not":"string","license_sign_date_not_in":["string"],"license_type":"PERPETUAL","license_type_in":["PERPETUAL"],"license_type_not":"PERPETUAL","license_type_not_in":["PERPETUAL"],"local_id":"string","local_id_contains":"string","local_id_ends_with":"string","local_id_gt":"string","local_id_gte":"string","local_id_in":["string"],"local_id_lt":"string","local_id_lte":"string","local_id_not":"string","local_id_not_contains":"string","local_id_not_ends_with":"string","local_id_not_in":["string"],"local_id_not_starts_with":"string","local_id_starts_with":"string","maintenance_end_date":"string","maintenance_end_date_gt":"string","maintenance_end_date_gte":"string","maintenance_end_date_in":["string"],"maintenance_end_date_lt":"string","maintenance_end_date_lte":"string","maintenance_end_date_not":"string","maintenance_end_date_not_in":["string"],"maintenance_start_date":"string","maintenance_start_date_gt":"string","maintenance_start_date_gte":"string","maintenance_start_date_in":["string"],"maintenance_start_date_lt":"string","maintenance_start_date_lte":"string","maintenance_start_date_not":"string","maintenance_start_date_not_in":["string"],"management_vip":"string","management_vip_contains":"string","management_vip_ends_with":"string","management_vip_gt":"string","management_vip_gte":"string","management_vip_in":["string"],"management_vip_lt":"string","management_vip_lte":"string","management_vip_not":"string","management_vip_not_contains":"string","management_vip_not_ends_with":"string","management_vip_not_in":["string"],"management_vip_not_starts_with":"string","management_vip_starts_with":"string","max_chunk_num":0,"max_chunk_num_gt":0,"max_chunk_num_gte":0,"max_chunk_num_in":[0],"max_chunk_num_lt":0,"max_chunk_num_lte":0,"max_chunk_num_not":0,"max_chunk_num_not_in":[0],"max_physical_data_capacity":0,"max_physical_data_capacity_gt":0,"max_physical_data_capacity_gte":0,"max_physical_data_capacity_in":[0],"max_physical_data_capacity_lt":0,"max_physical_data_capacity_lte":0,"max_physical_data_capacity_not":0,"max_physical_data_capacity_not_in":[0],"max_physical_data_capacity_per_node":0,"max_physical_data_capacity_per_node_gt":0,"max_physical_data_capacity_per_node_gte":0,"max_physical_data_capacity_per_node_in":[0],"max_physical_data_capacity_per_node_lt":0,"max_physical_data_capacity_per_node_lte":0,"max_physical_data_capacity_per_node_not":0,"max_physical_data_capacity_per_node_not_in":[0],"mgt_gateway":"string","mgt_gateway_contains":"string","mgt_gateway_ends_with":"string","mgt_gateway_gt":"string","mgt_gateway_gte":"string","mgt_gateway_in":["string"],"mgt_gateway_lt":"string","mgt_gateway_lte":"string","mgt_gateway_not":"string","mgt_gateway_not_contains":"string","mgt_gateway_not_ends_with":"string","mgt_gateway_not_in":["string"],"mgt_gateway_not_starts_with":"string","mgt_gateway_starts_with":"string","mgt_netmask":"string","mgt_netmask_contains":"string","mgt_netmask_ends_with":"string","mgt_netmask_gt":"string","mgt_netmask_gte":"string","mgt_netmask_in":["string"],"mgt_netmask_lt":"string","mgt_netmask_lte":"string","mgt_netmask_not":"string","mgt_netmask_not_contains":"string","mgt_netmask_not_ends_with":"string","mgt_netmask_not_in":["string"],"mgt_netmask_not_starts_with":"string","mgt_netmask_starts_with":"string","migration_data_size":0,"migration_data_size_gt":0,"migration_data_size_gte":0,"migration_data_size_in":[0],"migration_data_size_lt":0,"migration_data_size_lte":0,"migration_data_size_not":0,"migration_data_size_not_in":[0],"migration_speed":0,"migration_speed_gt":0,"migration_speed_gte":0,"migration_speed_in":[0],"migration_speed_lt":0,"migration_speed_lte":0,"migration_speed_not":0,"migration_speed_not_in":[0],"name":"string","name_contains":"string","name_ends_with":"string","name_gt":"string","name_gte":"string","name_in":["string"],"name_lt":"string","name_lte":"string","name_not":"string","name_not_contains":"string","name_not_ends_with":"string","name_not_in":["string"],"name_not_starts_with":"string","name_starts_with":"string","ntp_mode":"EXTERNAL","ntp_mode_in":["EXTERNAL"],"ntp_mode_not":"EXTERNAL","ntp_mode_not_in":["EXTERNAL"],"nvmf_enabled":false,"nvmf_enabled_not":false,"password":"string","password_contains":"string","password_ends_with":"string","password_gt":"string","password_gte":"string","password_in":["string"],"password_lt":"string","password_lte":"string","password_not":"string","password_not_contains":"string","password_not_ends_with":"string","password_not_in":["string"],"password_not_starts_with":"string","password_starts_with":"string","pmem_enabled":false,"pmem_enabled_not":false,"provisioned_cpu_cores":0,"provisioned_cpu_cores_for_active_vm":0,"provisioned_cpu_cores_for_active_vm_gt":0,"provisioned_cpu_cores_for_active_vm_gte":0,"provisioned_cpu_cores_for_active_vm_in":[0],"provisioned_cpu_cores_for_active_vm_lt":0,"provisioned_cpu_cores_for_active_vm_lte":0,"provisioned_cpu_cores_for_active_vm_not":0,"provisioned_cpu_cores_for_active_vm_not_in":[0],"provisioned_cpu_cores_gt":0,"provisioned_cpu_cores_gte":0,"provisioned_cpu_cores_in":[0],"provisioned_cpu_cores_lt":0,"provisioned_cpu_cores_lte":0,"provisioned_cpu_cores_not":0,"provisioned_cpu_cores_not_in":[0],"provisioned_for_active_vm_ratio":0,"provisioned_for_active_vm_ratio_gt":0,"provisioned_for_active_vm_ratio_gte":0,"provisioned_for_active_vm_ratio_in":[0],"provisioned_for_active_vm_ratio_lt":0,"provisioned_for_active_vm_ratio_lte":0,"provisioned_for_active_vm_ratio_not":0,"provisioned_for_active_vm_ratio_not_in":[0],"provisioned_memory_bytes":0,"provisioned_memory_bytes_gt":0,"provisioned_memory_bytes_gte":0,"provisioned_memory_bytes_in":[0],"provisioned_memory_bytes_lt":0,"provisioned_memory_bytes_lte":0,"provisioned_memory_bytes_not":0,"provisioned_memory_bytes_not_in":[0],"provisioned_ratio":0,"provisioned_ratio_gt":0,"provisioned_ratio_gte":0,"provisioned_ratio_in":[0],"provisioned_ratio_lt":0,"provisioned_ratio_lte":0,"provisioned_ratio_not":0,"provisioned_ratio_not_in":[0],"rdma_enabled":false,"rdma_enabled_not":false,"recover_data_size":0,"recover_data_size_gt":0,"recover_data_size_gte":0,"recover_data_size_in":[0],"recover_data_size_lt":0,"recover_data_size_lte":0,"recover_data_size_not":0,"recover_data_size_not_in":[0],"recover_speed":0,"recover_speed_gt":0,"recover_speed_gte":0,"recover_speed_in":[0],"recover_speed_lt":0,"recover_speed_lte":0,"recover_speed_not":0,"recover_speed_not_in":[0],"reserved_cpu_cores_for_system_service":0,"reserved_cpu_cores_for_system_service_gt":0,"reserved_cpu_cores_for_system_service_gte":0,"reserved_cpu_cores_for_system_service_in":[0],"reserved_cpu_cores_for_system_service_lt":0,"reserved_cpu_cores_for_system_service_lte":0,"reserved_cpu_cores_for_system_service_not":0,"reserved_cpu_cores_for_system_service_not_in":[0],"running_vm_num":0,"running_vm_num_gt":0,"running_vm_num_gte":0,"running_vm_num_in":[0],"running_vm_num_lt":0,"running_vm_num_lte":0,"running_vm_num_not":0,"running_vm_num_not_in":[0],"settings":"ClusterSettingsWhereInput","software_edition":"COMMUNITY","software_edition_in":["COMMUNITY"],"software_edition_not":"COMMUNITY","software_edition_not_in":["COMMUNITY"],"stopped_vm_num":0,"stopped_vm_num_gt":0,"stopped_vm_num_gte":0,"stopped_vm_num_in":[0],"stopped_vm_num_lt":0,"stopped_vm_num_lte":0,"stopped_vm_num_not":0,"stopped_vm_num_not_in":[0],"stretch":false,"stretch_not":false,"suspended_vm_num":0,"suspended_vm_num_gt":0,"suspended_vm_num_gte":0,"suspended_vm_num_in":[0],"suspended_vm_num_lt":0,"suspended_vm_num_lte":0,"suspended_vm_num_not":0,"suspended_vm_num_not_in":[0],"total_cache_capacity":0,"total_cache_capacity_gt":0,"total_cache_capacity_gte":0,"total_cache_capacity_in":[0],"total_cache_capacity_lt":0,"total_cache_capacity_lte":0,"total_cache_capacity_not":0,"total_cache_capacity_not_in":[0],"total_cpu_cores":0,"total_cpu_cores_gt":0,"total_cpu_cores_gte":0,"total_cpu_cores_in":[0],"total_cpu_cores_lt":0,"total_cpu_cores_lte":0,"total_cpu_cores_not":0,"total_cpu_cores_not_in":[0],"total_cpu_hz":0,"total_cpu_hz_gt":0,"total_cpu_hz_gte":0,"total_cpu_hz_in":[0],"total_cpu_hz_lt":0,"total_cpu_hz_lte":0,"total_cpu_hz_not":0,"total_cpu_hz_not_in":[0],"total_cpu_sockets":0,"total_cpu_sockets_gt":0,"total_cpu_sockets_gte":0,"total_cpu_sockets_in":[0],"total_cpu_sockets_lt":0,"total_cpu_sockets_lte":0,"total_cpu_sockets_not":0,"total_cpu_sockets_not_in":[0],"total_data_capacity":0,"total_data_capacity_gt":0,"total_data_capacity_gte":0,"total_data_capacity_in":[0],"total_data_capacity_lt":0,"total_data_capacity_lte":0,"total_data_capacity_not":0,"total_data_capacity_not_in":[0],"total_memory_bytes":0,"total_memory_bytes_gt":0,"total_memory_bytes_gte":0,"total_memory_bytes_in":[0],"total_memory_bytes_lt":0,"total_memory_bytes_lte":0,"total_memory_bytes_not":0,"total_memory_bytes_not_in":[0],"type":"BLUESHARK","type_in":["BLUESHARK"],"type_not":"BLUESHARK","type_not_in":["BLUESHARK"],"upgrade_tool_version":"string","upgrade_tool_version_contains":"string","upgrade_tool_version_ends_with":"string","upgrade_tool_version_gt":"string","upgrade_tool_version_gte":"string","upgrade_tool_version_in":["string"],"upgrade_tool_version_lt":"string","upgrade_tool_version_lte":"string","upgrade_tool_version_not":"string","upgrade_tool_version_not_contains":"string","upgrade_tool_version_not_ends_with":"string","upgrade_tool_version_not_in":["string"],"upgrade_tool_version_not_starts_with":"string","upgrade_tool_version_starts_with":"string","used_cpu_hz":0,"used_cpu_hz_gt":0,"used_cpu_hz_gte":0,"used_cpu_hz_in":[0],"used_cpu_hz_lt":0,"used_cpu_hz_lte":0,"used_cpu_hz_not":0,"used_cpu_hz_not_in":[0],"used_data_space":0,"used_data_space_gt":0,"used_data_space_gte":0,"used_data_space_in":[0],"used_data_space_lt":0,"used_data_space_lte":0,"used_data_space_not":0,"used_data_space_not_in":[0],"used_memory_bytes":0,"used_memory_bytes_gt":0,"used_memory_bytes_gte":0,"used_memory_bytes_in":[0],"used_memory_bytes_lt":0,"used_memory_bytes_lte":0,"used_memory_bytes_not":0,"used_memory_bytes_not_in":[0],"username":"string","username_contains":"string","username_ends_with":"string","username_gt":"string","username_gte":"string","username_in":["string"],"username_lt":"string","username_lte":"string","username_not":"string","username_not_contains":"string","username_not_ends_with":"string","username_not_in":["string"],"username_not_starts_with":"string","username_starts_with":"string","valid_data_space":0,"valid_data_space_gt":0,"valid_data_space_gte":0,"valid_data_space_in":[0],"valid_data_space_lt":0,"valid_data_space_lte":0,"valid_data_space_not":0,"valid_data_space_not_in":[0],"vcenterAccount":"VcenterAccountWhereInput","vdses_every":"VdsWhereInput","vdses_none":"VdsWhereInput","vdses_some":"VdsWhereInput","version":"string","version_contains":"string","version_ends_with":"string","version_gt":"string","version_gte":"string","version_in":["string"],"version_lt":"string","version_lte":"string","version_not":"string","version_not_contains":"string","version_not_ends_with":"string","version_not_in":["string"],"version_not_starts_with":"string","version_semantic_gt":"string","version_semantic_gte":"string","version_semantic_lt":"string","version_semantic_lte":"string","version_starts_with":"string","vhost_enabled":false,"vhost_enabled_not":false,"vm_folders_every":"VmFolderWhereInput","vm_folders_none":"VmFolderWhereInput","vm_folders_some":"VmFolderWhereInput","vm_num":0,"vm_num_gt":0,"vm_num_gte":0,"vm_num_in":[0],"vm_num_lt":0,"vm_num_lte":0,"vm_num_not":0,"vm_num_not_in":[0],"vm_templates_every":"VmTemplateWhereInput","vm_templates_none":"VmTemplateWhereInput","vm_templates_some":"VmTemplateWhereInput","vms_every":"VmWhereInput","vms_none":"VmWhereInput","vms_some":"VmWhereInput","witness":"WitnessWhereInput","zones_every":"ZoneWhereInput","zones_none":"ZoneWhereInput","zones_some":"ZoneWhereInput"}
//
// swagger:model ClusterWhereInput
type ClusterWhereInput struct {

	// a n d
	AND []*ClusterWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*ClusterWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*ClusterWhereInput `json:"OR,omitempty"`

	// applications every
	ApplicationsEvery interface{} `json:"applications_every,omitempty"`

	// applications none
	ApplicationsNone interface{} `json:"applications_none,omitempty"`

	// applications some
	ApplicationsSome interface{} `json:"applications_some,omitempty"`

	// architecture
	Architecture interface{} `json:"architecture,omitempty"`

	// architecture in
	ArchitectureIn []Architecture `json:"architecture_in,omitempty"`

	// architecture not
	ArchitectureNot interface{} `json:"architecture_not,omitempty"`

	// architecture not in
	ArchitectureNotIn []Architecture `json:"architecture_not_in,omitempty"`

	// auto converge
	AutoConverge *bool `json:"auto_converge,omitempty"`

	// auto converge not
	AutoConvergeNot *bool `json:"auto_converge_not,omitempty"`

	// backup by service
	BackupByService interface{} `json:"backup_by_service,omitempty"`

	// connect state
	ConnectState interface{} `json:"connect_state,omitempty"`

	// connect state in
	ConnectStateIn []ConnectState `json:"connect_state_in,omitempty"`

	// connect state not
	ConnectStateNot interface{} `json:"connect_state_not,omitempty"`

	// connect state not in
	ConnectStateNotIn []ConnectState `json:"connect_state_not_in,omitempty"`

	// consistency groups every
	ConsistencyGroupsEvery interface{} `json:"consistency_groups_every,omitempty"`

	// consistency groups none
	ConsistencyGroupsNone interface{} `json:"consistency_groups_none,omitempty"`

	// consistency groups some
	ConsistencyGroupsSome interface{} `json:"consistency_groups_some,omitempty"`

	// current cpu model
	CurrentCPUModel *string `json:"current_cpu_model,omitempty"`

	// current cpu model contains
	CurrentCPUModelContains *string `json:"current_cpu_model_contains,omitempty"`

	// current cpu model ends with
	CurrentCPUModelEndsWith *string `json:"current_cpu_model_ends_with,omitempty"`

	// current cpu model gt
	CurrentCPUModelGt *string `json:"current_cpu_model_gt,omitempty"`

	// current cpu model gte
	CurrentCPUModelGte *string `json:"current_cpu_model_gte,omitempty"`

	// current cpu model in
	CurrentCPUModelIn []string `json:"current_cpu_model_in,omitempty"`

	// current cpu model lt
	CurrentCPUModelLt *string `json:"current_cpu_model_lt,omitempty"`

	// current cpu model lte
	CurrentCPUModelLte *string `json:"current_cpu_model_lte,omitempty"`

	// current cpu model not
	CurrentCPUModelNot *string `json:"current_cpu_model_not,omitempty"`

	// current cpu model not contains
	CurrentCPUModelNotContains *string `json:"current_cpu_model_not_contains,omitempty"`

	// current cpu model not ends with
	CurrentCPUModelNotEndsWith *string `json:"current_cpu_model_not_ends_with,omitempty"`

	// current cpu model not in
	CurrentCPUModelNotIn []string `json:"current_cpu_model_not_in,omitempty"`

	// current cpu model not starts with
	CurrentCPUModelNotStartsWith *string `json:"current_cpu_model_not_starts_with,omitempty"`

	// current cpu model starts with
	CurrentCPUModelStartsWith *string `json:"current_cpu_model_starts_with,omitempty"`

	// datacenters every
	DatacentersEvery interface{} `json:"datacenters_every,omitempty"`

	// datacenters none
	DatacentersNone interface{} `json:"datacenters_none,omitempty"`

	// datacenters some
	DatacentersSome interface{} `json:"datacenters_some,omitempty"`

	// disconnected date
	DisconnectedDate *string `json:"disconnected_date,omitempty"`

	// disconnected date gt
	DisconnectedDateGt *string `json:"disconnected_date_gt,omitempty"`

	// disconnected date gte
	DisconnectedDateGte *string `json:"disconnected_date_gte,omitempty"`

	// disconnected date in
	DisconnectedDateIn []string `json:"disconnected_date_in,omitempty"`

	// disconnected date lt
	DisconnectedDateLt *string `json:"disconnected_date_lt,omitempty"`

	// disconnected date lte
	DisconnectedDateLte *string `json:"disconnected_date_lte,omitempty"`

	// disconnected date not
	DisconnectedDateNot *string `json:"disconnected_date_not,omitempty"`

	// disconnected date not in
	DisconnectedDateNotIn []string `json:"disconnected_date_not_in,omitempty"`

	// disconnected reason
	DisconnectedReason interface{} `json:"disconnected_reason,omitempty"`

	// disconnected reason in
	DisconnectedReasonIn []ClusterConnectorErrorCode `json:"disconnected_reason_in,omitempty"`

	// disconnected reason not
	DisconnectedReasonNot interface{} `json:"disconnected_reason_not,omitempty"`

	// disconnected reason not in
	DisconnectedReasonNotIn []ClusterConnectorErrorCode `json:"disconnected_reason_not_in,omitempty"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot interface{} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// everoute cluster
	EverouteCluster interface{} `json:"everoute_cluster,omitempty"`

	// failure data space
	FailureDataSpace *float64 `json:"failure_data_space,omitempty"`

	// failure data space gt
	FailureDataSpaceGt *float64 `json:"failure_data_space_gt,omitempty"`

	// failure data space gte
	FailureDataSpaceGte *float64 `json:"failure_data_space_gte,omitempty"`

	// failure data space in
	FailureDataSpaceIn []float64 `json:"failure_data_space_in,omitempty"`

	// failure data space lt
	FailureDataSpaceLt *float64 `json:"failure_data_space_lt,omitempty"`

	// failure data space lte
	FailureDataSpaceLte *float64 `json:"failure_data_space_lte,omitempty"`

	// failure data space not
	FailureDataSpaceNot *float64 `json:"failure_data_space_not,omitempty"`

	// failure data space not in
	FailureDataSpaceNotIn []float64 `json:"failure_data_space_not_in,omitempty"`

	// has metrox
	HasMetrox *bool `json:"has_metrox,omitempty"`

	// has metrox not
	HasMetroxNot *bool `json:"has_metrox_not,omitempty"`

	// has remote backup
	HasRemoteBackup *bool `json:"has_remote_backup,omitempty"`

	// has remote backup not
	HasRemoteBackupNot *bool `json:"has_remote_backup_not,omitempty"`

	// host num
	HostNum *int32 `json:"host_num,omitempty"`

	// host num gt
	HostNumGt *int32 `json:"host_num_gt,omitempty"`

	// host num gte
	HostNumGte *int32 `json:"host_num_gte,omitempty"`

	// host num in
	HostNumIn []int32 `json:"host_num_in,omitempty"`

	// host num lt
	HostNumLt *int32 `json:"host_num_lt,omitempty"`

	// host num lte
	HostNumLte *int32 `json:"host_num_lte,omitempty"`

	// host num not
	HostNumNot *int32 `json:"host_num_not,omitempty"`

	// host num not in
	HostNumNotIn []int32 `json:"host_num_not_in,omitempty"`

	// hosts every
	HostsEvery interface{} `json:"hosts_every,omitempty"`

	// hosts none
	HostsNone interface{} `json:"hosts_none,omitempty"`

	// hosts some
	HostsSome interface{} `json:"hosts_some,omitempty"`

	// hypervisor
	Hypervisor interface{} `json:"hypervisor,omitempty"`

	// hypervisor in
	HypervisorIn []Hypervisor `json:"hypervisor_in,omitempty"`

	// hypervisor not
	HypervisorNot interface{} `json:"hypervisor_not,omitempty"`

	// hypervisor not in
	HypervisorNotIn []Hypervisor `json:"hypervisor_not_in,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// ip
	IP *string `json:"ip,omitempty"`

	// ip contains
	IPContains *string `json:"ip_contains,omitempty"`

	// ip ends with
	IPEndsWith *string `json:"ip_ends_with,omitempty"`

	// ip gt
	IPGt *string `json:"ip_gt,omitempty"`

	// ip gte
	IPGte *string `json:"ip_gte,omitempty"`

	// ip in
	IPIn []string `json:"ip_in,omitempty"`

	// ip lt
	IPLt *string `json:"ip_lt,omitempty"`

	// ip lte
	IPLte *string `json:"ip_lte,omitempty"`

	// ip not
	IPNot *string `json:"ip_not,omitempty"`

	// ip not contains
	IPNotContains *string `json:"ip_not_contains,omitempty"`

	// ip not ends with
	IPNotEndsWith *string `json:"ip_not_ends_with,omitempty"`

	// ip not in
	IPNotIn []string `json:"ip_not_in,omitempty"`

	// ip not starts with
	IPNotStartsWith *string `json:"ip_not_starts_with,omitempty"`

	// ip starts with
	IPStartsWith *string `json:"ip_starts_with,omitempty"`

	// is all flash
	IsAllFlash *bool `json:"is_all_flash,omitempty"`

	// is all flash not
	IsAllFlashNot *bool `json:"is_all_flash_not,omitempty"`

	// iscsi vip
	IscsiVip *string `json:"iscsi_vip,omitempty"`

	// iscsi vip contains
	IscsiVipContains *string `json:"iscsi_vip_contains,omitempty"`

	// iscsi vip ends with
	IscsiVipEndsWith *string `json:"iscsi_vip_ends_with,omitempty"`

	// iscsi vip gt
	IscsiVipGt *string `json:"iscsi_vip_gt,omitempty"`

	// iscsi vip gte
	IscsiVipGte *string `json:"iscsi_vip_gte,omitempty"`

	// iscsi vip in
	IscsiVipIn []string `json:"iscsi_vip_in,omitempty"`

	// iscsi vip lt
	IscsiVipLt *string `json:"iscsi_vip_lt,omitempty"`

	// iscsi vip lte
	IscsiVipLte *string `json:"iscsi_vip_lte,omitempty"`

	// iscsi vip not
	IscsiVipNot *string `json:"iscsi_vip_not,omitempty"`

	// iscsi vip not contains
	IscsiVipNotContains *string `json:"iscsi_vip_not_contains,omitempty"`

	// iscsi vip not ends with
	IscsiVipNotEndsWith *string `json:"iscsi_vip_not_ends_with,omitempty"`

	// iscsi vip not in
	IscsiVipNotIn []string `json:"iscsi_vip_not_in,omitempty"`

	// iscsi vip not starts with
	IscsiVipNotStartsWith *string `json:"iscsi_vip_not_starts_with,omitempty"`

	// iscsi vip starts with
	IscsiVipStartsWith *string `json:"iscsi_vip_starts_with,omitempty"`

	// labels every
	LabelsEvery interface{} `json:"labels_every,omitempty"`

	// labels none
	LabelsNone interface{} `json:"labels_none,omitempty"`

	// labels some
	LabelsSome interface{} `json:"labels_some,omitempty"`

	// license expire date
	LicenseExpireDate *string `json:"license_expire_date,omitempty"`

	// license expire date gt
	LicenseExpireDateGt *string `json:"license_expire_date_gt,omitempty"`

	// license expire date gte
	LicenseExpireDateGte *string `json:"license_expire_date_gte,omitempty"`

	// license expire date in
	LicenseExpireDateIn []string `json:"license_expire_date_in,omitempty"`

	// license expire date lt
	LicenseExpireDateLt *string `json:"license_expire_date_lt,omitempty"`

	// license expire date lte
	LicenseExpireDateLte *string `json:"license_expire_date_lte,omitempty"`

	// license expire date not
	LicenseExpireDateNot *string `json:"license_expire_date_not,omitempty"`

	// license expire date not in
	LicenseExpireDateNotIn []string `json:"license_expire_date_not_in,omitempty"`

	// license serial
	LicenseSerial *string `json:"license_serial,omitempty"`

	// license serial contains
	LicenseSerialContains *string `json:"license_serial_contains,omitempty"`

	// license serial ends with
	LicenseSerialEndsWith *string `json:"license_serial_ends_with,omitempty"`

	// license serial gt
	LicenseSerialGt *string `json:"license_serial_gt,omitempty"`

	// license serial gte
	LicenseSerialGte *string `json:"license_serial_gte,omitempty"`

	// license serial in
	LicenseSerialIn []string `json:"license_serial_in,omitempty"`

	// license serial lt
	LicenseSerialLt *string `json:"license_serial_lt,omitempty"`

	// license serial lte
	LicenseSerialLte *string `json:"license_serial_lte,omitempty"`

	// license serial not
	LicenseSerialNot *string `json:"license_serial_not,omitempty"`

	// license serial not contains
	LicenseSerialNotContains *string `json:"license_serial_not_contains,omitempty"`

	// license serial not ends with
	LicenseSerialNotEndsWith *string `json:"license_serial_not_ends_with,omitempty"`

	// license serial not in
	LicenseSerialNotIn []string `json:"license_serial_not_in,omitempty"`

	// license serial not starts with
	LicenseSerialNotStartsWith *string `json:"license_serial_not_starts_with,omitempty"`

	// license serial starts with
	LicenseSerialStartsWith *string `json:"license_serial_starts_with,omitempty"`

	// license sign date
	LicenseSignDate *string `json:"license_sign_date,omitempty"`

	// license sign date gt
	LicenseSignDateGt *string `json:"license_sign_date_gt,omitempty"`

	// license sign date gte
	LicenseSignDateGte *string `json:"license_sign_date_gte,omitempty"`

	// license sign date in
	LicenseSignDateIn []string `json:"license_sign_date_in,omitempty"`

	// license sign date lt
	LicenseSignDateLt *string `json:"license_sign_date_lt,omitempty"`

	// license sign date lte
	LicenseSignDateLte *string `json:"license_sign_date_lte,omitempty"`

	// license sign date not
	LicenseSignDateNot *string `json:"license_sign_date_not,omitempty"`

	// license sign date not in
	LicenseSignDateNotIn []string `json:"license_sign_date_not_in,omitempty"`

	// license type
	LicenseType interface{} `json:"license_type,omitempty"`

	// license type in
	LicenseTypeIn []LicenseType `json:"license_type_in,omitempty"`

	// license type not
	LicenseTypeNot interface{} `json:"license_type_not,omitempty"`

	// license type not in
	LicenseTypeNotIn []LicenseType `json:"license_type_not_in,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// maintenance end date
	MaintenanceEndDate *string `json:"maintenance_end_date,omitempty"`

	// maintenance end date gt
	MaintenanceEndDateGt *string `json:"maintenance_end_date_gt,omitempty"`

	// maintenance end date gte
	MaintenanceEndDateGte *string `json:"maintenance_end_date_gte,omitempty"`

	// maintenance end date in
	MaintenanceEndDateIn []string `json:"maintenance_end_date_in,omitempty"`

	// maintenance end date lt
	MaintenanceEndDateLt *string `json:"maintenance_end_date_lt,omitempty"`

	// maintenance end date lte
	MaintenanceEndDateLte *string `json:"maintenance_end_date_lte,omitempty"`

	// maintenance end date not
	MaintenanceEndDateNot *string `json:"maintenance_end_date_not,omitempty"`

	// maintenance end date not in
	MaintenanceEndDateNotIn []string `json:"maintenance_end_date_not_in,omitempty"`

	// maintenance start date
	MaintenanceStartDate *string `json:"maintenance_start_date,omitempty"`

	// maintenance start date gt
	MaintenanceStartDateGt *string `json:"maintenance_start_date_gt,omitempty"`

	// maintenance start date gte
	MaintenanceStartDateGte *string `json:"maintenance_start_date_gte,omitempty"`

	// maintenance start date in
	MaintenanceStartDateIn []string `json:"maintenance_start_date_in,omitempty"`

	// maintenance start date lt
	MaintenanceStartDateLt *string `json:"maintenance_start_date_lt,omitempty"`

	// maintenance start date lte
	MaintenanceStartDateLte *string `json:"maintenance_start_date_lte,omitempty"`

	// maintenance start date not
	MaintenanceStartDateNot *string `json:"maintenance_start_date_not,omitempty"`

	// maintenance start date not in
	MaintenanceStartDateNotIn []string `json:"maintenance_start_date_not_in,omitempty"`

	// management vip
	ManagementVip *string `json:"management_vip,omitempty"`

	// management vip contains
	ManagementVipContains *string `json:"management_vip_contains,omitempty"`

	// management vip ends with
	ManagementVipEndsWith *string `json:"management_vip_ends_with,omitempty"`

	// management vip gt
	ManagementVipGt *string `json:"management_vip_gt,omitempty"`

	// management vip gte
	ManagementVipGte *string `json:"management_vip_gte,omitempty"`

	// management vip in
	ManagementVipIn []string `json:"management_vip_in,omitempty"`

	// management vip lt
	ManagementVipLt *string `json:"management_vip_lt,omitempty"`

	// management vip lte
	ManagementVipLte *string `json:"management_vip_lte,omitempty"`

	// management vip not
	ManagementVipNot *string `json:"management_vip_not,omitempty"`

	// management vip not contains
	ManagementVipNotContains *string `json:"management_vip_not_contains,omitempty"`

	// management vip not ends with
	ManagementVipNotEndsWith *string `json:"management_vip_not_ends_with,omitempty"`

	// management vip not in
	ManagementVipNotIn []string `json:"management_vip_not_in,omitempty"`

	// management vip not starts with
	ManagementVipNotStartsWith *string `json:"management_vip_not_starts_with,omitempty"`

	// management vip starts with
	ManagementVipStartsWith *string `json:"management_vip_starts_with,omitempty"`

	// max chunk num
	MaxChunkNum *int32 `json:"max_chunk_num,omitempty"`

	// max chunk num gt
	MaxChunkNumGt *int32 `json:"max_chunk_num_gt,omitempty"`

	// max chunk num gte
	MaxChunkNumGte *int32 `json:"max_chunk_num_gte,omitempty"`

	// max chunk num in
	MaxChunkNumIn []int32 `json:"max_chunk_num_in,omitempty"`

	// max chunk num lt
	MaxChunkNumLt *int32 `json:"max_chunk_num_lt,omitempty"`

	// max chunk num lte
	MaxChunkNumLte *int32 `json:"max_chunk_num_lte,omitempty"`

	// max chunk num not
	MaxChunkNumNot *int32 `json:"max_chunk_num_not,omitempty"`

	// max chunk num not in
	MaxChunkNumNotIn []int32 `json:"max_chunk_num_not_in,omitempty"`

	// max physical data capacity
	MaxPhysicalDataCapacity *float64 `json:"max_physical_data_capacity,omitempty"`

	// max physical data capacity gt
	MaxPhysicalDataCapacityGt *float64 `json:"max_physical_data_capacity_gt,omitempty"`

	// max physical data capacity gte
	MaxPhysicalDataCapacityGte *float64 `json:"max_physical_data_capacity_gte,omitempty"`

	// max physical data capacity in
	MaxPhysicalDataCapacityIn []float64 `json:"max_physical_data_capacity_in,omitempty"`

	// max physical data capacity lt
	MaxPhysicalDataCapacityLt *float64 `json:"max_physical_data_capacity_lt,omitempty"`

	// max physical data capacity lte
	MaxPhysicalDataCapacityLte *float64 `json:"max_physical_data_capacity_lte,omitempty"`

	// max physical data capacity not
	MaxPhysicalDataCapacityNot *float64 `json:"max_physical_data_capacity_not,omitempty"`

	// max physical data capacity not in
	MaxPhysicalDataCapacityNotIn []float64 `json:"max_physical_data_capacity_not_in,omitempty"`

	// max physical data capacity per node
	MaxPhysicalDataCapacityPerNode *float64 `json:"max_physical_data_capacity_per_node,omitempty"`

	// max physical data capacity per node gt
	MaxPhysicalDataCapacityPerNodeGt *float64 `json:"max_physical_data_capacity_per_node_gt,omitempty"`

	// max physical data capacity per node gte
	MaxPhysicalDataCapacityPerNodeGte *float64 `json:"max_physical_data_capacity_per_node_gte,omitempty"`

	// max physical data capacity per node in
	MaxPhysicalDataCapacityPerNodeIn []float64 `json:"max_physical_data_capacity_per_node_in,omitempty"`

	// max physical data capacity per node lt
	MaxPhysicalDataCapacityPerNodeLt *float64 `json:"max_physical_data_capacity_per_node_lt,omitempty"`

	// max physical data capacity per node lte
	MaxPhysicalDataCapacityPerNodeLte *float64 `json:"max_physical_data_capacity_per_node_lte,omitempty"`

	// max physical data capacity per node not
	MaxPhysicalDataCapacityPerNodeNot *float64 `json:"max_physical_data_capacity_per_node_not,omitempty"`

	// max physical data capacity per node not in
	MaxPhysicalDataCapacityPerNodeNotIn []float64 `json:"max_physical_data_capacity_per_node_not_in,omitempty"`

	// mgt gateway
	MgtGateway *string `json:"mgt_gateway,omitempty"`

	// mgt gateway contains
	MgtGatewayContains *string `json:"mgt_gateway_contains,omitempty"`

	// mgt gateway ends with
	MgtGatewayEndsWith *string `json:"mgt_gateway_ends_with,omitempty"`

	// mgt gateway gt
	MgtGatewayGt *string `json:"mgt_gateway_gt,omitempty"`

	// mgt gateway gte
	MgtGatewayGte *string `json:"mgt_gateway_gte,omitempty"`

	// mgt gateway in
	MgtGatewayIn []string `json:"mgt_gateway_in,omitempty"`

	// mgt gateway lt
	MgtGatewayLt *string `json:"mgt_gateway_lt,omitempty"`

	// mgt gateway lte
	MgtGatewayLte *string `json:"mgt_gateway_lte,omitempty"`

	// mgt gateway not
	MgtGatewayNot *string `json:"mgt_gateway_not,omitempty"`

	// mgt gateway not contains
	MgtGatewayNotContains *string `json:"mgt_gateway_not_contains,omitempty"`

	// mgt gateway not ends with
	MgtGatewayNotEndsWith *string `json:"mgt_gateway_not_ends_with,omitempty"`

	// mgt gateway not in
	MgtGatewayNotIn []string `json:"mgt_gateway_not_in,omitempty"`

	// mgt gateway not starts with
	MgtGatewayNotStartsWith *string `json:"mgt_gateway_not_starts_with,omitempty"`

	// mgt gateway starts with
	MgtGatewayStartsWith *string `json:"mgt_gateway_starts_with,omitempty"`

	// mgt netmask
	MgtNetmask *string `json:"mgt_netmask,omitempty"`

	// mgt netmask contains
	MgtNetmaskContains *string `json:"mgt_netmask_contains,omitempty"`

	// mgt netmask ends with
	MgtNetmaskEndsWith *string `json:"mgt_netmask_ends_with,omitempty"`

	// mgt netmask gt
	MgtNetmaskGt *string `json:"mgt_netmask_gt,omitempty"`

	// mgt netmask gte
	MgtNetmaskGte *string `json:"mgt_netmask_gte,omitempty"`

	// mgt netmask in
	MgtNetmaskIn []string `json:"mgt_netmask_in,omitempty"`

	// mgt netmask lt
	MgtNetmaskLt *string `json:"mgt_netmask_lt,omitempty"`

	// mgt netmask lte
	MgtNetmaskLte *string `json:"mgt_netmask_lte,omitempty"`

	// mgt netmask not
	MgtNetmaskNot *string `json:"mgt_netmask_not,omitempty"`

	// mgt netmask not contains
	MgtNetmaskNotContains *string `json:"mgt_netmask_not_contains,omitempty"`

	// mgt netmask not ends with
	MgtNetmaskNotEndsWith *string `json:"mgt_netmask_not_ends_with,omitempty"`

	// mgt netmask not in
	MgtNetmaskNotIn []string `json:"mgt_netmask_not_in,omitempty"`

	// mgt netmask not starts with
	MgtNetmaskNotStartsWith *string `json:"mgt_netmask_not_starts_with,omitempty"`

	// mgt netmask starts with
	MgtNetmaskStartsWith *string `json:"mgt_netmask_starts_with,omitempty"`

	// migration data size
	MigrationDataSize *float64 `json:"migration_data_size,omitempty"`

	// migration data size gt
	MigrationDataSizeGt *float64 `json:"migration_data_size_gt,omitempty"`

	// migration data size gte
	MigrationDataSizeGte *float64 `json:"migration_data_size_gte,omitempty"`

	// migration data size in
	MigrationDataSizeIn []float64 `json:"migration_data_size_in,omitempty"`

	// migration data size lt
	MigrationDataSizeLt *float64 `json:"migration_data_size_lt,omitempty"`

	// migration data size lte
	MigrationDataSizeLte *float64 `json:"migration_data_size_lte,omitempty"`

	// migration data size not
	MigrationDataSizeNot *float64 `json:"migration_data_size_not,omitempty"`

	// migration data size not in
	MigrationDataSizeNotIn []float64 `json:"migration_data_size_not_in,omitempty"`

	// migration speed
	MigrationSpeed *float64 `json:"migration_speed,omitempty"`

	// migration speed gt
	MigrationSpeedGt *float64 `json:"migration_speed_gt,omitempty"`

	// migration speed gte
	MigrationSpeedGte *float64 `json:"migration_speed_gte,omitempty"`

	// migration speed in
	MigrationSpeedIn []float64 `json:"migration_speed_in,omitempty"`

	// migration speed lt
	MigrationSpeedLt *float64 `json:"migration_speed_lt,omitempty"`

	// migration speed lte
	MigrationSpeedLte *float64 `json:"migration_speed_lte,omitempty"`

	// migration speed not
	MigrationSpeedNot *float64 `json:"migration_speed_not,omitempty"`

	// migration speed not in
	MigrationSpeedNotIn []float64 `json:"migration_speed_not_in,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// ntp mode
	NtpMode interface{} `json:"ntp_mode,omitempty"`

	// ntp mode in
	NtpModeIn []NtpMode `json:"ntp_mode_in,omitempty"`

	// ntp mode not
	NtpModeNot interface{} `json:"ntp_mode_not,omitempty"`

	// ntp mode not in
	NtpModeNotIn []NtpMode `json:"ntp_mode_not_in,omitempty"`

	// nvmf enabled
	NvmfEnabled *bool `json:"nvmf_enabled,omitempty"`

	// nvmf enabled not
	NvmfEnabledNot *bool `json:"nvmf_enabled_not,omitempty"`

	// password
	Password *string `json:"password,omitempty"`

	// password contains
	PasswordContains *string `json:"password_contains,omitempty"`

	// password ends with
	PasswordEndsWith *string `json:"password_ends_with,omitempty"`

	// password gt
	PasswordGt *string `json:"password_gt,omitempty"`

	// password gte
	PasswordGte *string `json:"password_gte,omitempty"`

	// password in
	PasswordIn []string `json:"password_in,omitempty"`

	// password lt
	PasswordLt *string `json:"password_lt,omitempty"`

	// password lte
	PasswordLte *string `json:"password_lte,omitempty"`

	// password not
	PasswordNot *string `json:"password_not,omitempty"`

	// password not contains
	PasswordNotContains *string `json:"password_not_contains,omitempty"`

	// password not ends with
	PasswordNotEndsWith *string `json:"password_not_ends_with,omitempty"`

	// password not in
	PasswordNotIn []string `json:"password_not_in,omitempty"`

	// password not starts with
	PasswordNotStartsWith *string `json:"password_not_starts_with,omitempty"`

	// password starts with
	PasswordStartsWith *string `json:"password_starts_with,omitempty"`

	// pmem enabled
	PmemEnabled *bool `json:"pmem_enabled,omitempty"`

	// pmem enabled not
	PmemEnabledNot *bool `json:"pmem_enabled_not,omitempty"`

	// provisioned cpu cores
	ProvisionedCPUCores *int32 `json:"provisioned_cpu_cores,omitempty"`

	// provisioned cpu cores for active vm
	ProvisionedCPUCoresForActiveVM *int32 `json:"provisioned_cpu_cores_for_active_vm,omitempty"`

	// provisioned cpu cores for active vm gt
	ProvisionedCPUCoresForActiveVMGt *int32 `json:"provisioned_cpu_cores_for_active_vm_gt,omitempty"`

	// provisioned cpu cores for active vm gte
	ProvisionedCPUCoresForActiveVMGte *int32 `json:"provisioned_cpu_cores_for_active_vm_gte,omitempty"`

	// provisioned cpu cores for active vm in
	ProvisionedCPUCoresForActiveVMIn []int32 `json:"provisioned_cpu_cores_for_active_vm_in,omitempty"`

	// provisioned cpu cores for active vm lt
	ProvisionedCPUCoresForActiveVMLt *int32 `json:"provisioned_cpu_cores_for_active_vm_lt,omitempty"`

	// provisioned cpu cores for active vm lte
	ProvisionedCPUCoresForActiveVMLte *int32 `json:"provisioned_cpu_cores_for_active_vm_lte,omitempty"`

	// provisioned cpu cores for active vm not
	ProvisionedCPUCoresForActiveVMNot *int32 `json:"provisioned_cpu_cores_for_active_vm_not,omitempty"`

	// provisioned cpu cores for active vm not in
	ProvisionedCPUCoresForActiveVMNotIn []int32 `json:"provisioned_cpu_cores_for_active_vm_not_in,omitempty"`

	// provisioned cpu cores gt
	ProvisionedCPUCoresGt *int32 `json:"provisioned_cpu_cores_gt,omitempty"`

	// provisioned cpu cores gte
	ProvisionedCPUCoresGte *int32 `json:"provisioned_cpu_cores_gte,omitempty"`

	// provisioned cpu cores in
	ProvisionedCPUCoresIn []int32 `json:"provisioned_cpu_cores_in,omitempty"`

	// provisioned cpu cores lt
	ProvisionedCPUCoresLt *int32 `json:"provisioned_cpu_cores_lt,omitempty"`

	// provisioned cpu cores lte
	ProvisionedCPUCoresLte *int32 `json:"provisioned_cpu_cores_lte,omitempty"`

	// provisioned cpu cores not
	ProvisionedCPUCoresNot *int32 `json:"provisioned_cpu_cores_not,omitempty"`

	// provisioned cpu cores not in
	ProvisionedCPUCoresNotIn []int32 `json:"provisioned_cpu_cores_not_in,omitempty"`

	// provisioned for active vm ratio
	ProvisionedForActiveVMRatio *float64 `json:"provisioned_for_active_vm_ratio,omitempty"`

	// provisioned for active vm ratio gt
	ProvisionedForActiveVMRatioGt *float64 `json:"provisioned_for_active_vm_ratio_gt,omitempty"`

	// provisioned for active vm ratio gte
	ProvisionedForActiveVMRatioGte *float64 `json:"provisioned_for_active_vm_ratio_gte,omitempty"`

	// provisioned for active vm ratio in
	ProvisionedForActiveVMRatioIn []float64 `json:"provisioned_for_active_vm_ratio_in,omitempty"`

	// provisioned for active vm ratio lt
	ProvisionedForActiveVMRatioLt *float64 `json:"provisioned_for_active_vm_ratio_lt,omitempty"`

	// provisioned for active vm ratio lte
	ProvisionedForActiveVMRatioLte *float64 `json:"provisioned_for_active_vm_ratio_lte,omitempty"`

	// provisioned for active vm ratio not
	ProvisionedForActiveVMRatioNot *float64 `json:"provisioned_for_active_vm_ratio_not,omitempty"`

	// provisioned for active vm ratio not in
	ProvisionedForActiveVMRatioNotIn []float64 `json:"provisioned_for_active_vm_ratio_not_in,omitempty"`

	// provisioned memory bytes
	ProvisionedMemoryBytes *float64 `json:"provisioned_memory_bytes,omitempty"`

	// provisioned memory bytes gt
	ProvisionedMemoryBytesGt *float64 `json:"provisioned_memory_bytes_gt,omitempty"`

	// provisioned memory bytes gte
	ProvisionedMemoryBytesGte *float64 `json:"provisioned_memory_bytes_gte,omitempty"`

	// provisioned memory bytes in
	ProvisionedMemoryBytesIn []float64 `json:"provisioned_memory_bytes_in,omitempty"`

	// provisioned memory bytes lt
	ProvisionedMemoryBytesLt *float64 `json:"provisioned_memory_bytes_lt,omitempty"`

	// provisioned memory bytes lte
	ProvisionedMemoryBytesLte *float64 `json:"provisioned_memory_bytes_lte,omitempty"`

	// provisioned memory bytes not
	ProvisionedMemoryBytesNot *float64 `json:"provisioned_memory_bytes_not,omitempty"`

	// provisioned memory bytes not in
	ProvisionedMemoryBytesNotIn []float64 `json:"provisioned_memory_bytes_not_in,omitempty"`

	// provisioned ratio
	ProvisionedRatio *float64 `json:"provisioned_ratio,omitempty"`

	// provisioned ratio gt
	ProvisionedRatioGt *float64 `json:"provisioned_ratio_gt,omitempty"`

	// provisioned ratio gte
	ProvisionedRatioGte *float64 `json:"provisioned_ratio_gte,omitempty"`

	// provisioned ratio in
	ProvisionedRatioIn []float64 `json:"provisioned_ratio_in,omitempty"`

	// provisioned ratio lt
	ProvisionedRatioLt *float64 `json:"provisioned_ratio_lt,omitempty"`

	// provisioned ratio lte
	ProvisionedRatioLte *float64 `json:"provisioned_ratio_lte,omitempty"`

	// provisioned ratio not
	ProvisionedRatioNot *float64 `json:"provisioned_ratio_not,omitempty"`

	// provisioned ratio not in
	ProvisionedRatioNotIn []float64 `json:"provisioned_ratio_not_in,omitempty"`

	// rdma enabled
	RdmaEnabled *bool `json:"rdma_enabled,omitempty"`

	// rdma enabled not
	RdmaEnabledNot *bool `json:"rdma_enabled_not,omitempty"`

	// recover data size
	RecoverDataSize *float64 `json:"recover_data_size,omitempty"`

	// recover data size gt
	RecoverDataSizeGt *float64 `json:"recover_data_size_gt,omitempty"`

	// recover data size gte
	RecoverDataSizeGte *float64 `json:"recover_data_size_gte,omitempty"`

	// recover data size in
	RecoverDataSizeIn []float64 `json:"recover_data_size_in,omitempty"`

	// recover data size lt
	RecoverDataSizeLt *float64 `json:"recover_data_size_lt,omitempty"`

	// recover data size lte
	RecoverDataSizeLte *float64 `json:"recover_data_size_lte,omitempty"`

	// recover data size not
	RecoverDataSizeNot *float64 `json:"recover_data_size_not,omitempty"`

	// recover data size not in
	RecoverDataSizeNotIn []float64 `json:"recover_data_size_not_in,omitempty"`

	// recover speed
	RecoverSpeed *float64 `json:"recover_speed,omitempty"`

	// recover speed gt
	RecoverSpeedGt *float64 `json:"recover_speed_gt,omitempty"`

	// recover speed gte
	RecoverSpeedGte *float64 `json:"recover_speed_gte,omitempty"`

	// recover speed in
	RecoverSpeedIn []float64 `json:"recover_speed_in,omitempty"`

	// recover speed lt
	RecoverSpeedLt *float64 `json:"recover_speed_lt,omitempty"`

	// recover speed lte
	RecoverSpeedLte *float64 `json:"recover_speed_lte,omitempty"`

	// recover speed not
	RecoverSpeedNot *float64 `json:"recover_speed_not,omitempty"`

	// recover speed not in
	RecoverSpeedNotIn []float64 `json:"recover_speed_not_in,omitempty"`

	// reserved cpu cores for system service
	ReservedCPUCoresForSystemService *int32 `json:"reserved_cpu_cores_for_system_service,omitempty"`

	// reserved cpu cores for system service gt
	ReservedCPUCoresForSystemServiceGt *int32 `json:"reserved_cpu_cores_for_system_service_gt,omitempty"`

	// reserved cpu cores for system service gte
	ReservedCPUCoresForSystemServiceGte *int32 `json:"reserved_cpu_cores_for_system_service_gte,omitempty"`

	// reserved cpu cores for system service in
	ReservedCPUCoresForSystemServiceIn []int32 `json:"reserved_cpu_cores_for_system_service_in,omitempty"`

	// reserved cpu cores for system service lt
	ReservedCPUCoresForSystemServiceLt *int32 `json:"reserved_cpu_cores_for_system_service_lt,omitempty"`

	// reserved cpu cores for system service lte
	ReservedCPUCoresForSystemServiceLte *int32 `json:"reserved_cpu_cores_for_system_service_lte,omitempty"`

	// reserved cpu cores for system service not
	ReservedCPUCoresForSystemServiceNot *int32 `json:"reserved_cpu_cores_for_system_service_not,omitempty"`

	// reserved cpu cores for system service not in
	ReservedCPUCoresForSystemServiceNotIn []int32 `json:"reserved_cpu_cores_for_system_service_not_in,omitempty"`

	// running vm num
	RunningVMNum *int32 `json:"running_vm_num,omitempty"`

	// running vm num gt
	RunningVMNumGt *int32 `json:"running_vm_num_gt,omitempty"`

	// running vm num gte
	RunningVMNumGte *int32 `json:"running_vm_num_gte,omitempty"`

	// running vm num in
	RunningVMNumIn []int32 `json:"running_vm_num_in,omitempty"`

	// running vm num lt
	RunningVMNumLt *int32 `json:"running_vm_num_lt,omitempty"`

	// running vm num lte
	RunningVMNumLte *int32 `json:"running_vm_num_lte,omitempty"`

	// running vm num not
	RunningVMNumNot *int32 `json:"running_vm_num_not,omitempty"`

	// running vm num not in
	RunningVMNumNotIn []int32 `json:"running_vm_num_not_in,omitempty"`

	// settings
	Settings interface{} `json:"settings,omitempty"`

	// software edition
	SoftwareEdition interface{} `json:"software_edition,omitempty"`

	// software edition in
	SoftwareEditionIn []SoftwareEdition `json:"software_edition_in,omitempty"`

	// software edition not
	SoftwareEditionNot interface{} `json:"software_edition_not,omitempty"`

	// software edition not in
	SoftwareEditionNotIn []SoftwareEdition `json:"software_edition_not_in,omitempty"`

	// stopped vm num
	StoppedVMNum *int32 `json:"stopped_vm_num,omitempty"`

	// stopped vm num gt
	StoppedVMNumGt *int32 `json:"stopped_vm_num_gt,omitempty"`

	// stopped vm num gte
	StoppedVMNumGte *int32 `json:"stopped_vm_num_gte,omitempty"`

	// stopped vm num in
	StoppedVMNumIn []int32 `json:"stopped_vm_num_in,omitempty"`

	// stopped vm num lt
	StoppedVMNumLt *int32 `json:"stopped_vm_num_lt,omitempty"`

	// stopped vm num lte
	StoppedVMNumLte *int32 `json:"stopped_vm_num_lte,omitempty"`

	// stopped vm num not
	StoppedVMNumNot *int32 `json:"stopped_vm_num_not,omitempty"`

	// stopped vm num not in
	StoppedVMNumNotIn []int32 `json:"stopped_vm_num_not_in,omitempty"`

	// stretch
	Stretch *bool `json:"stretch,omitempty"`

	// stretch not
	StretchNot *bool `json:"stretch_not,omitempty"`

	// suspended vm num
	SuspendedVMNum *int32 `json:"suspended_vm_num,omitempty"`

	// suspended vm num gt
	SuspendedVMNumGt *int32 `json:"suspended_vm_num_gt,omitempty"`

	// suspended vm num gte
	SuspendedVMNumGte *int32 `json:"suspended_vm_num_gte,omitempty"`

	// suspended vm num in
	SuspendedVMNumIn []int32 `json:"suspended_vm_num_in,omitempty"`

	// suspended vm num lt
	SuspendedVMNumLt *int32 `json:"suspended_vm_num_lt,omitempty"`

	// suspended vm num lte
	SuspendedVMNumLte *int32 `json:"suspended_vm_num_lte,omitempty"`

	// suspended vm num not
	SuspendedVMNumNot *int32 `json:"suspended_vm_num_not,omitempty"`

	// suspended vm num not in
	SuspendedVMNumNotIn []int32 `json:"suspended_vm_num_not_in,omitempty"`

	// total cache capacity
	TotalCacheCapacity *float64 `json:"total_cache_capacity,omitempty"`

	// total cache capacity gt
	TotalCacheCapacityGt *float64 `json:"total_cache_capacity_gt,omitempty"`

	// total cache capacity gte
	TotalCacheCapacityGte *float64 `json:"total_cache_capacity_gte,omitempty"`

	// total cache capacity in
	TotalCacheCapacityIn []float64 `json:"total_cache_capacity_in,omitempty"`

	// total cache capacity lt
	TotalCacheCapacityLt *float64 `json:"total_cache_capacity_lt,omitempty"`

	// total cache capacity lte
	TotalCacheCapacityLte *float64 `json:"total_cache_capacity_lte,omitempty"`

	// total cache capacity not
	TotalCacheCapacityNot *float64 `json:"total_cache_capacity_not,omitempty"`

	// total cache capacity not in
	TotalCacheCapacityNotIn []float64 `json:"total_cache_capacity_not_in,omitempty"`

	// total cpu cores
	TotalCPUCores *int32 `json:"total_cpu_cores,omitempty"`

	// total cpu cores gt
	TotalCPUCoresGt *int32 `json:"total_cpu_cores_gt,omitempty"`

	// total cpu cores gte
	TotalCPUCoresGte *int32 `json:"total_cpu_cores_gte,omitempty"`

	// total cpu cores in
	TotalCPUCoresIn []int32 `json:"total_cpu_cores_in,omitempty"`

	// total cpu cores lt
	TotalCPUCoresLt *int32 `json:"total_cpu_cores_lt,omitempty"`

	// total cpu cores lte
	TotalCPUCoresLte *int32 `json:"total_cpu_cores_lte,omitempty"`

	// total cpu cores not
	TotalCPUCoresNot *int32 `json:"total_cpu_cores_not,omitempty"`

	// total cpu cores not in
	TotalCPUCoresNotIn []int32 `json:"total_cpu_cores_not_in,omitempty"`

	// total cpu hz
	TotalCPUHz *float64 `json:"total_cpu_hz,omitempty"`

	// total cpu hz gt
	TotalCPUHzGt *float64 `json:"total_cpu_hz_gt,omitempty"`

	// total cpu hz gte
	TotalCPUHzGte *float64 `json:"total_cpu_hz_gte,omitempty"`

	// total cpu hz in
	TotalCPUHzIn []float64 `json:"total_cpu_hz_in,omitempty"`

	// total cpu hz lt
	TotalCPUHzLt *float64 `json:"total_cpu_hz_lt,omitempty"`

	// total cpu hz lte
	TotalCPUHzLte *float64 `json:"total_cpu_hz_lte,omitempty"`

	// total cpu hz not
	TotalCPUHzNot *float64 `json:"total_cpu_hz_not,omitempty"`

	// total cpu hz not in
	TotalCPUHzNotIn []float64 `json:"total_cpu_hz_not_in,omitempty"`

	// total cpu sockets
	TotalCPUSockets *int32 `json:"total_cpu_sockets,omitempty"`

	// total cpu sockets gt
	TotalCPUSocketsGt *int32 `json:"total_cpu_sockets_gt,omitempty"`

	// total cpu sockets gte
	TotalCPUSocketsGte *int32 `json:"total_cpu_sockets_gte,omitempty"`

	// total cpu sockets in
	TotalCPUSocketsIn []int32 `json:"total_cpu_sockets_in,omitempty"`

	// total cpu sockets lt
	TotalCPUSocketsLt *int32 `json:"total_cpu_sockets_lt,omitempty"`

	// total cpu sockets lte
	TotalCPUSocketsLte *int32 `json:"total_cpu_sockets_lte,omitempty"`

	// total cpu sockets not
	TotalCPUSocketsNot *int32 `json:"total_cpu_sockets_not,omitempty"`

	// total cpu sockets not in
	TotalCPUSocketsNotIn []int32 `json:"total_cpu_sockets_not_in,omitempty"`

	// total data capacity
	TotalDataCapacity *float64 `json:"total_data_capacity,omitempty"`

	// total data capacity gt
	TotalDataCapacityGt *float64 `json:"total_data_capacity_gt,omitempty"`

	// total data capacity gte
	TotalDataCapacityGte *float64 `json:"total_data_capacity_gte,omitempty"`

	// total data capacity in
	TotalDataCapacityIn []float64 `json:"total_data_capacity_in,omitempty"`

	// total data capacity lt
	TotalDataCapacityLt *float64 `json:"total_data_capacity_lt,omitempty"`

	// total data capacity lte
	TotalDataCapacityLte *float64 `json:"total_data_capacity_lte,omitempty"`

	// total data capacity not
	TotalDataCapacityNot *float64 `json:"total_data_capacity_not,omitempty"`

	// total data capacity not in
	TotalDataCapacityNotIn []float64 `json:"total_data_capacity_not_in,omitempty"`

	// total memory bytes
	TotalMemoryBytes *float64 `json:"total_memory_bytes,omitempty"`

	// total memory bytes gt
	TotalMemoryBytesGt *float64 `json:"total_memory_bytes_gt,omitempty"`

	// total memory bytes gte
	TotalMemoryBytesGte *float64 `json:"total_memory_bytes_gte,omitempty"`

	// total memory bytes in
	TotalMemoryBytesIn []float64 `json:"total_memory_bytes_in,omitempty"`

	// total memory bytes lt
	TotalMemoryBytesLt *float64 `json:"total_memory_bytes_lt,omitempty"`

	// total memory bytes lte
	TotalMemoryBytesLte *float64 `json:"total_memory_bytes_lte,omitempty"`

	// total memory bytes not
	TotalMemoryBytesNot *float64 `json:"total_memory_bytes_not,omitempty"`

	// total memory bytes not in
	TotalMemoryBytesNotIn []float64 `json:"total_memory_bytes_not_in,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// type in
	TypeIn []ClusterType `json:"type_in,omitempty"`

	// type not
	TypeNot interface{} `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []ClusterType `json:"type_not_in,omitempty"`

	// upgrade tool version
	UpgradeToolVersion *string `json:"upgrade_tool_version,omitempty"`

	// upgrade tool version contains
	UpgradeToolVersionContains *string `json:"upgrade_tool_version_contains,omitempty"`

	// upgrade tool version ends with
	UpgradeToolVersionEndsWith *string `json:"upgrade_tool_version_ends_with,omitempty"`

	// upgrade tool version gt
	UpgradeToolVersionGt *string `json:"upgrade_tool_version_gt,omitempty"`

	// upgrade tool version gte
	UpgradeToolVersionGte *string `json:"upgrade_tool_version_gte,omitempty"`

	// upgrade tool version in
	UpgradeToolVersionIn []string `json:"upgrade_tool_version_in,omitempty"`

	// upgrade tool version lt
	UpgradeToolVersionLt *string `json:"upgrade_tool_version_lt,omitempty"`

	// upgrade tool version lte
	UpgradeToolVersionLte *string `json:"upgrade_tool_version_lte,omitempty"`

	// upgrade tool version not
	UpgradeToolVersionNot *string `json:"upgrade_tool_version_not,omitempty"`

	// upgrade tool version not contains
	UpgradeToolVersionNotContains *string `json:"upgrade_tool_version_not_contains,omitempty"`

	// upgrade tool version not ends with
	UpgradeToolVersionNotEndsWith *string `json:"upgrade_tool_version_not_ends_with,omitempty"`

	// upgrade tool version not in
	UpgradeToolVersionNotIn []string `json:"upgrade_tool_version_not_in,omitempty"`

	// upgrade tool version not starts with
	UpgradeToolVersionNotStartsWith *string `json:"upgrade_tool_version_not_starts_with,omitempty"`

	// upgrade tool version starts with
	UpgradeToolVersionStartsWith *string `json:"upgrade_tool_version_starts_with,omitempty"`

	// used cpu hz
	UsedCPUHz *float64 `json:"used_cpu_hz,omitempty"`

	// used cpu hz gt
	UsedCPUHzGt *float64 `json:"used_cpu_hz_gt,omitempty"`

	// used cpu hz gte
	UsedCPUHzGte *float64 `json:"used_cpu_hz_gte,omitempty"`

	// used cpu hz in
	UsedCPUHzIn []float64 `json:"used_cpu_hz_in,omitempty"`

	// used cpu hz lt
	UsedCPUHzLt *float64 `json:"used_cpu_hz_lt,omitempty"`

	// used cpu hz lte
	UsedCPUHzLte *float64 `json:"used_cpu_hz_lte,omitempty"`

	// used cpu hz not
	UsedCPUHzNot *float64 `json:"used_cpu_hz_not,omitempty"`

	// used cpu hz not in
	UsedCPUHzNotIn []float64 `json:"used_cpu_hz_not_in,omitempty"`

	// used data space
	UsedDataSpace *float64 `json:"used_data_space,omitempty"`

	// used data space gt
	UsedDataSpaceGt *float64 `json:"used_data_space_gt,omitempty"`

	// used data space gte
	UsedDataSpaceGte *float64 `json:"used_data_space_gte,omitempty"`

	// used data space in
	UsedDataSpaceIn []float64 `json:"used_data_space_in,omitempty"`

	// used data space lt
	UsedDataSpaceLt *float64 `json:"used_data_space_lt,omitempty"`

	// used data space lte
	UsedDataSpaceLte *float64 `json:"used_data_space_lte,omitempty"`

	// used data space not
	UsedDataSpaceNot *float64 `json:"used_data_space_not,omitempty"`

	// used data space not in
	UsedDataSpaceNotIn []float64 `json:"used_data_space_not_in,omitempty"`

	// used memory bytes
	UsedMemoryBytes *float64 `json:"used_memory_bytes,omitempty"`

	// used memory bytes gt
	UsedMemoryBytesGt *float64 `json:"used_memory_bytes_gt,omitempty"`

	// used memory bytes gte
	UsedMemoryBytesGte *float64 `json:"used_memory_bytes_gte,omitempty"`

	// used memory bytes in
	UsedMemoryBytesIn []float64 `json:"used_memory_bytes_in,omitempty"`

	// used memory bytes lt
	UsedMemoryBytesLt *float64 `json:"used_memory_bytes_lt,omitempty"`

	// used memory bytes lte
	UsedMemoryBytesLte *float64 `json:"used_memory_bytes_lte,omitempty"`

	// used memory bytes not
	UsedMemoryBytesNot *float64 `json:"used_memory_bytes_not,omitempty"`

	// used memory bytes not in
	UsedMemoryBytesNotIn []float64 `json:"used_memory_bytes_not_in,omitempty"`

	// username
	Username *string `json:"username,omitempty"`

	// username contains
	UsernameContains *string `json:"username_contains,omitempty"`

	// username ends with
	UsernameEndsWith *string `json:"username_ends_with,omitempty"`

	// username gt
	UsernameGt *string `json:"username_gt,omitempty"`

	// username gte
	UsernameGte *string `json:"username_gte,omitempty"`

	// username in
	UsernameIn []string `json:"username_in,omitempty"`

	// username lt
	UsernameLt *string `json:"username_lt,omitempty"`

	// username lte
	UsernameLte *string `json:"username_lte,omitempty"`

	// username not
	UsernameNot *string `json:"username_not,omitempty"`

	// username not contains
	UsernameNotContains *string `json:"username_not_contains,omitempty"`

	// username not ends with
	UsernameNotEndsWith *string `json:"username_not_ends_with,omitempty"`

	// username not in
	UsernameNotIn []string `json:"username_not_in,omitempty"`

	// username not starts with
	UsernameNotStartsWith *string `json:"username_not_starts_with,omitempty"`

	// username starts with
	UsernameStartsWith *string `json:"username_starts_with,omitempty"`

	// valid data space
	ValidDataSpace *float64 `json:"valid_data_space,omitempty"`

	// valid data space gt
	ValidDataSpaceGt *float64 `json:"valid_data_space_gt,omitempty"`

	// valid data space gte
	ValidDataSpaceGte *float64 `json:"valid_data_space_gte,omitempty"`

	// valid data space in
	ValidDataSpaceIn []float64 `json:"valid_data_space_in,omitempty"`

	// valid data space lt
	ValidDataSpaceLt *float64 `json:"valid_data_space_lt,omitempty"`

	// valid data space lte
	ValidDataSpaceLte *float64 `json:"valid_data_space_lte,omitempty"`

	// valid data space not
	ValidDataSpaceNot *float64 `json:"valid_data_space_not,omitempty"`

	// valid data space not in
	ValidDataSpaceNotIn []float64 `json:"valid_data_space_not_in,omitempty"`

	// vcenter account
	VcenterAccount interface{} `json:"vcenterAccount,omitempty"`

	// vdses every
	VdsesEvery interface{} `json:"vdses_every,omitempty"`

	// vdses none
	VdsesNone interface{} `json:"vdses_none,omitempty"`

	// vdses some
	VdsesSome interface{} `json:"vdses_some,omitempty"`

	// version
	Version *string `json:"version,omitempty"`

	// version contains
	VersionContains *string `json:"version_contains,omitempty"`

	// version ends with
	VersionEndsWith *string `json:"version_ends_with,omitempty"`

	// version gt
	VersionGt *string `json:"version_gt,omitempty"`

	// version gte
	VersionGte *string `json:"version_gte,omitempty"`

	// version in
	VersionIn []string `json:"version_in,omitempty"`

	// version lt
	VersionLt *string `json:"version_lt,omitempty"`

	// version lte
	VersionLte *string `json:"version_lte,omitempty"`

	// version not
	VersionNot *string `json:"version_not,omitempty"`

	// version not contains
	VersionNotContains *string `json:"version_not_contains,omitempty"`

	// version not ends with
	VersionNotEndsWith *string `json:"version_not_ends_with,omitempty"`

	// version not in
	VersionNotIn []string `json:"version_not_in,omitempty"`

	// version not starts with
	VersionNotStartsWith *string `json:"version_not_starts_with,omitempty"`

	// version semantic gt
	VersionSemanticGt *string `json:"version_semantic_gt,omitempty"`

	// version semantic gte
	VersionSemanticGte *string `json:"version_semantic_gte,omitempty"`

	// version semantic lt
	VersionSemanticLt *string `json:"version_semantic_lt,omitempty"`

	// version semantic lte
	VersionSemanticLte *string `json:"version_semantic_lte,omitempty"`

	// version starts with
	VersionStartsWith *string `json:"version_starts_with,omitempty"`

	// vhost enabled
	VhostEnabled *bool `json:"vhost_enabled,omitempty"`

	// vhost enabled not
	VhostEnabledNot *bool `json:"vhost_enabled_not,omitempty"`

	// vm folders every
	VMFoldersEvery interface{} `json:"vm_folders_every,omitempty"`

	// vm folders none
	VMFoldersNone interface{} `json:"vm_folders_none,omitempty"`

	// vm folders some
	VMFoldersSome interface{} `json:"vm_folders_some,omitempty"`

	// vm num
	VMNum *int32 `json:"vm_num,omitempty"`

	// vm num gt
	VMNumGt *int32 `json:"vm_num_gt,omitempty"`

	// vm num gte
	VMNumGte *int32 `json:"vm_num_gte,omitempty"`

	// vm num in
	VMNumIn []int32 `json:"vm_num_in,omitempty"`

	// vm num lt
	VMNumLt *int32 `json:"vm_num_lt,omitempty"`

	// vm num lte
	VMNumLte *int32 `json:"vm_num_lte,omitempty"`

	// vm num not
	VMNumNot *int32 `json:"vm_num_not,omitempty"`

	// vm num not in
	VMNumNotIn []int32 `json:"vm_num_not_in,omitempty"`

	// vm templates every
	VMTemplatesEvery interface{} `json:"vm_templates_every,omitempty"`

	// vm templates none
	VMTemplatesNone interface{} `json:"vm_templates_none,omitempty"`

	// vm templates some
	VMTemplatesSome interface{} `json:"vm_templates_some,omitempty"`

	// vms every
	VmsEvery interface{} `json:"vms_every,omitempty"`

	// vms none
	VmsNone interface{} `json:"vms_none,omitempty"`

	// vms some
	VmsSome interface{} `json:"vms_some,omitempty"`

	// witness
	Witness interface{} `json:"witness,omitempty"`

	// zones every
	ZonesEvery interface{} `json:"zones_every,omitempty"`

	// zones none
	ZonesNone interface{} `json:"zones_none,omitempty"`

	// zones some
	ZonesSome interface{} `json:"zones_some,omitempty"`
}

// Validate validates this cluster where input
func (m *ClusterWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchitectureNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectStateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectStateNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedReasonIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisconnectedReasonNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisorIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervisorNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpModeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpModeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareEditionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateArchitectureIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchitectureIn); i++ {

		if err := m.ArchitectureIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateArchitectureNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchitectureNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ArchitectureNotIn); i++ {

		if err := m.ArchitectureNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateConnectStateIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectStateIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectStateIn); i++ {

		if err := m.ConnectStateIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateConnectStateNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectStateNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectStateNotIn); i++ {

		if err := m.ConnectStateNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateDisconnectedReasonIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DisconnectedReasonIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DisconnectedReasonIn); i++ {

		if err := m.DisconnectedReasonIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disconnected_reason_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateDisconnectedReasonNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.DisconnectedReasonNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.DisconnectedReasonNotIn); i++ {

		if err := m.DisconnectedReasonNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disconnected_reason_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateHypervisorIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervisorIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HypervisorIn); i++ {

		if err := m.HypervisorIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervisor_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateHypervisorNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervisorNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HypervisorNotIn); i++ {

		if err := m.HypervisorNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervisor_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateLicenseTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseTypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseTypeIn); i++ {

		if err := m.LicenseTypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateLicenseTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseTypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseTypeNotIn); i++ {

		if err := m.LicenseTypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateNtpModeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpModeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NtpModeIn); i++ {

		if err := m.NtpModeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp_mode_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateNtpModeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpModeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.NtpModeNotIn); i++ {

		if err := m.NtpModeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp_mode_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateSoftwareEditionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwareEditionIn); i++ {

		if err := m.SoftwareEditionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateSoftwareEditionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareEditionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftwareEditionNotIn); i++ {

		if err := m.SoftwareEditionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this cluster where input based on the context it is used
func (m *ClusterWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArchitectureNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectStateIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectStateNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisconnectedReasonIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisconnectedReasonNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervisorIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervisorNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLicenseTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpModeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpModeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareEditionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateArchitectureIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchitectureIn); i++ {

		if err := m.ArchitectureIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateArchitectureNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArchitectureNotIn); i++ {

		if err := m.ArchitectureNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("architecture_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateConnectStateIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConnectStateIn); i++ {

		if err := m.ConnectStateIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect_state_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateConnectStateNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConnectStateNotIn); i++ {

		if err := m.ConnectStateNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect_state_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateDisconnectedReasonIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DisconnectedReasonIn); i++ {

		if err := m.DisconnectedReasonIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disconnected_reason_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateDisconnectedReasonNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DisconnectedReasonNotIn); i++ {

		if err := m.DisconnectedReasonNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disconnected_reason_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateHypervisorIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HypervisorIn); i++ {

		if err := m.HypervisorIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervisor_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateHypervisorNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HypervisorNotIn); i++ {

		if err := m.HypervisorNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervisor_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateLicenseTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LicenseTypeIn); i++ {

		if err := m.LicenseTypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateLicenseTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LicenseTypeNotIn); i++ {

		if err := m.LicenseTypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("license_type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateNtpModeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NtpModeIn); i++ {

		if err := m.NtpModeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp_mode_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateNtpModeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NtpModeNotIn); i++ {

		if err := m.NtpModeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntp_mode_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateSoftwareEditionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SoftwareEditionIn); i++ {

		if err := m.SoftwareEditionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateSoftwareEditionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SoftwareEditionNotIn); i++ {

		if err := m.SoftwareEditionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_edition_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ClusterWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterWhereInput) UnmarshalBinary(b []byte) error {
	var res ClusterWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
