// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ApplicationType application type
//
// swagger:model ApplicationType
type ApplicationType string

func NewApplicationType(value ApplicationType) *ApplicationType {
	v := value
	return &v
}

const (

	// ApplicationTypeMONITOR captures enum value "MONITOR"
	ApplicationTypeMONITOR ApplicationType = "MONITOR"
)

// for schema
var applicationTypeEnum []interface{}

func init() {
	var res []ApplicationType
	if err := json.Unmarshal([]byte(`["MONITOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		applicationTypeEnum = append(applicationTypeEnum, v)
	}
}

func (m ApplicationType) validateApplicationTypeEnum(path, location string, value ApplicationType) error {
	if err := validate.EnumCase(path, location, value, applicationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this application type
func (m ApplicationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateApplicationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this application type based on context it is used
func (m ApplicationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
