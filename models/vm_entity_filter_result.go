// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMEntityFilterResult Vm entity filter result
//
// swagger:model VmEntityFilterResult
type VMEntityFilterResult struct {

	// entity filter
	// Required: true
	EntityFilter *VMEntityFilterResultEntityFilter `json:"entityFilter"`

	// id
	// Required: true
	ID *string `json:"id"`

	// result
	// Required: true
	Result []float64 `json:"result"`

	// vm
	// Required: true
	VM *VMEntityFilterResultVM `json:"vm"`
}

// Validate validates this Vm entity filter result
func (m *VMEntityFilterResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVM(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMEntityFilterResult) validateEntityFilter(formats strfmt.Registry) error {

	if err := validate.Required("entityFilter", "body", m.EntityFilter); err != nil {
		return err
	}

	if m.EntityFilter != nil {
		if err := m.EntityFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityFilter")
			}
			return err
		}
	}

	return nil
}

func (m *VMEntityFilterResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMEntityFilterResult) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	return nil
}

func (m *VMEntityFilterResult) validateVM(formats strfmt.Registry) error {

	if err := validate.Required("vm", "body", m.VM); err != nil {
		return err
	}

	if m.VM != nil {
		if err := m.VM.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this Vm entity filter result based on the context it is used
func (m *VMEntityFilterResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEntityFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVM(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMEntityFilterResult) contextValidateEntityFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.EntityFilter != nil {
		if err := m.EntityFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityFilter")
			}
			return err
		}
	}

	return nil
}

func (m *VMEntityFilterResult) contextValidateVM(ctx context.Context, formats strfmt.Registry) error {

	if m.VM != nil {
		if err := m.VM.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMEntityFilterResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMEntityFilterResult) UnmarshalBinary(b []byte) error {
	var res VMEntityFilterResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMEntityFilterResultEntityFilter VM entity filter result entity filter
//
// swagger:model VMEntityFilterResultEntityFilter
type VMEntityFilterResultEntityFilter struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM entity filter result entity filter
func (m *VMEntityFilterResultEntityFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMEntityFilterResultEntityFilter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("entityFilter"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMEntityFilterResultEntityFilter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("entityFilter"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM entity filter result entity filter based on context it is used
func (m *VMEntityFilterResultEntityFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMEntityFilterResultEntityFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMEntityFilterResultEntityFilter) UnmarshalBinary(b []byte) error {
	var res VMEntityFilterResultEntityFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMEntityFilterResultVM VM entity filter result VM
//
// swagger:model VMEntityFilterResultVM
type VMEntityFilterResultVM struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this VM entity filter result VM
func (m *VMEntityFilterResultVM) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMEntityFilterResultVM) validateID(formats strfmt.Registry) error {

	if err := validate.Required("vm"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMEntityFilterResultVM) validateName(formats strfmt.Registry) error {

	if err := validate.Required("vm"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this VM entity filter result VM based on context it is used
func (m *VMEntityFilterResultVM) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VMEntityFilterResultVM) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMEntityFilterResultVM) UnmarshalBinary(b []byte) error {
	var res VMEntityFilterResultVM
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
