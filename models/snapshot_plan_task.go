// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotPlanTask snapshot plan task
//
// swagger:model SnapshotPlanTask
type SnapshotPlanTask struct {

	// cluster
	// Required: true
	Cluster *SnapshotPlanTaskCluster `json:"cluster"`

	// end time
	EndTime *string `json:"end_time,omitempty"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// internal
	Internal *bool `json:"internal,omitempty"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// snapshot group
	SnapshotGroup *SnapshotPlanTaskSnapshotGroup `json:"snapshotGroup,omitempty"`

	// snapshot plan
	// Required: true
	SnapshotPlan *SnapshotPlanTaskSnapshotPlan `json:"snapshotPlan"`

	// start time
	// Required: true
	StartTime *string `json:"start_time"`

	// status
	// Required: true
	Status *SnapshotPlanExecuteStatus `json:"status"`

	// type
	// Required: true
	Type *SnapshotPlanTaskType `json:"type"`
}

// Validate validates this snapshot plan task
func (m *SnapshotPlanTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanTask) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanTask) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanTask) validateSnapshotGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotGroup) { // not required
		return nil
	}

	if m.SnapshotGroup != nil {
		if err := m.SnapshotGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotGroup")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) validateSnapshotPlan(formats strfmt.Registry) error {

	if err := validate.Required("snapshotPlan", "body", m.SnapshotPlan); err != nil {
		return err
	}

	if m.SnapshotPlan != nil {
		if err := m.SnapshotPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotPlan")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanTask) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this snapshot plan task based on the context it is used
func (m *SnapshotPlanTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanTask) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) contextValidateSnapshotGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotGroup != nil {
		if err := m.SnapshotGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotGroup")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) contextValidateSnapshotPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotPlan != nil {
		if err := m.SnapshotPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotPlan")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanTask) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlanTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlanTask) UnmarshalBinary(b []byte) error {
	var res SnapshotPlanTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotPlanTaskCluster snapshot plan task cluster
//
// swagger:model SnapshotPlanTaskCluster
type SnapshotPlanTaskCluster struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this snapshot plan task cluster
func (m *SnapshotPlanTaskCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanTaskCluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanTaskCluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot plan task cluster based on context it is used
func (m *SnapshotPlanTaskCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlanTaskCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlanTaskCluster) UnmarshalBinary(b []byte) error {
	var res SnapshotPlanTaskCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotPlanTaskSnapshotGroup snapshot plan task snapshot group
//
// swagger:model SnapshotPlanTaskSnapshotGroup
type SnapshotPlanTaskSnapshotGroup struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this snapshot plan task snapshot group
func (m *SnapshotPlanTaskSnapshotGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanTaskSnapshotGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotGroup"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanTaskSnapshotGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("snapshotGroup"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot plan task snapshot group based on context it is used
func (m *SnapshotPlanTaskSnapshotGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlanTaskSnapshotGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlanTaskSnapshotGroup) UnmarshalBinary(b []byte) error {
	var res SnapshotPlanTaskSnapshotGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SnapshotPlanTaskSnapshotPlan snapshot plan task snapshot plan
//
// swagger:model SnapshotPlanTaskSnapshotPlan
type SnapshotPlanTaskSnapshotPlan struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this snapshot plan task snapshot plan
func (m *SnapshotPlanTaskSnapshotPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanTaskSnapshotPlan) validateID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotPlan"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanTaskSnapshotPlan) validateName(formats strfmt.Registry) error {

	if err := validate.Required("snapshotPlan"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snapshot plan task snapshot plan based on context it is used
func (m *SnapshotPlanTaskSnapshotPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlanTaskSnapshotPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlanTaskSnapshotPlan) UnmarshalBinary(b []byte) error {
	var res SnapshotPlanTaskSnapshotPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
