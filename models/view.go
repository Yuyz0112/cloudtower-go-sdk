// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// View view
//
// swagger:model View
type View struct {

	// cluster
	// Required: true
	Cluster *ViewCluster `json:"cluster"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// graphs
	Graphs []*ViewGraphsItems0 `json:"graphs,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// local id
	// Required: true
	LocalID *string `json:"local_id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// time span
	// Required: true
	TimeSpan *float64 `json:"time_span"`

	// time unit
	// Required: true
	TimeUnit *TimeUnit `json:"time_unit"`
}

// Validate validates this view
func (m *View) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSpan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *View) validateCluster(formats strfmt.Registry) error {

	if err := validate.Required("cluster", "body", m.Cluster); err != nil {
		return err
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *View) validateGraphs(formats strfmt.Registry) error {
	if swag.IsZero(m.Graphs) { // not required
		return nil
	}

	for i := 0; i < len(m.Graphs); i++ {
		if swag.IsZero(m.Graphs[i]) { // not required
			continue
		}

		if m.Graphs[i] != nil {
			if err := m.Graphs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("graphs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *View) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *View) validateLocalID(formats strfmt.Registry) error {

	if err := validate.Required("local_id", "body", m.LocalID); err != nil {
		return err
	}

	return nil
}

func (m *View) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *View) validateTimeSpan(formats strfmt.Registry) error {

	if err := validate.Required("time_span", "body", m.TimeSpan); err != nil {
		return err
	}

	return nil
}

func (m *View) validateTimeUnit(formats strfmt.Registry) error {

	if err := validate.Required("time_unit", "body", m.TimeUnit); err != nil {
		return err
	}

	if err := validate.Required("time_unit", "body", m.TimeUnit); err != nil {
		return err
	}

	if m.TimeUnit != nil {
		if err := m.TimeUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this view based on the context it is used
func (m *View) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGraphs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *View) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *View) contextValidateGraphs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Graphs); i++ {

		if m.Graphs[i] != nil {
			if err := m.Graphs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("graphs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *View) contextValidateTimeUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeUnit != nil {
		if err := m.TimeUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *View) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *View) UnmarshalBinary(b []byte) error {
	var res View
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ViewCluster view cluster
//
// swagger:model ViewCluster
type ViewCluster struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this view cluster
func (m *ViewCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewCluster) validateID(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ViewCluster) validateName(formats strfmt.Registry) error {

	if err := validate.Required("cluster"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this view cluster based on context it is used
func (m *ViewCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewCluster) UnmarshalBinary(b []byte) error {
	var res ViewCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ViewGraphsItems0 view graphs items0
//
// swagger:model ViewGraphsItems0
type ViewGraphsItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this view graphs items0
func (m *ViewGraphsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewGraphsItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this view graphs items0 based on context it is used
func (m *ViewGraphsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewGraphsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewGraphsItems0) UnmarshalBinary(b []byte) error {
	var res ViewGraphsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
