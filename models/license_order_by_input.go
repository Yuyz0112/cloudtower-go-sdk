// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LicenseOrderByInput license order by input
//
// swagger:model LicenseOrderByInput
type LicenseOrderByInput string

func NewLicenseOrderByInput(value LicenseOrderByInput) *LicenseOrderByInput {
	v := value
	return &v
}

const (

	// LicenseOrderByInputCreatedAtASC captures enum value "createdAt_ASC"
	LicenseOrderByInputCreatedAtASC LicenseOrderByInput = "createdAt_ASC"

	// LicenseOrderByInputCreatedAtDESC captures enum value "createdAt_DESC"
	LicenseOrderByInputCreatedAtDESC LicenseOrderByInput = "createdAt_DESC"

	// LicenseOrderByInputExpireDateASC captures enum value "expire_date_ASC"
	LicenseOrderByInputExpireDateASC LicenseOrderByInput = "expire_date_ASC"

	// LicenseOrderByInputExpireDateDESC captures enum value "expire_date_DESC"
	LicenseOrderByInputExpireDateDESC LicenseOrderByInput = "expire_date_DESC"

	// LicenseOrderByInputIDASC captures enum value "id_ASC"
	LicenseOrderByInputIDASC LicenseOrderByInput = "id_ASC"

	// LicenseOrderByInputIDDESC captures enum value "id_DESC"
	LicenseOrderByInputIDDESC LicenseOrderByInput = "id_DESC"

	// LicenseOrderByInputLicenseSerialASC captures enum value "license_serial_ASC"
	LicenseOrderByInputLicenseSerialASC LicenseOrderByInput = "license_serial_ASC"

	// LicenseOrderByInputLicenseSerialDESC captures enum value "license_serial_DESC"
	LicenseOrderByInputLicenseSerialDESC LicenseOrderByInput = "license_serial_DESC"

	// LicenseOrderByInputMaintenanceEndDateASC captures enum value "maintenance_end_date_ASC"
	LicenseOrderByInputMaintenanceEndDateASC LicenseOrderByInput = "maintenance_end_date_ASC"

	// LicenseOrderByInputMaintenanceEndDateDESC captures enum value "maintenance_end_date_DESC"
	LicenseOrderByInputMaintenanceEndDateDESC LicenseOrderByInput = "maintenance_end_date_DESC"

	// LicenseOrderByInputMaintenanceStartDateASC captures enum value "maintenance_start_date_ASC"
	LicenseOrderByInputMaintenanceStartDateASC LicenseOrderByInput = "maintenance_start_date_ASC"

	// LicenseOrderByInputMaintenanceStartDateDESC captures enum value "maintenance_start_date_DESC"
	LicenseOrderByInputMaintenanceStartDateDESC LicenseOrderByInput = "maintenance_start_date_DESC"

	// LicenseOrderByInputMaxChunkNumASC captures enum value "max_chunk_num_ASC"
	LicenseOrderByInputMaxChunkNumASC LicenseOrderByInput = "max_chunk_num_ASC"

	// LicenseOrderByInputMaxChunkNumDESC captures enum value "max_chunk_num_DESC"
	LicenseOrderByInputMaxChunkNumDESC LicenseOrderByInput = "max_chunk_num_DESC"

	// LicenseOrderByInputMaxClusterNumASC captures enum value "max_cluster_num_ASC"
	LicenseOrderByInputMaxClusterNumASC LicenseOrderByInput = "max_cluster_num_ASC"

	// LicenseOrderByInputMaxClusterNumDESC captures enum value "max_cluster_num_DESC"
	LicenseOrderByInputMaxClusterNumDESC LicenseOrderByInput = "max_cluster_num_DESC"

	// LicenseOrderByInputSignDateASC captures enum value "sign_date_ASC"
	LicenseOrderByInputSignDateASC LicenseOrderByInput = "sign_date_ASC"

	// LicenseOrderByInputSignDateDESC captures enum value "sign_date_DESC"
	LicenseOrderByInputSignDateDESC LicenseOrderByInput = "sign_date_DESC"

	// LicenseOrderByInputSoftwareEditionASC captures enum value "software_edition_ASC"
	LicenseOrderByInputSoftwareEditionASC LicenseOrderByInput = "software_edition_ASC"

	// LicenseOrderByInputSoftwareEditionDESC captures enum value "software_edition_DESC"
	LicenseOrderByInputSoftwareEditionDESC LicenseOrderByInput = "software_edition_DESC"

	// LicenseOrderByInputTypeASC captures enum value "type_ASC"
	LicenseOrderByInputTypeASC LicenseOrderByInput = "type_ASC"

	// LicenseOrderByInputTypeDESC captures enum value "type_DESC"
	LicenseOrderByInputTypeDESC LicenseOrderByInput = "type_DESC"

	// LicenseOrderByInputUpdatedAtASC captures enum value "updatedAt_ASC"
	LicenseOrderByInputUpdatedAtASC LicenseOrderByInput = "updatedAt_ASC"

	// LicenseOrderByInputUpdatedAtDESC captures enum value "updatedAt_DESC"
	LicenseOrderByInputUpdatedAtDESC LicenseOrderByInput = "updatedAt_DESC"
)

// for schema
var licenseOrderByInputEnum []interface{}

func init() {
	var res []LicenseOrderByInput
	if err := json.Unmarshal([]byte(`["createdAt_ASC","createdAt_DESC","expire_date_ASC","expire_date_DESC","id_ASC","id_DESC","license_serial_ASC","license_serial_DESC","maintenance_end_date_ASC","maintenance_end_date_DESC","maintenance_start_date_ASC","maintenance_start_date_DESC","max_chunk_num_ASC","max_chunk_num_DESC","max_cluster_num_ASC","max_cluster_num_DESC","sign_date_ASC","sign_date_DESC","software_edition_ASC","software_edition_DESC","type_ASC","type_DESC","updatedAt_ASC","updatedAt_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseOrderByInputEnum = append(licenseOrderByInputEnum, v)
	}
}

func (m LicenseOrderByInput) validateLicenseOrderByInputEnum(path, location string, value LicenseOrderByInput) error {
	if err := validate.EnumCase(path, location, value, licenseOrderByInputEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this license order by input
func (m LicenseOrderByInput) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLicenseOrderByInputEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this license order by input based on context it is used
func (m LicenseOrderByInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
