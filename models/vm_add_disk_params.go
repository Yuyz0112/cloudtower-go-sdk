// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMAddDiskParams Vm add disk params
//
// swagger:model VmAddDiskParams
type VMAddDiskParams struct {

	// vm disks
	// Required: true
	VMDisks *VMAddDiskParamsVMDisks `json:"vm_disks"`

	// vm id
	// Required: true
	VMID *string `json:"vm_id"`
}

// Validate validates this Vm add disk params
func (m *VMAddDiskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVMDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMAddDiskParams) validateVMDisks(formats strfmt.Registry) error {

	if err := validate.Required("vm_disks", "body", m.VMDisks); err != nil {
		return err
	}

	if m.VMDisks != nil {
		if err := m.VMDisks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_disks")
			}
			return err
		}
	}

	return nil
}

func (m *VMAddDiskParams) validateVMID(formats strfmt.Registry) error {

	if err := validate.Required("vm_id", "body", m.VMID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this Vm add disk params based on the context it is used
func (m *VMAddDiskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVMDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMAddDiskParams) contextValidateVMDisks(ctx context.Context, formats strfmt.Registry) error {

	if m.VMDisks != nil {
		if err := m.VMDisks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vm_disks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMAddDiskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMAddDiskParams) UnmarshalBinary(b []byte) error {
	var res VMAddDiskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VMAddDiskParamsVMDisks VM add disk params VM disks
//
// swagger:model VMAddDiskParamsVMDisks
type VMAddDiskParamsVMDisks struct {

	// mount disks
	MountDisks MountDisksParams `json:"mount_disks,omitempty"`

	// mount new create disks
	MountNewCreateDisks MountNewCreateDisksParams `json:"mount_new_create_disks,omitempty"`
}

// Validate validates this VM add disk params VM disks
func (m *VMAddDiskParamsVMDisks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountNewCreateDisks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMAddDiskParamsVMDisks) validateMountDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.MountDisks) { // not required
		return nil
	}

	if err := m.MountDisks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_disks" + "." + "mount_disks")
		}
		return err
	}

	return nil
}

func (m *VMAddDiskParamsVMDisks) validateMountNewCreateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.MountNewCreateDisks) { // not required
		return nil
	}

	if err := m.MountNewCreateDisks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_disks" + "." + "mount_new_create_disks")
		}
		return err
	}

	return nil
}

// ContextValidate validate this VM add disk params VM disks based on the context it is used
func (m *VMAddDiskParamsVMDisks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMountDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountNewCreateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMAddDiskParamsVMDisks) contextValidateMountDisks(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MountDisks.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_disks" + "." + "mount_disks")
		}
		return err
	}

	return nil
}

func (m *VMAddDiskParamsVMDisks) contextValidateMountNewCreateDisks(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MountNewCreateDisks.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vm_disks" + "." + "mount_new_create_disks")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMAddDiskParamsVMDisks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMAddDiskParamsVMDisks) UnmarshalBinary(b []byte) error {
	var res VMAddDiskParamsVMDisks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
