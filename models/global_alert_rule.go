// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalAlertRule global alert rule
//
// swagger:model GlobalAlertRule
type GlobalAlertRule struct {

	// alert rules
	AlertRules []*GlobalAlertRuleAlertRulesItems0 `json:"alert_rules,omitempty"`

	// boolean
	// Required: true
	Boolean *bool `json:"boolean"`

	// cause
	// Required: true
	Cause *string `json:"cause"`

	// default thresholds
	// Required: true
	DefaultThresholds []*GlobalAlertRuleDefaultThresholdsItems0 `json:"default_thresholds"`

	// disabled
	// Required: true
	Disabled *bool `json:"disabled"`

	// id
	// Required: true
	ID *string `json:"id"`

	// impact
	// Required: true
	Impact *string `json:"impact"`

	// message
	// Required: true
	Message *string `json:"message"`

	// name
	// Required: true
	Name *string `json:"name"`

	// object
	Object interface{} `json:"object,omitempty"`

	// operator
	// Required: true
	Operator *string `json:"operator"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// thresholds
	// Required: true
	Thresholds []*GlobalAlertRuleThresholdsItems0 `json:"thresholds"`

	// unit
	// Required: true
	Unit *AlertRuleUnit `json:"unit"`
}

// Validate validates this global alert rule
func (m *GlobalAlertRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoolean(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultThresholds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalAlertRule) validateAlertRules(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertRules) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertRules); i++ {
		if swag.IsZero(m.AlertRules[i]) { // not required
			continue
		}

		if m.AlertRules[i] != nil {
			if err := m.AlertRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) validateBoolean(formats strfmt.Registry) error {

	if err := validate.Required("boolean", "body", m.Boolean); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateCause(formats strfmt.Registry) error {

	if err := validate.Required("cause", "body", m.Cause); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateDefaultThresholds(formats strfmt.Registry) error {

	if err := validate.Required("default_thresholds", "body", m.DefaultThresholds); err != nil {
		return err
	}

	for i := 0; i < len(m.DefaultThresholds); i++ {
		if swag.IsZero(m.DefaultThresholds[i]) { // not required
			continue
		}

		if m.DefaultThresholds[i] != nil {
			if err := m.DefaultThresholds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("default_thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) validateDisabled(formats strfmt.Registry) error {

	if err := validate.Required("disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *GlobalAlertRule) validateThresholds(formats strfmt.Registry) error {

	if err := validate.Required("thresholds", "body", m.Thresholds); err != nil {
		return err
	}

	for i := 0; i < len(m.Thresholds); i++ {
		if swag.IsZero(m.Thresholds[i]) { // not required
			continue
		}

		if m.Thresholds[i] != nil {
			if err := m.Thresholds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this global alert rule based on the context it is used
func (m *GlobalAlertRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalAlertRule) contextValidateAlertRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertRules); i++ {

		if m.AlertRules[i] != nil {
			if err := m.AlertRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) contextValidateDefaultThresholds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DefaultThresholds); i++ {

		if m.DefaultThresholds[i] != nil {
			if err := m.DefaultThresholds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("default_thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) contextValidateThresholds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Thresholds); i++ {

		if m.Thresholds[i] != nil {
			if err := m.Thresholds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("thresholds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalAlertRule) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {
		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GlobalAlertRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalAlertRule) UnmarshalBinary(b []byte) error {
	var res GlobalAlertRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GlobalAlertRuleAlertRulesItems0 global alert rule alert rules items0
//
// swagger:model GlobalAlertRuleAlertRulesItems0
type GlobalAlertRuleAlertRulesItems0 struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this global alert rule alert rules items0
func (m *GlobalAlertRuleAlertRulesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalAlertRuleAlertRulesItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this global alert rule alert rules items0 based on context it is used
func (m *GlobalAlertRuleAlertRulesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GlobalAlertRuleAlertRulesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalAlertRuleAlertRulesItems0) UnmarshalBinary(b []byte) error {
	var res GlobalAlertRuleAlertRulesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GlobalAlertRuleDefaultThresholdsItems0 global alert rule default thresholds items0
//
// swagger:model GlobalAlertRuleDefaultThresholdsItems0
type GlobalAlertRuleDefaultThresholdsItems0 struct {

	// quantile
	Quantile *float64 `json:"quantile,omitempty"`

	// severity
	Severity interface{} `json:"severity,omitempty"`

	// value
	Value *float64 `json:"value,omitempty"`
}

// Validate validates this global alert rule default thresholds items0
func (m *GlobalAlertRuleDefaultThresholdsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this global alert rule default thresholds items0 based on context it is used
func (m *GlobalAlertRuleDefaultThresholdsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GlobalAlertRuleDefaultThresholdsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalAlertRuleDefaultThresholdsItems0) UnmarshalBinary(b []byte) error {
	var res GlobalAlertRuleDefaultThresholdsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GlobalAlertRuleThresholdsItems0 global alert rule thresholds items0
//
// swagger:model GlobalAlertRuleThresholdsItems0
type GlobalAlertRuleThresholdsItems0 struct {

	// quantile
	Quantile *float64 `json:"quantile,omitempty"`

	// severity
	Severity interface{} `json:"severity,omitempty"`

	// value
	Value *float64 `json:"value,omitempty"`
}

// Validate validates this global alert rule thresholds items0
func (m *GlobalAlertRuleThresholdsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this global alert rule thresholds items0 based on context it is used
func (m *GlobalAlertRuleThresholdsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GlobalAlertRuleThresholdsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalAlertRuleThresholdsItems0) UnmarshalBinary(b []byte) error {
	var res GlobalAlertRuleThresholdsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
