// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterImageOrderByInput cluster image order by input
//
// swagger:model ClusterImageOrderByInput
type ClusterImageOrderByInput string

func NewClusterImageOrderByInput(value ClusterImageOrderByInput) *ClusterImageOrderByInput {
	v := value
	return &v
}

const (

	// ClusterImageOrderByInputCreatedAtASC captures enum value "createdAt_ASC"
	ClusterImageOrderByInputCreatedAtASC ClusterImageOrderByInput = "createdAt_ASC"

	// ClusterImageOrderByInputCreatedAtDESC captures enum value "createdAt_DESC"
	ClusterImageOrderByInputCreatedAtDESC ClusterImageOrderByInput = "createdAt_DESC"

	// ClusterImageOrderByInputEntityAsyncStatusASC captures enum value "entityAsyncStatus_ASC"
	ClusterImageOrderByInputEntityAsyncStatusASC ClusterImageOrderByInput = "entityAsyncStatus_ASC"

	// ClusterImageOrderByInputEntityAsyncStatusDESC captures enum value "entityAsyncStatus_DESC"
	ClusterImageOrderByInputEntityAsyncStatusDESC ClusterImageOrderByInput = "entityAsyncStatus_DESC"

	// ClusterImageOrderByInputIDASC captures enum value "id_ASC"
	ClusterImageOrderByInputIDASC ClusterImageOrderByInput = "id_ASC"

	// ClusterImageOrderByInputIDDESC captures enum value "id_DESC"
	ClusterImageOrderByInputIDDESC ClusterImageOrderByInput = "id_DESC"

	// ClusterImageOrderByInputMetaNameASC captures enum value "meta_name_ASC"
	ClusterImageOrderByInputMetaNameASC ClusterImageOrderByInput = "meta_name_ASC"

	// ClusterImageOrderByInputMetaNameDESC captures enum value "meta_name_DESC"
	ClusterImageOrderByInputMetaNameDESC ClusterImageOrderByInput = "meta_name_DESC"

	// ClusterImageOrderByInputMetaSizeASC captures enum value "meta_size_ASC"
	ClusterImageOrderByInputMetaSizeASC ClusterImageOrderByInput = "meta_size_ASC"

	// ClusterImageOrderByInputMetaSizeDESC captures enum value "meta_size_DESC"
	ClusterImageOrderByInputMetaSizeDESC ClusterImageOrderByInput = "meta_size_DESC"

	// ClusterImageOrderByInputNameASC captures enum value "name_ASC"
	ClusterImageOrderByInputNameASC ClusterImageOrderByInput = "name_ASC"

	// ClusterImageOrderByInputNameDESC captures enum value "name_DESC"
	ClusterImageOrderByInputNameDESC ClusterImageOrderByInput = "name_DESC"

	// ClusterImageOrderByInputSizeASC captures enum value "size_ASC"
	ClusterImageOrderByInputSizeASC ClusterImageOrderByInput = "size_ASC"

	// ClusterImageOrderByInputSizeDESC captures enum value "size_DESC"
	ClusterImageOrderByInputSizeDESC ClusterImageOrderByInput = "size_DESC"

	// ClusterImageOrderByInputUpdatedAtASC captures enum value "updatedAt_ASC"
	ClusterImageOrderByInputUpdatedAtASC ClusterImageOrderByInput = "updatedAt_ASC"

	// ClusterImageOrderByInputUpdatedAtDESC captures enum value "updatedAt_DESC"
	ClusterImageOrderByInputUpdatedAtDESC ClusterImageOrderByInput = "updatedAt_DESC"

	// ClusterImageOrderByInputVersionASC captures enum value "version_ASC"
	ClusterImageOrderByInputVersionASC ClusterImageOrderByInput = "version_ASC"

	// ClusterImageOrderByInputVersionDESC captures enum value "version_DESC"
	ClusterImageOrderByInputVersionDESC ClusterImageOrderByInput = "version_DESC"
)

// for schema
var clusterImageOrderByInputEnum []interface{}

func init() {
	var res []ClusterImageOrderByInput
	if err := json.Unmarshal([]byte(`["createdAt_ASC","createdAt_DESC","entityAsyncStatus_ASC","entityAsyncStatus_DESC","id_ASC","id_DESC","meta_name_ASC","meta_name_DESC","meta_size_ASC","meta_size_DESC","name_ASC","name_DESC","size_ASC","size_DESC","updatedAt_ASC","updatedAt_DESC","version_ASC","version_DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterImageOrderByInputEnum = append(clusterImageOrderByInputEnum, v)
	}
}

func (m ClusterImageOrderByInput) validateClusterImageOrderByInputEnum(path, location string, value ClusterImageOrderByInput) error {
	if err := validate.EnumCase(path, location, value, clusterImageOrderByInputEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster image order by input
func (m ClusterImageOrderByInput) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterImageOrderByInputEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster image order by input based on context it is used
func (m ClusterImageOrderByInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
