// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NestedEverouteClusterControllerStatus nested everoute cluster controller status
//
// swagger:model NestedEverouteClusterControllerStatus
type NestedEverouteClusterControllerStatus struct {

	// current number
	// Required: true
	CurrentNumber *int32 `json:"currentNumber"`

	// elf cluster number
	// Required: true
	ElfClusterNumber *int32 `json:"elfClusterNumber"`

	// expect number
	// Required: true
	ExpectNumber *int32 `json:"expectNumber"`

	// instances
	Instances []*NestedEverouteControllerStatus `json:"instances,omitempty"`

	// number health
	// Required: true
	NumberHealth *int32 `json:"numberHealth"`
}

// Validate validates this nested everoute cluster controller status
func (m *NestedEverouteClusterControllerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElfClusterNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberHealth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteClusterControllerStatus) validateCurrentNumber(formats strfmt.Registry) error {

	if err := validate.Required("currentNumber", "body", m.CurrentNumber); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterControllerStatus) validateElfClusterNumber(formats strfmt.Registry) error {

	if err := validate.Required("elfClusterNumber", "body", m.ElfClusterNumber); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterControllerStatus) validateExpectNumber(formats strfmt.Registry) error {

	if err := validate.Required("expectNumber", "body", m.ExpectNumber); err != nil {
		return err
	}

	return nil
}

func (m *NestedEverouteClusterControllerStatus) validateInstances(formats strfmt.Registry) error {
	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NestedEverouteClusterControllerStatus) validateNumberHealth(formats strfmt.Registry) error {

	if err := validate.Required("numberHealth", "body", m.NumberHealth); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this nested everoute cluster controller status based on the context it is used
func (m *NestedEverouteClusterControllerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstances(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NestedEverouteClusterControllerStatus) contextValidateInstances(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Instances); i++ {

		if m.Instances[i] != nil {
			if err := m.Instances[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NestedEverouteClusterControllerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NestedEverouteClusterControllerStatus) UnmarshalBinary(b []byte) error {
	var res NestedEverouteClusterControllerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
