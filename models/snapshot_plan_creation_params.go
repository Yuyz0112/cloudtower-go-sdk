// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotPlanCreationParams snapshot plan creation params
//
// swagger:model SnapshotPlanCreationParams
type SnapshotPlanCreationParams struct {

	// cluster id
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// end time
	EndTime string `json:"end_time,omitempty"`

	// exec h m
	Exechm string `json:"exec_h_m,omitempty"`

	// execute intervals
	// Required: true
	ExecuteIntervals []float64 `json:"execute_intervals"`

	// execute plan type
	// Required: true
	ExecutePlanType *SnapshotPlanExecuteType `json:"execute_plan_type"`

	// name
	// Required: true
	Name *string `json:"name"`

	// remain snapshot num
	// Required: true
	RemainSnapshotNum *float64 `json:"remain_snapshot_num"`

	// start time
	// Required: true
	StartTime *string `json:"start_time"`

	// vm ids
	// Required: true
	VMIds []string `json:"vm_ids"`
}

// Validate validates this snapshot plan creation params
func (m *SnapshotPlanCreationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecuteIntervals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutePlanType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemainSnapshotNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanCreationParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanCreationParams) validateExecuteIntervals(formats strfmt.Registry) error {

	if err := validate.Required("execute_intervals", "body", m.ExecuteIntervals); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanCreationParams) validateExecutePlanType(formats strfmt.Registry) error {

	if err := validate.Required("execute_plan_type", "body", m.ExecutePlanType); err != nil {
		return err
	}

	if err := validate.Required("execute_plan_type", "body", m.ExecutePlanType); err != nil {
		return err
	}

	if m.ExecutePlanType != nil {
		if err := m.ExecutePlanType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type")
			}
			return err
		}
	}

	return nil
}

func (m *SnapshotPlanCreationParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanCreationParams) validateRemainSnapshotNum(formats strfmt.Registry) error {

	if err := validate.Required("remain_snapshot_num", "body", m.RemainSnapshotNum); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanCreationParams) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPlanCreationParams) validateVMIds(formats strfmt.Registry) error {

	if err := validate.Required("vm_ids", "body", m.VMIds); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this snapshot plan creation params based on the context it is used
func (m *SnapshotPlanCreationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutePlanType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPlanCreationParams) contextValidateExecutePlanType(ctx context.Context, formats strfmt.Registry) error {

	if m.ExecutePlanType != nil {
		if err := m.ExecutePlanType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execute_plan_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPlanCreationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPlanCreationParams) UnmarshalBinary(b []byte) error {
	var res SnapshotPlanCreationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
