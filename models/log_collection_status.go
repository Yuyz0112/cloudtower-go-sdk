// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogCollectionStatus log collection status
//
// swagger:model LogCollectionStatus
type LogCollectionStatus string

func NewLogCollectionStatus(value LogCollectionStatus) *LogCollectionStatus {
	v := value
	return &v
}

const (

	// LogCollectionStatusEXECUTING captures enum value "EXECUTING"
	LogCollectionStatusEXECUTING LogCollectionStatus = "EXECUTING"

	// LogCollectionStatusFAILED captures enum value "FAILED"
	LogCollectionStatusFAILED LogCollectionStatus = "FAILED"

	// LogCollectionStatusSTOPPING captures enum value "STOPPING"
	LogCollectionStatusSTOPPING LogCollectionStatus = "STOPPING"

	// LogCollectionStatusSUCCESSED captures enum value "SUCCESSED"
	LogCollectionStatusSUCCESSED LogCollectionStatus = "SUCCESSED"
)

// for schema
var logCollectionStatusEnum []interface{}

func init() {
	var res []LogCollectionStatus
	if err := json.Unmarshal([]byte(`["EXECUTING","FAILED","STOPPING","SUCCESSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logCollectionStatusEnum = append(logCollectionStatusEnum, v)
	}
}

func (m LogCollectionStatus) validateLogCollectionStatusEnum(path, location string, value LogCollectionStatus) error {
	if err := validate.EnumCase(path, location, value, logCollectionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log collection status
func (m LogCollectionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogCollectionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log collection status based on context it is used
func (m LogCollectionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
