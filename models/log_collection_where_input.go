// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogCollectionWhereInput log collection where input
//
// swagger:model LogCollectionWhereInput
type LogCollectionWhereInput struct {

	// a n d
	AND []*LogCollectionWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*LogCollectionWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*LogCollectionWhereInput `json:"OR,omitempty"`

	// cluster
	Cluster interface{} `json:"cluster,omitempty"`

	// hosts every
	HostsEvery interface{} `json:"hosts_every,omitempty"`

	// hosts none
	HostsNone interface{} `json:"hosts_none,omitempty"`

	// hosts some
	HostsSome interface{} `json:"hosts_some,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// log ended at
	LogEndedAt *string `json:"log_ended_at,omitempty"`

	// log ended at gt
	LogEndedAtGt *string `json:"log_ended_at_gt,omitempty"`

	// log ended at gte
	LogEndedAtGte *string `json:"log_ended_at_gte,omitempty"`

	// log ended at in
	LogEndedAtIn []string `json:"log_ended_at_in,omitempty"`

	// log ended at lt
	LogEndedAtLt *string `json:"log_ended_at_lt,omitempty"`

	// log ended at lte
	LogEndedAtLte *string `json:"log_ended_at_lte,omitempty"`

	// log ended at not
	LogEndedAtNot *string `json:"log_ended_at_not,omitempty"`

	// log ended at not in
	LogEndedAtNotIn []string `json:"log_ended_at_not_in,omitempty"`

	// log started at
	LogStartedAt *string `json:"log_started_at,omitempty"`

	// log started at gt
	LogStartedAtGt *string `json:"log_started_at_gt,omitempty"`

	// log started at gte
	LogStartedAtGte *string `json:"log_started_at_gte,omitempty"`

	// log started at in
	LogStartedAtIn []string `json:"log_started_at_in,omitempty"`

	// log started at lt
	LogStartedAtLt *string `json:"log_started_at_lt,omitempty"`

	// log started at lte
	LogStartedAtLte *string `json:"log_started_at_lte,omitempty"`

	// log started at not
	LogStartedAtNot *string `json:"log_started_at_not,omitempty"`

	// log started at not in
	LogStartedAtNotIn []string `json:"log_started_at_not_in,omitempty"`

	// owner
	Owner *string `json:"owner,omitempty"`

	// owner contains
	OwnerContains *string `json:"owner_contains,omitempty"`

	// owner ends with
	OwnerEndsWith *string `json:"owner_ends_with,omitempty"`

	// owner gt
	OwnerGt *string `json:"owner_gt,omitempty"`

	// owner gte
	OwnerGte *string `json:"owner_gte,omitempty"`

	// owner in
	OwnerIn []string `json:"owner_in,omitempty"`

	// owner lt
	OwnerLt *string `json:"owner_lt,omitempty"`

	// owner lte
	OwnerLte *string `json:"owner_lte,omitempty"`

	// owner not
	OwnerNot *string `json:"owner_not,omitempty"`

	// owner not contains
	OwnerNotContains *string `json:"owner_not_contains,omitempty"`

	// owner not ends with
	OwnerNotEndsWith *string `json:"owner_not_ends_with,omitempty"`

	// owner not in
	OwnerNotIn []string `json:"owner_not_in,omitempty"`

	// owner not starts with
	OwnerNotStartsWith *string `json:"owner_not_starts_with,omitempty"`

	// owner starts with
	OwnerStartsWith *string `json:"owner_starts_with,omitempty"`

	// path
	Path *string `json:"path,omitempty"`

	// path contains
	PathContains *string `json:"path_contains,omitempty"`

	// path ends with
	PathEndsWith *string `json:"path_ends_with,omitempty"`

	// path gt
	PathGt *string `json:"path_gt,omitempty"`

	// path gte
	PathGte *string `json:"path_gte,omitempty"`

	// path in
	PathIn []string `json:"path_in,omitempty"`

	// path lt
	PathLt *string `json:"path_lt,omitempty"`

	// path lte
	PathLte *string `json:"path_lte,omitempty"`

	// path not
	PathNot *string `json:"path_not,omitempty"`

	// path not contains
	PathNotContains *string `json:"path_not_contains,omitempty"`

	// path not ends with
	PathNotEndsWith *string `json:"path_not_ends_with,omitempty"`

	// path not in
	PathNotIn []string `json:"path_not_in,omitempty"`

	// path not starts with
	PathNotStartsWith *string `json:"path_not_starts_with,omitempty"`

	// path starts with
	PathStartsWith *string `json:"path_starts_with,omitempty"`

	// progress
	Progress *float64 `json:"progress,omitempty"`

	// progress gt
	ProgressGt *float64 `json:"progress_gt,omitempty"`

	// progress gte
	ProgressGte *float64 `json:"progress_gte,omitempty"`

	// progress in
	ProgressIn []float64 `json:"progress_in,omitempty"`

	// progress lt
	ProgressLt *float64 `json:"progress_lt,omitempty"`

	// progress lte
	ProgressLte *float64 `json:"progress_lte,omitempty"`

	// progress not
	ProgressNot *float64 `json:"progress_not,omitempty"`

	// progress not in
	ProgressNotIn []float64 `json:"progress_not_in,omitempty"`

	// size
	Size *float64 `json:"size,omitempty"`

	// size gt
	SizeGt *float64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *float64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []float64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *float64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *float64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *float64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []float64 `json:"size_not_in,omitempty"`

	// started at
	StartedAt *string `json:"started_at,omitempty"`

	// started at gt
	StartedAtGt *string `json:"started_at_gt,omitempty"`

	// started at gte
	StartedAtGte *string `json:"started_at_gte,omitempty"`

	// started at in
	StartedAtIn []string `json:"started_at_in,omitempty"`

	// started at lt
	StartedAtLt *string `json:"started_at_lt,omitempty"`

	// started at lte
	StartedAtLte *string `json:"started_at_lte,omitempty"`

	// started at not
	StartedAtNot *string `json:"started_at_not,omitempty"`

	// started at not in
	StartedAtNotIn []string `json:"started_at_not_in,omitempty"`

	// status
	Status interface{} `json:"status,omitempty"`

	// status in
	StatusIn []LogCollectionStatus `json:"status_in,omitempty"`

	// status not
	StatusNot interface{} `json:"status_not,omitempty"`

	// status not in
	StatusNotIn []LogCollectionStatus `json:"status_not_in,omitempty"`
}

// Validate validates this log collection where input
func (m *LogCollectionWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogCollectionWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) validateStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this log collection where input based on the context it is used
func (m *LogCollectionWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogCollectionWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusIn); i++ {

		if err := m.StatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LogCollectionWhereInput) contextValidateStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StatusNotIn); i++ {

		if err := m.StatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogCollectionWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogCollectionWhereInput) UnmarshalBinary(b []byte) error {
	var res LogCollectionWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
