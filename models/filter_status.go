// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FilterStatus filter status
//
// swagger:model FilterStatus
type FilterStatus string

func NewFilterStatus(value FilterStatus) *FilterStatus {
	v := value
	return &v
}

const (

	// FilterStatusEXECUTING captures enum value "EXECUTING"
	FilterStatusEXECUTING FilterStatus = "EXECUTING"

	// FilterStatusFAILED captures enum value "FAILED"
	FilterStatusFAILED FilterStatus = "FAILED"

	// FilterStatusINITIALIZING captures enum value "INITIALIZING"
	FilterStatusINITIALIZING FilterStatus = "INITIALIZING"

	// FilterStatusPARTIALSUCCESSED captures enum value "PARTIAL_SUCCESSED"
	FilterStatusPARTIALSUCCESSED FilterStatus = "PARTIAL_SUCCESSED"

	// FilterStatusSUCCESSED captures enum value "SUCCESSED"
	FilterStatusSUCCESSED FilterStatus = "SUCCESSED"
)

// for schema
var filterStatusEnum []interface{}

func init() {
	var res []FilterStatus
	if err := json.Unmarshal([]byte(`["EXECUTING","FAILED","INITIALIZING","PARTIAL_SUCCESSED","SUCCESSED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterStatusEnum = append(filterStatusEnum, v)
	}
}

func (m FilterStatus) validateFilterStatusEnum(path, location string, value FilterStatus) error {
	if err := validate.EnumCase(path, location, value, filterStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this filter status
func (m FilterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFilterStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this filter status based on context it is used
func (m FilterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
