// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DiskWhereInput disk where input
//
// swagger:model DiskWhereInput
type DiskWhereInput struct {

	// a n d
	AND []*DiskWhereInput `json:"AND,omitempty"`

	// n o t
	NOT []*DiskWhereInput `json:"NOT,omitempty"`

	// o r
	OR []*DiskWhereInput `json:"OR,omitempty"`

	// entity async status
	EntityAsyncStatus interface{} `json:"entityAsyncStatus,omitempty"`

	// entity async status in
	EntityAsyncStatusIn []EntityAsyncStatus `json:"entityAsyncStatus_in,omitempty"`

	// entity async status not
	EntityAsyncStatusNot interface{} `json:"entityAsyncStatus_not,omitempty"`

	// entity async status not in
	EntityAsyncStatusNotIn []EntityAsyncStatus `json:"entityAsyncStatus_not_in,omitempty"`

	// firmware
	Firmware *string `json:"firmware,omitempty"`

	// firmware contains
	FirmwareContains *string `json:"firmware_contains,omitempty"`

	// firmware ends with
	FirmwareEndsWith *string `json:"firmware_ends_with,omitempty"`

	// firmware gt
	FirmwareGt *string `json:"firmware_gt,omitempty"`

	// firmware gte
	FirmwareGte *string `json:"firmware_gte,omitempty"`

	// firmware in
	FirmwareIn []string `json:"firmware_in,omitempty"`

	// firmware lt
	FirmwareLt *string `json:"firmware_lt,omitempty"`

	// firmware lte
	FirmwareLte *string `json:"firmware_lte,omitempty"`

	// firmware not
	FirmwareNot *string `json:"firmware_not,omitempty"`

	// firmware not contains
	FirmwareNotContains *string `json:"firmware_not_contains,omitempty"`

	// firmware not ends with
	FirmwareNotEndsWith *string `json:"firmware_not_ends_with,omitempty"`

	// firmware not in
	FirmwareNotIn []string `json:"firmware_not_in,omitempty"`

	// firmware not starts with
	FirmwareNotStartsWith *string `json:"firmware_not_starts_with,omitempty"`

	// firmware starts with
	FirmwareStartsWith *string `json:"firmware_starts_with,omitempty"`

	// function
	Function interface{} `json:"function,omitempty"`

	// function in
	FunctionIn []DiskFunction `json:"function_in,omitempty"`

	// function not
	FunctionNot interface{} `json:"function_not,omitempty"`

	// function not in
	FunctionNotIn []DiskFunction `json:"function_not_in,omitempty"`

	// health status
	HealthStatus interface{} `json:"health_status,omitempty"`

	// health status in
	HealthStatusIn []DiskHealthStatus `json:"health_status_in,omitempty"`

	// health status not
	HealthStatusNot interface{} `json:"health_status_not,omitempty"`

	// health status not in
	HealthStatusNotIn []DiskHealthStatus `json:"health_status_not_in,omitempty"`

	// healthy
	Healthy *bool `json:"healthy,omitempty"`

	// healthy not
	HealthyNot *bool `json:"healthy_not,omitempty"`

	// host
	Host interface{} `json:"host,omitempty"`

	// id
	ID *string `json:"id,omitempty"`

	// id contains
	IDContains *string `json:"id_contains,omitempty"`

	// id ends with
	IDEndsWith *string `json:"id_ends_with,omitempty"`

	// id gt
	IDGt *string `json:"id_gt,omitempty"`

	// id gte
	IDGte *string `json:"id_gte,omitempty"`

	// id in
	IDIn []string `json:"id_in,omitempty"`

	// id lt
	IDLt *string `json:"id_lt,omitempty"`

	// id lte
	IDLte *string `json:"id_lte,omitempty"`

	// id not
	IDNot *string `json:"id_not,omitempty"`

	// id not contains
	IDNotContains *string `json:"id_not_contains,omitempty"`

	// id not ends with
	IDNotEndsWith *string `json:"id_not_ends_with,omitempty"`

	// id not in
	IDNotIn []string `json:"id_not_in,omitempty"`

	// id not starts with
	IDNotStartsWith *string `json:"id_not_starts_with,omitempty"`

	// id starts with
	IDStartsWith *string `json:"id_starts_with,omitempty"`

	// labels every
	LabelsEvery interface{} `json:"labels_every,omitempty"`

	// labels none
	LabelsNone interface{} `json:"labels_none,omitempty"`

	// labels some
	LabelsSome interface{} `json:"labels_some,omitempty"`

	// local id
	LocalID *string `json:"local_id,omitempty"`

	// local id contains
	LocalIDContains *string `json:"local_id_contains,omitempty"`

	// local id ends with
	LocalIDEndsWith *string `json:"local_id_ends_with,omitempty"`

	// local id gt
	LocalIDGt *string `json:"local_id_gt,omitempty"`

	// local id gte
	LocalIDGte *string `json:"local_id_gte,omitempty"`

	// local id in
	LocalIDIn []string `json:"local_id_in,omitempty"`

	// local id lt
	LocalIDLt *string `json:"local_id_lt,omitempty"`

	// local id lte
	LocalIDLte *string `json:"local_id_lte,omitempty"`

	// local id not
	LocalIDNot *string `json:"local_id_not,omitempty"`

	// local id not contains
	LocalIDNotContains *string `json:"local_id_not_contains,omitempty"`

	// local id not ends with
	LocalIDNotEndsWith *string `json:"local_id_not_ends_with,omitempty"`

	// local id not in
	LocalIDNotIn []string `json:"local_id_not_in,omitempty"`

	// local id not starts with
	LocalIDNotStartsWith *string `json:"local_id_not_starts_with,omitempty"`

	// local id starts with
	LocalIDStartsWith *string `json:"local_id_starts_with,omitempty"`

	// model
	Model *string `json:"model,omitempty"`

	// model contains
	ModelContains *string `json:"model_contains,omitempty"`

	// model ends with
	ModelEndsWith *string `json:"model_ends_with,omitempty"`

	// model gt
	ModelGt *string `json:"model_gt,omitempty"`

	// model gte
	ModelGte *string `json:"model_gte,omitempty"`

	// model in
	ModelIn []string `json:"model_in,omitempty"`

	// model lt
	ModelLt *string `json:"model_lt,omitempty"`

	// model lte
	ModelLte *string `json:"model_lte,omitempty"`

	// model not
	ModelNot *string `json:"model_not,omitempty"`

	// model not contains
	ModelNotContains *string `json:"model_not_contains,omitempty"`

	// model not ends with
	ModelNotEndsWith *string `json:"model_not_ends_with,omitempty"`

	// model not in
	ModelNotIn []string `json:"model_not_in,omitempty"`

	// model not starts with
	ModelNotStartsWith *string `json:"model_not_starts_with,omitempty"`

	// model starts with
	ModelStartsWith *string `json:"model_starts_with,omitempty"`

	// mounted
	Mounted *bool `json:"mounted,omitempty"`

	// mounted not
	MountedNot *bool `json:"mounted_not,omitempty"`

	// name
	Name *string `json:"name,omitempty"`

	// name contains
	NameContains *string `json:"name_contains,omitempty"`

	// name ends with
	NameEndsWith *string `json:"name_ends_with,omitempty"`

	// name gt
	NameGt *string `json:"name_gt,omitempty"`

	// name gte
	NameGte *string `json:"name_gte,omitempty"`

	// name in
	NameIn []string `json:"name_in,omitempty"`

	// name lt
	NameLt *string `json:"name_lt,omitempty"`

	// name lte
	NameLte *string `json:"name_lte,omitempty"`

	// name not
	NameNot *string `json:"name_not,omitempty"`

	// name not contains
	NameNotContains *string `json:"name_not_contains,omitempty"`

	// name not ends with
	NameNotEndsWith *string `json:"name_not_ends_with,omitempty"`

	// name not in
	NameNotIn []string `json:"name_not_in,omitempty"`

	// name not starts with
	NameNotStartsWith *string `json:"name_not_starts_with,omitempty"`

	// name starts with
	NameStartsWith *string `json:"name_starts_with,omitempty"`

	// numa node
	NumaNode *float64 `json:"numa_node,omitempty"`

	// numa node gt
	NumaNodeGt *float64 `json:"numa_node_gt,omitempty"`

	// numa node gte
	NumaNodeGte *float64 `json:"numa_node_gte,omitempty"`

	// numa node in
	NumaNodeIn []float64 `json:"numa_node_in,omitempty"`

	// numa node lt
	NumaNodeLt *float64 `json:"numa_node_lt,omitempty"`

	// numa node lte
	NumaNodeLte *float64 `json:"numa_node_lte,omitempty"`

	// numa node not
	NumaNodeNot *float64 `json:"numa_node_not,omitempty"`

	// numa node not in
	NumaNodeNotIn []float64 `json:"numa_node_not_in,omitempty"`

	// offline
	Offline *bool `json:"offline,omitempty"`

	// offline not
	OfflineNot *bool `json:"offline_not,omitempty"`

	// path
	Path *string `json:"path,omitempty"`

	// path contains
	PathContains *string `json:"path_contains,omitempty"`

	// path ends with
	PathEndsWith *string `json:"path_ends_with,omitempty"`

	// path gt
	PathGt *string `json:"path_gt,omitempty"`

	// path gte
	PathGte *string `json:"path_gte,omitempty"`

	// path in
	PathIn []string `json:"path_in,omitempty"`

	// path lt
	PathLt *string `json:"path_lt,omitempty"`

	// path lte
	PathLte *string `json:"path_lte,omitempty"`

	// path not
	PathNot *string `json:"path_not,omitempty"`

	// path not contains
	PathNotContains *string `json:"path_not_contains,omitempty"`

	// path not ends with
	PathNotEndsWith *string `json:"path_not_ends_with,omitempty"`

	// path not in
	PathNotIn []string `json:"path_not_in,omitempty"`

	// path not starts with
	PathNotStartsWith *string `json:"path_not_starts_with,omitempty"`

	// path starts with
	PathStartsWith *string `json:"path_starts_with,omitempty"`

	// persistent memory type
	PersistentMemoryType *string `json:"persistent_memory_type,omitempty"`

	// persistent memory type contains
	PersistentMemoryTypeContains *string `json:"persistent_memory_type_contains,omitempty"`

	// persistent memory type ends with
	PersistentMemoryTypeEndsWith *string `json:"persistent_memory_type_ends_with,omitempty"`

	// persistent memory type gt
	PersistentMemoryTypeGt *string `json:"persistent_memory_type_gt,omitempty"`

	// persistent memory type gte
	PersistentMemoryTypeGte *string `json:"persistent_memory_type_gte,omitempty"`

	// persistent memory type in
	PersistentMemoryTypeIn []string `json:"persistent_memory_type_in,omitempty"`

	// persistent memory type lt
	PersistentMemoryTypeLt *string `json:"persistent_memory_type_lt,omitempty"`

	// persistent memory type lte
	PersistentMemoryTypeLte *string `json:"persistent_memory_type_lte,omitempty"`

	// persistent memory type not
	PersistentMemoryTypeNot *string `json:"persistent_memory_type_not,omitempty"`

	// persistent memory type not contains
	PersistentMemoryTypeNotContains *string `json:"persistent_memory_type_not_contains,omitempty"`

	// persistent memory type not ends with
	PersistentMemoryTypeNotEndsWith *string `json:"persistent_memory_type_not_ends_with,omitempty"`

	// persistent memory type not in
	PersistentMemoryTypeNotIn []string `json:"persistent_memory_type_not_in,omitempty"`

	// persistent memory type not starts with
	PersistentMemoryTypeNotStartsWith *string `json:"persistent_memory_type_not_starts_with,omitempty"`

	// persistent memory type starts with
	PersistentMemoryTypeStartsWith *string `json:"persistent_memory_type_starts_with,omitempty"`

	// physical slot on brick
	PhysicalSlotOnBrick *float64 `json:"physical_slot_on_brick,omitempty"`

	// physical slot on brick gt
	PhysicalSlotOnBrickGt *float64 `json:"physical_slot_on_brick_gt,omitempty"`

	// physical slot on brick gte
	PhysicalSlotOnBrickGte *float64 `json:"physical_slot_on_brick_gte,omitempty"`

	// physical slot on brick in
	PhysicalSlotOnBrickIn []float64 `json:"physical_slot_on_brick_in,omitempty"`

	// physical slot on brick lt
	PhysicalSlotOnBrickLt *float64 `json:"physical_slot_on_brick_lt,omitempty"`

	// physical slot on brick lte
	PhysicalSlotOnBrickLte *float64 `json:"physical_slot_on_brick_lte,omitempty"`

	// physical slot on brick not
	PhysicalSlotOnBrickNot *float64 `json:"physical_slot_on_brick_not,omitempty"`

	// physical slot on brick not in
	PhysicalSlotOnBrickNotIn []float64 `json:"physical_slot_on_brick_not_in,omitempty"`

	// pmem dimms every
	PmemDimmsEvery interface{} `json:"pmem_dimms_every,omitempty"`

	// pmem dimms none
	PmemDimmsNone interface{} `json:"pmem_dimms_none,omitempty"`

	// pmem dimms some
	PmemDimmsSome interface{} `json:"pmem_dimms_some,omitempty"`

	// recommended usage
	RecommendedUsage interface{} `json:"recommended_usage,omitempty"`

	// recommended usage in
	RecommendedUsageIn []DiskUsage `json:"recommended_usage_in,omitempty"`

	// recommended usage not
	RecommendedUsageNot interface{} `json:"recommended_usage_not,omitempty"`

	// recommended usage not in
	RecommendedUsageNotIn []DiskUsage `json:"recommended_usage_not_in,omitempty"`

	// remaining life percent
	RemainingLifePercent *float64 `json:"remaining_life_percent,omitempty"`

	// remaining life percent gt
	RemainingLifePercentGt *float64 `json:"remaining_life_percent_gt,omitempty"`

	// remaining life percent gte
	RemainingLifePercentGte *float64 `json:"remaining_life_percent_gte,omitempty"`

	// remaining life percent in
	RemainingLifePercentIn []float64 `json:"remaining_life_percent_in,omitempty"`

	// remaining life percent lt
	RemainingLifePercentLt *float64 `json:"remaining_life_percent_lt,omitempty"`

	// remaining life percent lte
	RemainingLifePercentLte *float64 `json:"remaining_life_percent_lte,omitempty"`

	// remaining life percent not
	RemainingLifePercentNot *float64 `json:"remaining_life_percent_not,omitempty"`

	// remaining life percent not in
	RemainingLifePercentNotIn []float64 `json:"remaining_life_percent_not_in,omitempty"`

	// serial
	Serial *string `json:"serial,omitempty"`

	// serial contains
	SerialContains *string `json:"serial_contains,omitempty"`

	// serial ends with
	SerialEndsWith *string `json:"serial_ends_with,omitempty"`

	// serial gt
	SerialGt *string `json:"serial_gt,omitempty"`

	// serial gte
	SerialGte *string `json:"serial_gte,omitempty"`

	// serial in
	SerialIn []string `json:"serial_in,omitempty"`

	// serial lt
	SerialLt *string `json:"serial_lt,omitempty"`

	// serial lte
	SerialLte *string `json:"serial_lte,omitempty"`

	// serial not
	SerialNot *string `json:"serial_not,omitempty"`

	// serial not contains
	SerialNotContains *string `json:"serial_not_contains,omitempty"`

	// serial not ends with
	SerialNotEndsWith *string `json:"serial_not_ends_with,omitempty"`

	// serial not in
	SerialNotIn []string `json:"serial_not_in,omitempty"`

	// serial not starts with
	SerialNotStartsWith *string `json:"serial_not_starts_with,omitempty"`

	// serial starts with
	SerialStartsWith *string `json:"serial_starts_with,omitempty"`

	// size
	Size *float64 `json:"size,omitempty"`

	// size gt
	SizeGt *float64 `json:"size_gt,omitempty"`

	// size gte
	SizeGte *float64 `json:"size_gte,omitempty"`

	// size in
	SizeIn []float64 `json:"size_in,omitempty"`

	// size lt
	SizeLt *float64 `json:"size_lt,omitempty"`

	// size lte
	SizeLte *float64 `json:"size_lte,omitempty"`

	// size not
	SizeNot *float64 `json:"size_not,omitempty"`

	// size not in
	SizeNotIn []float64 `json:"size_not_in,omitempty"`

	// type
	Type interface{} `json:"type,omitempty"`

	// type in
	TypeIn []DiskType `json:"type_in,omitempty"`

	// type not
	TypeNot interface{} `json:"type_not,omitempty"`

	// type not in
	TypeNotIn []DiskType `json:"type_not_in,omitempty"`

	// usage
	Usage interface{} `json:"usage,omitempty"`

	// usage in
	UsageIn []DiskUsage `json:"usage_in,omitempty"`

	// usage not
	UsageNot interface{} `json:"usage_not,omitempty"`

	// usage not in
	UsageNotIn []DiskUsage `json:"usage_not_in,omitempty"`

	// usage status
	UsageStatus interface{} `json:"usage_status,omitempty"`

	// usage status in
	UsageStatusIn []DiskUsageStatus `json:"usage_status_in,omitempty"`

	// usage status not
	UsageStatusNot interface{} `json:"usage_status_not,omitempty"`

	// usage status not in
	UsageStatusNotIn []DiskUsageStatus `json:"usage_status_not_in,omitempty"`
}

// Validate validates this disk where input
func (m *DiskWhereInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAND(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNOT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOR(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityAsyncStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageNotIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageStatusIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageStatusNotIn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskWhereInput) validateAND(formats strfmt.Registry) error {
	if swag.IsZero(m.AND) { // not required
		return nil
	}

	for i := 0; i < len(m.AND); i++ {
		if swag.IsZero(m.AND[i]) { // not required
			continue
		}

		if m.AND[i] != nil {
			if err := m.AND[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) validateNOT(formats strfmt.Registry) error {
	if swag.IsZero(m.NOT) { // not required
		return nil
	}

	for i := 0; i < len(m.NOT); i++ {
		if swag.IsZero(m.NOT[i]) { // not required
			continue
		}

		if m.NOT[i] != nil {
			if err := m.NOT[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) validateOR(formats strfmt.Registry) error {
	if swag.IsZero(m.OR) { // not required
		return nil
	}

	for i := 0; i < len(m.OR); i++ {
		if swag.IsZero(m.OR[i]) { // not required
			continue
		}

		if m.OR[i] != nil {
			if err := m.OR[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) validateEntityAsyncStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateEntityAsyncStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityAsyncStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateFunctionIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FunctionIn); i++ {

		if err := m.FunctionIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateFunctionNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.FunctionNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.FunctionNotIn); i++ {

		if err := m.FunctionNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateHealthStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateHealthStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateRecommendedUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.RecommendedUsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.RecommendedUsageIn); i++ {

		if err := m.RecommendedUsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateRecommendedUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.RecommendedUsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.RecommendedUsageNotIn); i++ {

		if err := m.RecommendedUsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateTypeIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateTypeNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsageIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageIn); i++ {

		if err := m.UsageIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsageNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageNotIn); i++ {

		if err := m.UsageNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsageStatusIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageStatusIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageStatusIn); i++ {

		if err := m.UsageStatusIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) validateUsageStatusNotIn(formats strfmt.Registry) error {
	if swag.IsZero(m.UsageStatusNotIn) { // not required
		return nil
	}

	for i := 0; i < len(m.UsageStatusNotIn); i++ {

		if err := m.UsageStatusNotIn[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this disk where input based on the context it is used
func (m *DiskWhereInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAND(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNOT(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOR(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntityAsyncStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFunctionNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendedUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendedUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageStatusIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsageStatusNotIn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiskWhereInput) contextValidateAND(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AND); i++ {

		if m.AND[i] != nil {
			if err := m.AND[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AND" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateNOT(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NOT); i++ {

		if m.NOT[i] != nil {
			if err := m.NOT[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NOT" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateOR(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OR); i++ {

		if m.OR[i] != nil {
			if err := m.OR[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OR" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateEntityAsyncStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusIn); i++ {

		if err := m.EntityAsyncStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateEntityAsyncStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EntityAsyncStatusNotIn); i++ {

		if err := m.EntityAsyncStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entityAsyncStatus_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateFunctionIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FunctionIn); i++ {

		if err := m.FunctionIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateFunctionNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FunctionNotIn); i++ {

		if err := m.FunctionNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("function_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateHealthStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusIn); i++ {

		if err := m.HealthStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateHealthStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HealthStatusNotIn); i++ {

		if err := m.HealthStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateRecommendedUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecommendedUsageIn); i++ {

		if err := m.RecommendedUsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateRecommendedUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecommendedUsageNotIn); i++ {

		if err := m.RecommendedUsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommended_usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateTypeIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeIn); i++ {

		if err := m.TypeIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateTypeNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeNotIn); i++ {

		if err := m.TypeNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageIn); i++ {

		if err := m.UsageIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageNotIn); i++ {

		if err := m.UsageNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageStatusIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageStatusIn); i++ {

		if err := m.UsageStatusIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DiskWhereInput) contextValidateUsageStatusNotIn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsageStatusNotIn); i++ {

		if err := m.UsageStatusNotIn[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage_status_not_in" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiskWhereInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskWhereInput) UnmarshalBinary(b []byte) error {
	var res DiskWhereInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
